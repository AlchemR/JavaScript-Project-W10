/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (function() { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ "./src/index.js":
/*!**********************!*\
  !*** ./src/index.js ***!
  \**********************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _scripts_level1_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./scripts/level1.js */ \"./src/scripts/level1.js\");\n/* harmony import */ var _scripts_level2_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./scripts/level2.js */ \"./src/scripts/level2.js\");\n/* harmony import */ var _scripts_level3_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./scripts/level3.js */ \"./src/scripts/level3.js\");\n/* harmony import */ var _scripts_level4_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./scripts/level4.js */ \"./src/scripts/level4.js\");\n/* harmony import */ var planck_dist_planck_with_testbed__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! planck/dist/planck-with-testbed */ \"./node_modules/planck/dist/planck-with-testbed.js\");\n/* harmony import */ var planck_dist_planck_with_testbed__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/__webpack_require__.n(planck_dist_planck_with_testbed__WEBPACK_IMPORTED_MODULE_4__);\n// entry file\n// const Level1 = require(\"./level1.js\")\n\n\n\n\n\nvar canvas1 = document.getElementById('overlay');\nvar context2 = canvas1.getContext('2d');\n\nwindow.onload = function () {\n  var playbutton = document.querySelector('#playbutton');\n  var destroybutton = document.querySelector('#destroybutton');\n  var startbutton = document.querySelector('#startbutton');\n  var startbutton2 = document.querySelector('#startbutton2');\n  var startbutton3 = document.querySelector('#startbutton3');\n  var startbutton4 = document.querySelector('#startbutton4');\n  playbutton.addEventListener('click', function () {\n    testbed.togglePause();\n  }); // doesnt update text file, might need to look into how to bind later\n\n  destroybutton.addEventListener('click', function () {\n    console.log(\"destroy works\");\n  });\n  startbutton.addEventListener('click', function () {\n    (0,_scripts_level1_js__WEBPACK_IMPORTED_MODULE_0__.level1)();\n  });\n  startbutton2.addEventListener('click', function () {\n    (0,_scripts_level2_js__WEBPACK_IMPORTED_MODULE_1__.level2)();\n  });\n  startbutton3.addEventListener('click', function () {\n    (0,_scripts_level3_js__WEBPACK_IMPORTED_MODULE_2__.level3)();\n  });\n  startbutton4.addEventListener('click', function () {\n    (0,_scripts_level4_js__WEBPACK_IMPORTED_MODULE_3__.level4)();\n  });\n  window.destroybutton = destroybutton;\n  window.playbutton = playbutton;\n};\n\ncanvas1.height = 100;\ncanvas1.width = innerWidth;\nwindow.context2 = context2;\nwindow.canvas1 = canvas1; // import * as planck from '../node_modules/planck/dist/planck-with-testbed'\n// level1()//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9zcmMvaW5kZXguanMuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7OztBQUFBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0EsSUFBTUssT0FBTyxHQUFHQyxRQUFRLENBQUNDLGNBQVQsQ0FBd0IsU0FBeEIsQ0FBaEI7QUFDQSxJQUFNQyxRQUFRLEdBQUdILE9BQU8sQ0FBQ0ksVUFBUixDQUFtQixJQUFuQixDQUFqQjs7QUFFQUMsTUFBTSxDQUFDQyxNQUFQLEdBQWdCLFlBQVk7RUFDMUIsSUFBTUMsVUFBVSxHQUFHTixRQUFRLENBQUNPLGFBQVQsQ0FBdUIsYUFBdkIsQ0FBbkI7RUFDQSxJQUFNQyxhQUFhLEdBQUdSLFFBQVEsQ0FBQ08sYUFBVCxDQUF1QixnQkFBdkIsQ0FBdEI7RUFDQSxJQUFNRSxXQUFXLEdBQUdULFFBQVEsQ0FBQ08sYUFBVCxDQUF1QixjQUF2QixDQUFwQjtFQUNBLElBQU1HLFlBQVksR0FBR1YsUUFBUSxDQUFDTyxhQUFULENBQXVCLGVBQXZCLENBQXJCO0VBQ0EsSUFBTUksWUFBWSxHQUFHWCxRQUFRLENBQUNPLGFBQVQsQ0FBdUIsZUFBdkIsQ0FBckI7RUFDQSxJQUFNSyxZQUFZLEdBQUdaLFFBQVEsQ0FBQ08sYUFBVCxDQUF1QixlQUF2QixDQUFyQjtFQUNBRCxVQUFVLENBQUNPLGdCQUFYLENBQTRCLE9BQTVCLEVBQXFDLFlBQU07SUFBRUMsT0FBTyxDQUFDQyxXQUFSO0VBQXdCLENBQXJFLEVBUDBCLENBTzZDOztFQUN2RVAsYUFBYSxDQUFDSyxnQkFBZCxDQUErQixPQUEvQixFQUF3QyxZQUFNO0lBQUVHLE9BQU8sQ0FBQ0MsR0FBUixDQUFZLGVBQVo7RUFBZ0MsQ0FBaEY7RUFDQVIsV0FBVyxDQUFDSSxnQkFBWixDQUE2QixPQUE3QixFQUFzQyxZQUFNO0lBQUVuQiwwREFBTTtFQUFJLENBQXhEO0VBQ0FnQixZQUFZLENBQUNHLGdCQUFiLENBQThCLE9BQTlCLEVBQXVDLFlBQU07SUFBRWxCLDBEQUFNO0VBQUksQ0FBekQ7RUFDQWdCLFlBQVksQ0FBQ0UsZ0JBQWIsQ0FBOEIsT0FBOUIsRUFBdUMsWUFBTTtJQUFFakIsMERBQU07RUFBSSxDQUF6RDtFQUNBZ0IsWUFBWSxDQUFDQyxnQkFBYixDQUE4QixPQUE5QixFQUF1QyxZQUFNO0lBQUVoQiwwREFBTTtFQUFJLENBQXpEO0VBQ0FPLE1BQU0sQ0FBQ0ksYUFBUCxHQUF1QkEsYUFBdkI7RUFDQUosTUFBTSxDQUFDRSxVQUFQLEdBQW9CQSxVQUFwQjtBQUNELENBZkQ7O0FBa0JBUCxPQUFPLENBQUNtQixNQUFSLEdBQWlCLEdBQWpCO0FBQ0FuQixPQUFPLENBQUNvQixLQUFSLEdBQWdCQyxVQUFoQjtBQUNBaEIsTUFBTSxDQUFDRixRQUFQLEdBQWtCQSxRQUFsQjtBQUNBRSxNQUFNLENBQUNMLE9BQVAsR0FBaUJBLE9BQWpCLEVBRUE7QUFHQSIsInNvdXJjZXMiOlsid2VicGFjazovL3Rlc3QtcmVwby8uL3NyYy9pbmRleC5qcz9iNjM1Il0sInNvdXJjZXNDb250ZW50IjpbIi8vIGVudHJ5IGZpbGVcblxuLy8gY29uc3QgTGV2ZWwxID0gcmVxdWlyZShcIi4vbGV2ZWwxLmpzXCIpXG5pbXBvcnQge2xldmVsMX0gZnJvbSBcIi4vc2NyaXB0cy9sZXZlbDEuanNcIlxuaW1wb3J0IHsgbGV2ZWwyIH0gZnJvbSBcIi4vc2NyaXB0cy9sZXZlbDIuanNcIlxuaW1wb3J0IHsgbGV2ZWwzIH0gZnJvbSBcIi4vc2NyaXB0cy9sZXZlbDMuanNcIlxuaW1wb3J0IHsgbGV2ZWw0IH0gZnJvbSBcIi4vc2NyaXB0cy9sZXZlbDQuanNcIlxuXG5pbXBvcnQgKiBhcyBwbGFuY2sgZnJvbSAncGxhbmNrL2Rpc3QvcGxhbmNrLXdpdGgtdGVzdGJlZCdcbmNvbnN0IGNhbnZhczEgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnb3ZlcmxheScpXG5jb25zdCBjb250ZXh0MiA9IGNhbnZhczEuZ2V0Q29udGV4dCgnMmQnKVxuXG53aW5kb3cub25sb2FkID0gZnVuY3Rpb24gKCkge1xuICBjb25zdCBwbGF5YnV0dG9uID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignI3BsYXlidXR0b24nKVxuICBjb25zdCBkZXN0cm95YnV0dG9uID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignI2Rlc3Ryb3lidXR0b24nKVxuICBjb25zdCBzdGFydGJ1dHRvbiA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJyNzdGFydGJ1dHRvbicpXG4gIGNvbnN0IHN0YXJ0YnV0dG9uMiA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJyNzdGFydGJ1dHRvbjInKVxuICBjb25zdCBzdGFydGJ1dHRvbjMgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcjc3RhcnRidXR0b24zJylcbiAgY29uc3Qgc3RhcnRidXR0b240ID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignI3N0YXJ0YnV0dG9uNCcpXG4gIHBsYXlidXR0b24uYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCAoKSA9PiB7IHRlc3RiZWQudG9nZ2xlUGF1c2UoKTsgfSkgLy8gZG9lc250IHVwZGF0ZSB0ZXh0IGZpbGUsIG1pZ2h0IG5lZWQgdG8gbG9vayBpbnRvIGhvdyB0byBiaW5kIGxhdGVyXG4gIGRlc3Ryb3lidXR0b24uYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCAoKSA9PiB7IGNvbnNvbGUubG9nKFwiZGVzdHJveSB3b3Jrc1wiKSA7IH0gKVxuICBzdGFydGJ1dHRvbi5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsICgpID0+IHsgbGV2ZWwxKCkgfSlcbiAgc3RhcnRidXR0b24yLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgKCkgPT4geyBsZXZlbDIoKSB9KVxuICBzdGFydGJ1dHRvbjMuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCAoKSA9PiB7IGxldmVsMygpIH0pXG4gIHN0YXJ0YnV0dG9uNC5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsICgpID0+IHsgbGV2ZWw0KCkgfSlcbiAgd2luZG93LmRlc3Ryb3lidXR0b24gPSBkZXN0cm95YnV0dG9uXG4gIHdpbmRvdy5wbGF5YnV0dG9uID0gcGxheWJ1dHRvblxufVxuXG5cbmNhbnZhczEuaGVpZ2h0ID0gMTAwXG5jYW52YXMxLndpZHRoID0gaW5uZXJXaWR0aFxud2luZG93LmNvbnRleHQyID0gY29udGV4dDJcbndpbmRvdy5jYW52YXMxID0gY2FudmFzMVxuXG4vLyBpbXBvcnQgKiBhcyBwbGFuY2sgZnJvbSAnLi4vbm9kZV9tb2R1bGVzL3BsYW5jay9kaXN0L3BsYW5jay13aXRoLXRlc3RiZWQnXG5cblxuLy8gbGV2ZWwxKCkiXSwibmFtZXMiOlsibGV2ZWwxIiwibGV2ZWwyIiwibGV2ZWwzIiwibGV2ZWw0IiwicGxhbmNrIiwiY2FudmFzMSIsImRvY3VtZW50IiwiZ2V0RWxlbWVudEJ5SWQiLCJjb250ZXh0MiIsImdldENvbnRleHQiLCJ3aW5kb3ciLCJvbmxvYWQiLCJwbGF5YnV0dG9uIiwicXVlcnlTZWxlY3RvciIsImRlc3Ryb3lidXR0b24iLCJzdGFydGJ1dHRvbiIsInN0YXJ0YnV0dG9uMiIsInN0YXJ0YnV0dG9uMyIsInN0YXJ0YnV0dG9uNCIsImFkZEV2ZW50TGlzdGVuZXIiLCJ0ZXN0YmVkIiwidG9nZ2xlUGF1c2UiLCJjb25zb2xlIiwibG9nIiwiaGVpZ2h0Iiwid2lkdGgiLCJpbm5lcldpZHRoIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./src/index.js\n");

/***/ }),

/***/ "./src/scripts/level1.js":
/*!*******************************!*\
  !*** ./src/scripts/level1.js ***!
  \*******************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"level1\": function() { return /* binding */ level1; }\n/* harmony export */ });\n/* harmony import */ var planck_dist_planck_with_testbed__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! planck/dist/planck-with-testbed */ \"./node_modules/planck/dist/planck-with-testbed.js\");\n/* harmony import */ var planck_dist_planck_with_testbed__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(planck_dist_planck_with_testbed__WEBPACK_IMPORTED_MODULE_0__);\n//level1trial\n\nfunction level1() {\n  planck_dist_planck_with_testbed__WEBPACK_IMPORTED_MODULE_0__.testbed('Sandbox', function (testbed) {\n    testbed.background = \"#111111\";\n    testbed.speed = 2;\n    testbed.width = innerWidth / 4;\n    testbed.height = innerHeight / 4;\n    testbed.hz = 30;\n    var pl = planck_dist_planck_with_testbed__WEBPACK_IMPORTED_MODULE_0__,\n        Vec2 = pl.Vec2;\n    var world = new pl.World(Vec2(0, -10));\n    testbed.mouseForce = 6000;\n    var levelscore = 10000; // 10K tenative\n    // turns on/off impulses to apply like slingshot\n\n    var COUNT = 4;\n    var ground = world.createBody();\n    ground.createFixture(pl.Edge(Vec2(-80.0, 0.0), Vec2(60.0, 0.0)), 0.0);\n    ground.createFixture(pl.Edge(Vec2(100.0, 0.0), Vec2(200.0, 20.0)), 0.0);\n    ground.createFixture(pl.Edge(Vec2(60.0, 0.0), Vec2(130.0, -30.0)), 0.0);\n    ground.createFixture(pl.Edge(Vec2(200.0, -30.0), Vec2(120.0, -80.0)), 0.0);\n    ground.createFixture(pl.Edge(Vec2(-80.0, -80.0), Vec2(200.0, -80.0)), 0.0);\n    ground.createFixture(pl.Edge(Vec2(200.0, 150.0), Vec2(200.0, -80.0)), 0.0);\n    ground.createFixture(pl.Edge(Vec2(-80.0, 150.0), Vec2(-80.0, -80.0)), 0.0);\n    ground.createFixture(pl.Edge(Vec2(-80.0, 150.0), Vec2(200.0, 150.0)), 0.0);\n    var ballBodyDef = {\n      position: Vec2(-50, 10),\n      bullet: false,\n      allowSleep: true,\n      linearDamping: .01,\n      angularDamping: .5\n    };\n    var ballStartAttr = {\n      friction: .1,\n      restitution: .5,\n      // bounce\n      density: 10,\n      userData: 'ball'\n    };\n    var ballFinishAttr = {\n      friction: .2,\n      restitution: .1,\n      // bounce\n      density: 1,\n      userData: 'finish'\n    };\n    var ball1 = world.createDynamicBody(ballBodyDef);\n    world.destroyBody(ball1);\n\n    function generateShot() {\n      if (ball1.m_destroyed) {\n        ball1 = world.createDynamicBody(ballBodyDef);\n        ball1.createFixture(pl.Circle(1), ballStartAttr);\n        ball1.render = {\n          texture: img\n        };\n        var img = new Image();\n        img.src = \"https://upload.wikimedia.org/wikipedia/commons/2/27/Wey_source_farringdon.jpg\";\n      }\n    }\n\n    generateShot();\n    var ball3 = world.createDynamicBody(ballBodyDef);\n    ball3.setPosition(Vec2(30, 2));\n    ball3.createFixture(pl.Circle(1), ballStartAttr);\n    ball3.render = {\n      fill: 'blue',\n      stroke: 'blue'\n    };\n    var ball2 = world.createBody(Vec2(40, -78));\n    ball2.createFixture(pl.Circle(1), ballFinishAttr);\n    ball2.render = {\n      fill: 'red',\n      stroke: 'red'\n    };\n    var a = 2;\n    var box = planck_dist_planck_with_testbed__WEBPACK_IMPORTED_MODULE_0__.Box(a, a);\n    var x = Vec2(8.0, 8);\n    var y = Vec2();\n    var deltaX = Vec2(0, 4);\n    var deltaY = Vec2(0, 4);\n\n    for (var i = 0; i < COUNT; ++i) {\n      y.set(x);\n      world.createDynamicBody(y).createFixture(box, 5.0);\n      y.add(deltaY);\n      x.add(deltaX);\n    } // ball1.addEventListener(\"click\", () => { isClicked(); } )\n\n\n    function keylistener() {\n      //there is probably a way to do this with a case statement\n      //camera\n      if (testbed.activeKeys.right) {\n        if (cameraLimitX(testbed.x)) {\n          testbed.x += 2;\n        } else {\n          testbed.x = ball1pos.x;\n        }\n      } else if (testbed.activeKeys.left) {\n        if (cameraLimitX(testbed.x)) {\n          testbed.x -= 2;\n        } else {\n          testbed.x = ball1pos.x;\n        }\n      } else if (testbed.activeKeys.up) {\n        if (cameraLimitY(testbed.y)) {\n          testbed.y -= 2;\n        } else {\n          testbed.y = ball1pos.y;\n        }\n      } else if (testbed.activeKeys.down) {\n        if (cameraLimitY(testbed.y)) {\n          testbed.y += 2;\n        } else {\n          testbed.y = ball1pos.y;\n        }\n      } else if (testbed.activeKeys.C) {\n        testbed.togglePause();\n      } else if (testbed.activeKeys.fire) {\n        generateShot();\n      }\n    }\n\n    var ball1pos = ball1.getPosition();\n\n    function cameraLimitX(xPos) {\n      if (testbed.x + testbed.width * .4 > ball1pos.x && testbed.x - testbed.width * .4 < ball1pos.x) {\n        return true;\n      } else {\n        return false;\n      }\n    }\n\n    function cameraLimitY(yPos) {\n      if (testbed.y + testbed.height * .4 > ball1pos.y && testbed.y - testbed.height * .6 < ball1pos.y) {\n        return true;\n      } else {\n        return false;\n      }\n    }\n\n    function textOut() {\n      var scale = 20;\n      var ballpos = ball1.getPosition();\n      context2.clearRect(0, 0, canvas1.width, canvas1.height);\n      context2.font = \"\".concat(scale, \"px Courier New\");\n      context2.fillStyle = 'blue';\n      context2.fillText(\"X POS : \".concat(Math.round(ballpos.x)), 20, \"\".concat(scale));\n      context2.fillText(\"Y POS :\".concat(Math.round(ballpos.y)), 20, \"\".concat(scale * 2));\n      context2.fillText(\"testbed X POS : \".concat(Math.round(testbed.x)), 20, \"\".concat(scale * 3));\n      context2.fillText(\"testbed Y POS : \".concat(Math.round(testbed.y)), 20, \"\".concat(scale * 4));\n      context2.fillText(\"Pause : \".concat(testbed.isPaused()), 250, \"\".concat(scale));\n      context2.fillText(\"Shot destroyed : \".concat(ball1.m_destroyed), 250, \"\".concat(scale * 2));\n      context2.fillText(\"testbed Y height :\".concat(Math.round(testbed.height)), 20, \"\".concat(scale * 5));\n    }\n\n    function isClicked() {\n      console.log(\"clicked\");\n    }\n\n    function finishTouch() {\n      world.on('post-solve', function (contact) {\n        var fA = contact.getFixtureA(),\n            bA = fA.getBody();\n        var fB = contact.getFixtureB(),\n            bB = fB.getBody();\n        var throwBall = fA.getUserData() === \"ball\" ? bA : fB.getUserData() === \"ball\" ? bB : null;\n        var finishBall = fA.getUserData() === \"finish\" ? bA : fB.getUserData() === \"finish\" ? bB : null;\n        setTimeout(function () {\n          if (throwBall && finishBall) {\n            world.destroyBody(throwBall);\n            console.log(\"\");\n          }\n        }, 1);\n        isClicked();\n      });\n    }\n\n    testbed.step = function () {\n      keylistener();\n      textOut();\n      finishTouch();\n    };\n\n    return world;\n  });\n} // export {level1};\n// export default;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/scripts/level1.js\n");

/***/ }),

/***/ "./src/scripts/level2.js":
/*!*******************************!*\
  !*** ./src/scripts/level2.js ***!
  \*******************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"level2\": function() { return /* binding */ level2; }\n/* harmony export */ });\n/* harmony import */ var planck_dist_planck_with_testbed__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! planck/dist/planck-with-testbed */ \"./node_modules/planck/dist/planck-with-testbed.js\");\n/* harmony import */ var planck_dist_planck_with_testbed__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(planck_dist_planck_with_testbed__WEBPACK_IMPORTED_MODULE_0__);\n//level1trial\n\nfunction level2() {\n  planck_dist_planck_with_testbed__WEBPACK_IMPORTED_MODULE_0__.testbed('Sandbox', function (testbed) {\n    // window.canvas = canvas\n    testbed.background = \"#111111\";\n    window.planck = planck_dist_planck_with_testbed__WEBPACK_IMPORTED_MODULE_0__;\n    window.testbed = testbed; //currently doesnt work\n\n    testbed.speed = 2;\n    testbed.width = innerWidth / 4;\n    testbed.height = innerHeight / 4;\n    testbed.hz = 30;\n    var pl = planck_dist_planck_with_testbed__WEBPACK_IMPORTED_MODULE_0__,\n        Vec2 = pl.Vec2;\n    var world = new pl.World(Vec2(0, -10));\n    var breakout1 = false;\n    window.breakout1 = breakout1; // testbed.mouseForce = 6000; \n    // turns on/off impulses to apply like slingshot\n\n    var COUNT = 4;\n    var ground = world.createBody();\n    ground.createFixture(pl.Edge(Vec2(-80.0, -80.0), Vec2(200.0, -80.0)), 0.0);\n    ground.createFixture(pl.Edge(Vec2(200.0, 150.0), Vec2(200.0, -80.0)), 0.0);\n    ground.createFixture(pl.Edge(Vec2(-80.0, 150.0), Vec2(-80.0, -80.0)), 0.0);\n    ground.createFixture(pl.Edge(Vec2(-80.0, 150.0), Vec2(200.0, 150.0)), 0.0);\n    ground.createFixture(pl.Edge(Vec2(80.0, 30.0), Vec2(200.0, 0.0)), {\n      restitution: 60\n    }).render = {\n      fill: 'blue',\n      stroke: 'blue'\n    };\n    ;\n    ground.createFixture(pl.Edge(Vec2(80.0, 30.0), Vec2(200.0, 50.0)), {\n      restitution: 60\n    }).render = {\n      fill: 'blue',\n      stroke: 'blue'\n    };\n    ;\n    ground.createFixture(pl.Edge(Vec2(80.0, 30.0), Vec2(80.0, -40.0)), 0.0);\n    ;\n    ground.createFixture(pl.Edge(Vec2(100.0, -80.0), Vec2(200.0, -20.0)), {\n      restitution: 60\n    }).render = {\n      fill: 'blue',\n      stroke: 'blue'\n    };\n    ; // ground.createFixture(pl.Circle(Vec2(100.0, -80.0), 10), { restitution: 60 }).render = {fill: 'blue', stroke: 'blue'}; // bouncy\n    // ground.createFixture(pl.Circle(Vec2(200.0, -40.0), 10), { restitution: 60 }).render = { fill: 'blue', stroke: 'blue' }; // bouncy\n    // ground.createFixture(pl.Box(50, 5, Vec2(150, -60), 60), {restitution: 60}).render = { fill: 'blue', stroke: 'blue' };\n    // .render = { fill: 'blue', stroke: 'blue' }; // bouncy\n\n    var ballBodyDef = {\n      position: Vec2(70, -40),\n      bullet: false,\n      allowSleep: true,\n      linearDamping: .01,\n      angularDamping: .5\n    };\n    var ballStartAttr = {\n      friction: .1,\n      restitution: .5,\n      // bounce\n      density: 10,\n      userData: 'ball'\n    };\n    var ballFinishAttr = {\n      friction: .2,\n      restitution: .1,\n      // bounce\n      density: 1,\n      userData: 'finish'\n    };\n    var ball1 = world.createDynamicBody(ballBodyDef);\n    world.destroyBody(ball1);\n\n    function generateShot() {\n      if (ball1.m_destroyed) {\n        ball1 = world.createDynamicBody(ballBodyDef);\n        ball1.createFixture(pl.Circle(1), ballStartAttr);\n        ball1.render = {\n          texture: img\n        };\n        var img = new Image();\n        img.src = \"https://upload.wikimedia.org/wikipedia/commons/2/27/Wey_source_farringdon.jpg\";\n      }\n    }\n\n    generateShot();\n    var ball3 = world.createDynamicBody(ballBodyDef);\n    ball3.setPosition(Vec2(30, 2));\n    ball3.createFixture(pl.Circle(1), ballStartAttr);\n    ball3.render = {\n      fill: 'blue',\n      stroke: 'blue'\n    };\n    var ball2 = world.createBody(Vec2(82, -25));\n    ball2.createFixture(pl.Circle(1), ballFinishAttr);\n    ball2.render = {\n      fill: 'red',\n      stroke: 'red'\n    };\n    window.pl = pl;\n    window.world = world;\n    console.log(\"white ball = ball1 \", ball1);\n    window.ball1 = ball1;\n    console.log(\"red ball = ball2 \", ball2);\n    window.ball2 = ball2;\n    console.log(\"blue ball = ball3 \", ball3);\n    window.ball3 = ball3;\n    var a = 2;\n    var box = planck_dist_planck_with_testbed__WEBPACK_IMPORTED_MODULE_0__.Box(a, a);\n    var x = Vec2(8.0, 8);\n    var y = Vec2();\n    var deltaX = Vec2(0, 4);\n    var deltaY = Vec2(0, 4);\n\n    for (var i = 0; i < COUNT; ++i) {\n      y.set(x);\n      world.createDynamicBody(y).createFixture(box, 5.0);\n      y.add(deltaY);\n      x.add(deltaX);\n    }\n\n    function keylistener() {\n      //there is probably a way to do this with a case statement\n      //camera\n      if (testbed.activeKeys.right) {\n        if (cameraLimitX(testbed.x)) {\n          testbed.x += 2;\n        } else {\n          testbed.x = ball1pos.x;\n        }\n      } else if (testbed.activeKeys.left) {\n        if (cameraLimitX(testbed.x)) {\n          testbed.x -= 2;\n        } else {\n          testbed.x = ball1pos.x;\n        }\n      } else if (testbed.activeKeys.up) {\n        if (cameraLimitY(testbed.y)) {\n          testbed.y -= 2;\n        } else {\n          testbed.y = ball1pos.y;\n        }\n      } else if (testbed.activeKeys.down) {\n        if (cameraLimitY(testbed.y)) {\n          testbed.y += 2;\n        } else {\n          testbed.y = ball1pos.y;\n        }\n      } else if (testbed.activeKeys.C) {\n        testbed.togglePause();\n      } else if (testbed.activeKeys.fire) {\n        generateShot();\n      }\n    }\n\n    var ball1pos = ball1.getPosition();\n\n    function cameraLimitX(xPos) {\n      if (testbed.x + testbed.width * .4 > ball1pos.x && testbed.x - testbed.width * .4 < ball1pos.x) {\n        return true;\n      } else {\n        return false;\n      }\n    }\n\n    function cameraLimitY(yPos) {\n      if (testbed.y + testbed.height * .4 > ball1pos.y && testbed.y - (testbed.height + canvas1.height) * .4 < ball1pos.y) {\n        return true;\n      } else {\n        return false;\n      }\n    }\n\n    function textOut() {\n      var scale = 20;\n      var ballpos = ball1.getPosition();\n      context2.clearRect(0, 0, canvas1.width, canvas1.height);\n      context2.font = \"\".concat(scale, \"px Courier New\");\n      context2.fillStyle = 'blue';\n      context2.fillText(\"X POS : \".concat(Math.round(ballpos.x)), 20, \"\".concat(scale));\n      context2.fillText(\"Y POS :\".concat(Math.round(ballpos.y)), 20, \"\".concat(scale * 2));\n      context2.fillText(\"testbed X POS : \".concat(Math.round(testbed.x)), 20, \"\".concat(scale * 3));\n      context2.fillText(\"testbed Y POS : \".concat(Math.round(testbed.y)), 20, \"\".concat(scale * 4));\n      context2.fillText(\"testbed Y height :\".concat(Math.round(testbed.height)), 20, \"\".concat(scale * 5));\n      context2.fillText(\"Pause : \".concat(testbed.isPaused()), 250, \"\".concat(scale));\n      context2.fillText(\"Shot destroyed : \".concat(ball1.m_destroyed), 250, \"\".concat(scale * 2));\n    }\n\n    function finishTouch() {\n      world.on('post-solve', function (contact) {\n        var fA = contact.getFixtureA(),\n            bA = fA.getBody();\n        var fB = contact.getFixtureB(),\n            bB = fB.getBody();\n        var throwBall = fA.getUserData() === \"ball\" ? bA : fB.getUserData() === \"ball\" ? bB : null;\n        var finishBall = fA.getUserData() === \"finish\" ? bA : fB.getUserData() === \"finish\" ? bB : null;\n        setTimeout(function () {\n          if (throwBall && finishBall) {\n            world.destroyBody(throwBall);\n          }\n        }, 1);\n      });\n    }\n\n    testbed.step = function () {\n      keylistener();\n      textOut();\n      finishTouch();\n    };\n\n    return world;\n  });\n} // export {level1};\n// export default;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/scripts/level2.js\n");

/***/ }),

/***/ "./src/scripts/level3.js":
/*!*******************************!*\
  !*** ./src/scripts/level3.js ***!
  \*******************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"level3\": function() { return /* binding */ level3; }\n/* harmony export */ });\n/* harmony import */ var planck_dist_planck_with_testbed__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! planck/dist/planck-with-testbed */ \"./node_modules/planck/dist/planck-with-testbed.js\");\n/* harmony import */ var planck_dist_planck_with_testbed__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(planck_dist_planck_with_testbed__WEBPACK_IMPORTED_MODULE_0__);\n//level1trial\n\nfunction level3() {\n  planck_dist_planck_with_testbed__WEBPACK_IMPORTED_MODULE_0__.testbed('Sandbox', function (testbed) {\n    testbed.background = \"#111111\";\n    testbed.speed = 2;\n    testbed.width = innerWidth / 4;\n    testbed.height = innerHeight / 4;\n    testbed.hz = 30;\n    var pl = planck_dist_planck_with_testbed__WEBPACK_IMPORTED_MODULE_0__,\n        Vec2 = pl.Vec2;\n    var world = new pl.World(Vec2(0, -10)); // testbed.mouseForce = 6000; \n    // turns on/off impulses to apply like slingshot \n\n    var COUNT = 0;\n    var ground = world.createBody();\n    ground.createFixture(pl.Edge(Vec2(-80.0, -80.0), Vec2(200.0, -80.0)), 0.0); // ground\n\n    ground.createFixture(pl.Edge(Vec2(200.0, 150.0), Vec2(200.0, -80.0)), 0.0); // right\n\n    ground.createFixture(pl.Edge(Vec2(-80.0, 150.0), Vec2(-80.0, -80.0)), 0.0); // left\n\n    ground.createFixture(pl.Edge(Vec2(-80.0, 150.0), Vec2(200.0, 150.0)), 0.0); // top\n\n    ground.createFixture(pl.Edge(Vec2(-80.0, 0.0), Vec2(150.0, 0.0)), 0.0); // ground\n\n    ground.createFixture(pl.Edge(Vec2(80.0, -30.0), Vec2(170.0, -10.0)), {\n      restitution: 0,\n      friction: 0\n    }).render = {\n      fill: 'orange',\n      stroke: 'orange'\n    }; // ground slant\n\n    ground.createFixture(pl.Edge(Vec2(170.0, -10.0), Vec2(200.0, 0.0)), {\n      restitution: 0,\n      friction: 0\n    }).render = {\n      fill: 'orange',\n      stroke: 'orange'\n    }; // ground slant\n\n    ground.createFixture(pl.Edge(Vec2(80.0, -30.0), Vec2(60.0, -25.0)), {\n      restitution: 0,\n      friction: 0\n    }).render = {\n      fill: 'orange',\n      stroke: 'orange'\n    }; // ground slant\n\n    ground.createFixture(pl.Edge(Vec2(60.0, -25.0), Vec2(50.0, -20.0)), {\n      restitution: 60,\n      friction: 0\n    }).render = {\n      fill: 'blue',\n      stroke: 'blue'\n    }; // ground slant\n    // ground.createFixture(pl.Edge(Vec2(100.0, -80.0), Vec2(200.0, -20.0)), { restitution: 60 }).render = { fill: 'blue', stroke: 'blue' };;\n    // ground.createFixture(pl.Circle(Vec2(100.0, -80.0), 10), { restitution: 60 }).render = {fill: 'blue', stroke: 'blue'}; // bouncy\n    // ground.createFixture(pl.Circle(Vec2(200.0, -40.0), 10), { restitution: 60 }).render = { fill: 'blue', stroke: 'blue' }; // bouncy\n    // ground.createFixture(pl.Box(50, 5, Vec2(150, -60), 60), {restitution: 60}).render = { fill: 'blue', stroke: 'blue' };\n    // .render = { fill: 'blue', stroke: 'blue' }; // bouncy\n\n    var ballBodyDef = {\n      position: Vec2(70, 10),\n      bullet: false,\n      allowSleep: true,\n      linearDamping: .01,\n      angularDamping: .5\n    };\n    var ballStartAttr = {\n      friction: .1,\n      restitution: .5,\n      // bounce\n      density: 10,\n      userData: 'ball'\n    };\n    var ballFinishAttr = {\n      friction: .2,\n      restitution: .1,\n      // bounce\n      density: 1,\n      userData: 'finish'\n    };\n    var ball1 = world.createDynamicBody(ballBodyDef);\n    world.destroyBody(ball1);\n\n    function generateShot() {\n      if (ball1.m_destroyed) {\n        ball1 = world.createDynamicBody(ballBodyDef);\n        ball1.createFixture(pl.Circle(1), ballStartAttr);\n        ball1.render = {\n          texture: img\n        };\n        var img = new Image();\n        img.src = \"https://upload.wikimedia.org/wikipedia/commons/2/27/Wey_source_farringdon.jpg\";\n      }\n    }\n\n    generateShot();\n    var ball3 = world.createDynamicBody(ballBodyDef);\n    ball3.setPosition(Vec2(30, 2));\n    ball3.createFixture(pl.Circle(1), ballStartAttr);\n    ball3.render = {\n      fill: 'blue',\n      stroke: 'blue'\n    };\n    var ball2 = world.createBody(Vec2(82, -22));\n    ball2.createFixture(pl.Circle(1), ballFinishAttr);\n    ball2.render = {\n      fill: 'red',\n      stroke: 'red'\n    };\n    window.pl = pl;\n    window.world = world;\n    console.log(\"white ball = ball1 \", ball1);\n    window.ball1 = ball1;\n    console.log(\"red ball = ball2 \", ball2);\n    window.ball2 = ball2;\n    console.log(\"blue ball = ball3 \", ball3);\n    window.ball3 = ball3;\n    var a = COUNT;\n    var box = planck_dist_planck_with_testbed__WEBPACK_IMPORTED_MODULE_0__.Box(a, a + a + a);\n    var x = Vec2(180.0, 8);\n    var y = Vec2();\n    var deltaX = Vec2(0, 4);\n    var deltaY = Vec2(0, 4);\n\n    for (var i = 0; i < COUNT; ++i) {\n      y.set(x);\n      world.createDynamicBody(y).createFixture(box, 5.0);\n      y.add(deltaY);\n      x.add(deltaX);\n    } // let spin = world.createDynamicBody(Vec2(0.0, 10.0));\n    // spin.createFixture(pl.Box(.5, 10.0), 20.0);\n    // let joint1 = world.createJoint(pl.RevoluteJoint({\n    //   motorSpeed: Math.PI,\n    //   maxMotorTorque: 20000.0,\n    //   enableMotor: true\n    // }, ground, spin, Vec2(0.0, 1.0)));\n\n\n    function keylistener() {\n      if (testbed.activeKeys.right) {\n        if (cameraLimitX(testbed.x)) {\n          testbed.x += 2;\n        } else {\n          testbed.x = ball1pos.x;\n        }\n      } else if (testbed.activeKeys.left) {\n        if (cameraLimitX(testbed.x)) {\n          testbed.x -= 2;\n        } else {\n          testbed.x = ball1pos.x;\n        }\n      } else if (testbed.activeKeys.up) {\n        if (cameraLimitY(testbed.y)) {\n          testbed.y -= 2;\n        } else {\n          testbed.y = ball1pos.y;\n        }\n      } else if (testbed.activeKeys.down) {\n        if (cameraLimitY(testbed.y)) {\n          testbed.y += 2;\n        } else {\n          testbed.y = ball1pos.y;\n        }\n      } else if (testbed.activeKeys.C) {\n        testbed.togglePause();\n      } else if (testbed.activeKeys.fire) {\n        generateShot();\n      }\n    }\n\n    var ball1pos = ball1.getPosition();\n\n    function cameraLimitX(xPos) {\n      if (testbed.x + testbed.width * .4 > ball1pos.x && testbed.x - testbed.width * .4 < ball1pos.x) {\n        return true;\n      } else {\n        return false;\n      }\n    }\n\n    function cameraLimitY(yPos) {\n      if (testbed.y + testbed.height * .4 > ball1pos.y && testbed.y - (testbed.height + canvas1.height) * .4 < ball1pos.y) {\n        return true;\n      } else {\n        return false;\n      }\n    }\n\n    function textOut() {\n      var scale = 20;\n      var ballpos = ball1.getPosition();\n      context2.clearRect(0, 0, canvas1.width, canvas1.height);\n      context2.font = \"\".concat(scale, \"px Courier New\");\n      context2.fillStyle = 'blue';\n      context2.fillText(\"X POS : \".concat(Math.round(ballpos.x)), 20, \"\".concat(scale));\n      context2.fillText(\"Y POS :\".concat(Math.round(ballpos.y)), 20, \"\".concat(scale * 2));\n      context2.fillText(\"testbed X POS : \".concat(Math.round(testbed.x)), 20, \"\".concat(scale * 3));\n      context2.fillText(\"testbed Y POS : \".concat(Math.round(testbed.y)), 20, \"\".concat(scale * 4));\n      context2.fillText(\"testbed Y height :\".concat(Math.round(testbed.height)), 20, \"\".concat(scale * 5));\n      context2.fillText(\"Pause : \".concat(testbed.isPaused()), 250, \"\".concat(scale));\n      context2.fillText(\"Shot destroyed : \".concat(ball1.m_destroyed), 250, \"\".concat(scale * 2));\n    }\n\n    function finishTouch() {\n      world.on('post-solve', function (contact) {\n        var fA = contact.getFixtureA(),\n            bA = fA.getBody();\n        var fB = contact.getFixtureB(),\n            bB = fB.getBody();\n        var throwBall = fA.getUserData() === \"ball\" ? bA : fB.getUserData() === \"ball\" ? bB : null;\n        var finishBall = fA.getUserData() === \"finish\" ? bA : fB.getUserData() === \"finish\" ? bB : null;\n        setTimeout(function () {\n          if (throwBall && finishBall) {\n            world.destroyBody(throwBall);\n          }\n        }, 1);\n      });\n    }\n\n    testbed.step = function () {\n      keylistener();\n      textOut();\n      finishTouch();\n    };\n\n    return world;\n  });\n} // export {level1};\n// export default;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/scripts/level3.js\n");

/***/ }),

/***/ "./src/scripts/level4.js":
/*!*******************************!*\
  !*** ./src/scripts/level4.js ***!
  \*******************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"level4\": function() { return /* binding */ level4; }\n/* harmony export */ });\n/* harmony import */ var planck_dist_planck_with_testbed__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! planck/dist/planck-with-testbed */ \"./node_modules/planck/dist/planck-with-testbed.js\");\n/* harmony import */ var planck_dist_planck_with_testbed__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(planck_dist_planck_with_testbed__WEBPACK_IMPORTED_MODULE_0__);\n//level1trial\n\nfunction level4() {\n  planck_dist_planck_with_testbed__WEBPACK_IMPORTED_MODULE_0__.testbed('Sandbox', function (testbed) {\n    // window.canvas = canvas\n    testbed.background = \"#111111\";\n    window.planck = planck_dist_planck_with_testbed__WEBPACK_IMPORTED_MODULE_0__;\n    window.testbed = testbed; //currently doesnt work\n\n    testbed.speed = 2;\n    testbed.width = innerWidth / 4;\n    testbed.height = innerHeight / 4;\n    testbed.hz = 30;\n    var pl = planck_dist_planck_with_testbed__WEBPACK_IMPORTED_MODULE_0__,\n        Vec2 = pl.Vec2;\n    var world = new pl.World(Vec2(0, -10));\n    var breakout1 = false;\n    window.breakout1 = breakout1; // testbed.mouseForce = 6000; \n    // turns on/off impulses to apply like slingshot\n\n    var COUNT = 1;\n    var ground = world.createBody();\n    ground.createFixture(pl.Edge(Vec2(-80.0, -80.0), Vec2(200.0, -80.0)), 0.0); // ground\n\n    ground.createFixture(pl.Edge(Vec2(200.0, 150.0), Vec2(200.0, -80.0)), 0.0); // right\n\n    ground.createFixture(pl.Edge(Vec2(-80.0, 150.0), Vec2(-80.0, -80.0)), 0.0); // left\n\n    ground.createFixture(pl.Edge(Vec2(-80.0, 150.0), Vec2(200.0, 150.0)), 0.0); // top\n\n    ground.createFixture(pl.Edge(Vec2(-80.0, 40.0), Vec2(150.0, 40.0)), {\n      friction: 0\n    }).render = {\n      fill: 'orange',\n      stroke: 'orange'\n    }; // ground\n\n    ground.createFixture(pl.Edge(Vec2(-60.0, 5.0), Vec2(185.0, 5.0)), {\n      restitution: 0,\n      friction: 0\n    }).render = {\n      fill: 'orange',\n      stroke: 'orange'\n    }; // ground slant\n\n    ground.createFixture(pl.Edge(Vec2(160.0, -15.0), Vec2(200.0, 0.0)), {\n      restitution: 0,\n      friction: 0\n    }).render = {\n      fill: 'orange',\n      stroke: 'orange'\n    }; // ground slant\n\n    ground.createFixture(pl.Edge(Vec2(-80.0, -70.0), Vec2(200.0, -70.0)), {\n      friction: 1\n    }); // ground slide\n\n    ground.createFixture(pl.Edge(Vec2(-80.0, -60.0), Vec2(-75.0, -70.0)), {\n      restitution: 60\n    }).render = {\n      fill: 'blue',\n      stroke: 'blue'\n    }; // ground slide\n    // ground.createFixture(pl.Edge(Vec2(100.0, -80.0), Vec2(200.0, -20.0)), { restitution: 60 }).render = { fill: 'blue', stroke: 'blue' };;\n    // ground.createFixture(pl.Circle(Vec2(100.0, -80.0), 10), { restitution: 60 }).render = {fill: 'blue', stroke: 'blue'}; // bouncy\n    // ground.createFixture(pl.Circle(Vec2(200.0, -40.0), 10), { restitution: 60 }).render = { fill: 'blue', stroke: 'blue' }; // bouncy\n    // ground.createFixture(pl.Box(50, 5, Vec2(150, -60), 60), {restitution: 60}).render = { fill: 'blue', stroke: 'blue' };\n    // .render = { fill: 'blue', stroke: 'blue' }; // bouncy\n\n    var ballBodyDef = {\n      position: Vec2(70, 30),\n      bullet: false,\n      allowSleep: true,\n      linearDamping: .01,\n      angularDamping: .5\n    };\n    var ballStartAttr = {\n      friction: .1,\n      restitution: .5,\n      // bounce\n      density: 10,\n      userData: 'ball'\n    };\n    var ballFinishAttr = {\n      friction: .2,\n      restitution: .1,\n      // bounce\n      density: 1,\n      userData: 'finish'\n    };\n    var ball1 = world.createDynamicBody(ballBodyDef);\n    world.destroyBody(ball1);\n\n    function generateShot() {\n      if (ball1.m_destroyed) {\n        ball1 = world.createDynamicBody(ballBodyDef);\n        ball1.createFixture(pl.Circle(1), ballStartAttr);\n        ball1.render = {\n          fill: \"white\"\n        }; // const img = new Image()\n        // img.src = \"https://upload.wikimedia.org/wikipedia/commons/2/27/Wey_source_farringdon.jpg\"\n      }\n    }\n\n    generateShot();\n    var ball3 = world.createDynamicBody(ballBodyDef);\n    ball3.setPosition(Vec2(30, 40));\n    ball3.createFixture(pl.Circle(1), ballStartAttr);\n    ball3.render = {\n      fill: 'blue',\n      stroke: 'blue'\n    };\n    var ball2 = world.createBody(Vec2(130, -40));\n    ball2.createFixture(pl.Circle(1), ballFinishAttr);\n    ball2.render = {\n      fill: 'red',\n      stroke: 'red'\n    };\n    window.pl = pl;\n    window.world = world;\n    console.log(\"white ball = ball1 \", ball1);\n    window.ball1 = ball1;\n    console.log(\"red ball = ball2 \", ball2);\n    window.ball2 = ball2;\n    console.log(\"blue ball = ball3 \", ball3);\n    window.ball3 = ball3;\n    var a = COUNT;\n    var box = planck_dist_planck_with_testbed__WEBPACK_IMPORTED_MODULE_0__.Box(a, a * 9, x, 0);\n    var x = Vec2(160.0, 8);\n    var y = Vec2();\n    var deltaX = Vec2(0, 4);\n    var deltaY = Vec2(0, 4);\n\n    for (var i = 0; i < COUNT; ++i) {\n      y.set(x);\n      world.createDynamicBody(y).createFixture(box, 5.0);\n      y.add(deltaY);\n      x.add(deltaX);\n    }\n\n    function keylistener() {\n      //there is probably a way to do this with a case statement\n      //camera\n      if (testbed.activeKeys.right) {\n        if (cameraLimitX(testbed.x)) {\n          testbed.x += 2;\n        } else {\n          testbed.x = ball1pos.x;\n        }\n      } else if (testbed.activeKeys.left) {\n        if (cameraLimitX(testbed.x)) {\n          testbed.x -= 2;\n        } else {\n          testbed.x = ball1pos.x;\n        }\n      } else if (testbed.activeKeys.up) {\n        if (cameraLimitY(testbed.y)) {\n          testbed.y -= 2;\n        } else {\n          testbed.y = ball1pos.y;\n        }\n      } else if (testbed.activeKeys.down) {\n        if (cameraLimitY(testbed.y)) {\n          testbed.y += 2;\n        } else {\n          testbed.y = ball1pos.y;\n        }\n      } else if (testbed.activeKeys.C) {\n        testbed.togglePause();\n      } else if (testbed.activeKeys.fire) {\n        generateShot();\n      } else if (testbed.activeKeys.z) {\n        testbed.status('←/→: Accelerate car, ↑/↓: Change spring frequency');\n      }\n    }\n\n    var ball1pos = ball1.getPosition();\n\n    function cameraLimitX(xPos) {\n      if (testbed.x + testbed.width * .4 > ball1pos.x && testbed.x - testbed.width * .4 < ball1pos.x) {\n        return true;\n      } else {\n        return false;\n      }\n    }\n\n    function cameraLimitY(yPos) {\n      if (testbed.y + testbed.height * .4 > ball1pos.y && testbed.y - (testbed.height + canvas1.height) * .4 < ball1pos.y) {\n        return true;\n      } else {\n        return false;\n      }\n    }\n\n    function textOut() {\n      var scale = 20;\n      var ballpos = ball1.getPosition();\n      context2.clearRect(0, 0, canvas1.width, canvas1.height);\n      context2.font = \"\".concat(scale, \"px Courier New\");\n      context2.fillStyle = 'blue';\n      context2.fillText(\"X POS : \".concat(Math.round(ballpos.x)), 20, \"\".concat(scale));\n      context2.fillText(\"Y POS :\".concat(Math.round(ballpos.y)), 20, \"\".concat(scale * 2));\n      context2.fillText(\"testbed X POS : \".concat(Math.round(testbed.x)), 20, \"\".concat(scale * 3));\n      context2.fillText(\"testbed Y POS : \".concat(Math.round(testbed.y)), 20, \"\".concat(scale * 4));\n      context2.fillText(\"testbed Y height :\".concat(Math.round(testbed.height)), 20, \"\".concat(scale * 5));\n      context2.fillText(\"Pause : \".concat(testbed.isPaused()), 250, \"\".concat(scale));\n      context2.fillText(\"Shot destroyed : \".concat(ball1.m_destroyed), 250, \"\".concat(scale * 2));\n    }\n\n    function finishTouch() {\n      world.on('post-solve', function (contact) {\n        var fA = contact.getFixtureA(),\n            bA = fA.getBody();\n        var fB = contact.getFixtureB(),\n            bB = fB.getBody();\n        var throwBall = fA.getUserData() === \"ball\" ? bA : fB.getUserData() === \"ball\" ? bB : null;\n        var finishBall = fA.getUserData() === \"finish\" ? bA : fB.getUserData() === \"finish\" ? bB : null;\n        setTimeout(function () {\n          if (throwBall && finishBall) {\n            world.destroyBody(throwBall);\n          }\n        }, 1);\n      });\n    }\n\n    testbed.step = function () {\n      keylistener();\n      textOut();\n      finishTouch();\n    };\n\n    return world;\n  });\n} // export {level1};\n// export default;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/scripts/level4.js\n");

/***/ }),

/***/ "./src/index.scss":
/*!************************!*\
  !*** ./src/index.scss ***!
  \************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n// extracted by mini-css-extract-plugin\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9zcmMvaW5kZXguc2Nzcy5qcyIsIm1hcHBpbmdzIjoiO0FBQUEiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly90ZXN0LXJlcG8vLi9zcmMvaW5kZXguc2Nzcz85NzQ1Il0sInNvdXJjZXNDb250ZW50IjpbIi8vIGV4dHJhY3RlZCBieSBtaW5pLWNzcy1leHRyYWN0LXBsdWdpblxuZXhwb3J0IHt9OyJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./src/index.scss\n");

/***/ }),

/***/ "./node_modules/planck/dist/planck-with-testbed.js":
/*!*********************************************************!*\
  !*** ./node_modules/planck/dist/planck-with-testbed.js ***!
  \*********************************************************/
/***/ (function(__unused_webpack_module, exports) {

eval("/**\n * Planck.js v1.0.0-alpha.4\n * @license The MIT license\n * @copyright Copyright (c) 2021 Erin Catto, Ali Shakiba\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in all\n * copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n\n(function (global, factory) {\n     true ? factory(exports) :\n    0;\n}(this, (function (exports) { 'use strict';\n\n    /*! *****************************************************************************\r\n    Copyright (c) Microsoft Corporation.\r\n\r\n    Permission to use, copy, modify, and/or distribute this software for any\r\n    purpose with or without fee is hereby granted.\r\n\r\n    THE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH\r\n    REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY\r\n    AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,\r\n    INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM\r\n    LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR\r\n    OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR\r\n    PERFORMANCE OF THIS SOFTWARE.\r\n    ***************************************************************************** */\r\n    /* global Reflect, Promise */\r\n\r\n    var extendStatics = function(d, b) {\r\n        extendStatics = Object.setPrototypeOf ||\r\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };\r\n        return extendStatics(d, b);\r\n    };\r\n\r\n    function __extends(d, b) {\r\n        if (typeof b !== \"function\" && b !== null)\r\n            throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\r\n        extendStatics(d, b);\r\n        function __() { this.constructor = d; }\r\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n    }\r\n\r\n    var __assign = function() {\r\n        __assign = Object.assign || function __assign(t) {\r\n            for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n                s = arguments[i];\r\n                for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n            }\r\n            return t;\r\n        };\r\n        return __assign.apply(this, arguments);\r\n    };\n\n    function options (input, defaults) {\n        if (input === null || typeof input === 'undefined') {\n            // tslint:disable-next-line:no-object-literal-type-assertion\n            input = {};\n        }\n        var output = __assign({}, input);\n        // tslint:disable-next-line:no-for-in\n        for (var key in defaults) {\n            if (defaults.hasOwnProperty(key) && typeof input[key] === 'undefined') {\n                output[key] = defaults[key];\n            }\n        }\n        if (typeof Object.getOwnPropertySymbols === 'function') {\n            var symbols = Object.getOwnPropertySymbols(defaults);\n            for (var i = 0; i < symbols.length; i++) {\n                var symbol = symbols[i];\n                if (defaults.propertyIsEnumerable(symbol) && typeof input[symbol] === 'undefined') {\n                    output[symbol] = defaults[symbol];\n                }\n            }\n        }\n        return output;\n    }\n\n    var debug = function () {\n        var rest = [];\n        for (var _i = 0; _i < arguments.length; _i++) {\n            rest[_i] = arguments[_i];\n        }\n        return;\n    };\n    var assert = function (statement, err, log) {\n        return;\n    };\n    var common = {\n        assert: assert,\n        debug: debug,\n    };\n\n    /*\n     * Planck.js\n     * The MIT License\n     * Copyright (c) 2021 Erin Catto, Ali Shakiba\n     *\n     * Permission is hereby granted, free of charge, to any person obtaining a copy\n     * of this software and associated documentation files (the \"Software\"), to deal\n     * in the Software without restriction, including without limitation the rights\n     * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n     * copies of the Software, and to permit persons to whom the Software is\n     * furnished to do so, subject to the following conditions:\n     *\n     * The above copyright notice and this permission notice shall be included in all\n     * copies or substantial portions of the Software.\n     *\n     * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n     * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n     * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n     * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n     * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n     * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n     * SOFTWARE.\n     */\n    var math$1 = Object.create(Math);\n    // @ts-ignore\n    // noinspection JSConstantReassignment\n    math$1.EPSILON = 1e-9; // TODO\n    math$1.isFinite = function (x) {\n        return (typeof x === 'number') && isFinite(x) && !isNaN(x);\n    };\n    math$1.assert = function (x) {\n        return;\n    };\n    math$1.invSqrt = function (x) {\n        // TODO:\n        return 1 / Math.sqrt(x);\n    };\n    math$1.nextPowerOfTwo = function (x) {\n        // TODO\n        x |= (x >> 1);\n        x |= (x >> 2);\n        x |= (x >> 4);\n        x |= (x >> 8);\n        x |= (x >> 16);\n        return x + 1;\n    };\n    math$1.isPowerOfTwo = function (x) {\n        return x > 0 && (x & (x - 1)) === 0;\n    };\n    math$1.mod = function (num, min, max) {\n        if (typeof min === 'undefined') {\n            max = 1;\n            min = 0;\n        }\n        else if (typeof max === 'undefined') {\n            max = min;\n            min = 0;\n        }\n        if (max > min) {\n            num = (num - min) % (max - min);\n            return num + (num < 0 ? max : min);\n        }\n        else {\n            num = (num - max) % (min - max);\n            return num + (num <= 0 ? min : max);\n        }\n    };\n    math$1.clamp = function (num, min, max) {\n        if (num < min) {\n            return min;\n        }\n        else if (num > max) {\n            return max;\n        }\n        else {\n            return num;\n        }\n    };\n    math$1.random = function (min, max) {\n        if (typeof min === 'undefined') {\n            max = 1;\n            min = 0;\n        }\n        else if (typeof max === 'undefined') {\n            max = min;\n            min = 0;\n        }\n        return min === max ? min : Math.random() * (max - min) + min;\n    };\n\n    /*\n     * Planck.js\n     * The MIT License\n     * Copyright (c) 2021 Erin Catto, Ali Shakiba\n     *\n     * Permission is hereby granted, free of charge, to any person obtaining a copy\n     * of this software and associated documentation files (the \"Software\"), to deal\n     * in the Software without restriction, including without limitation the rights\n     * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n     * copies of the Software, and to permit persons to whom the Software is\n     * furnished to do so, subject to the following conditions:\n     *\n     * The above copyright notice and this permission notice shall be included in all\n     * copies or substantial portions of the Software.\n     *\n     * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n     * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n     * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n     * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n     * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n     * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n     * SOFTWARE.\n     */\n    var Vec2 = /** @class */ (function () {\n        // tslint:disable-next-line:typedef\n        function Vec2(x, y) {\n            if (!(this instanceof Vec2)) {\n                return new Vec2(x, y);\n            }\n            if (typeof x === 'undefined') {\n                this.x = 0;\n                this.y = 0;\n            }\n            else if (typeof x === 'object') {\n                this.x = x.x;\n                this.y = x.y;\n            }\n            else {\n                this.x = x;\n                this.y = y;\n            }\n        }\n        /** @internal */\n        Vec2.prototype._serialize = function () {\n            return {\n                x: this.x,\n                y: this.y\n            };\n        };\n        /** @internal */\n        Vec2._deserialize = function (data) {\n            var obj = Object.create(Vec2.prototype);\n            obj.x = data.x;\n            obj.y = data.y;\n            return obj;\n        };\n        Vec2.zero = function () {\n            var obj = Object.create(Vec2.prototype);\n            obj.x = 0;\n            obj.y = 0;\n            return obj;\n        };\n        /** @internal */\n        Vec2.neo = function (x, y) {\n            var obj = Object.create(Vec2.prototype);\n            obj.x = x;\n            obj.y = y;\n            return obj;\n        };\n        Vec2.clone = function (v) {\n            return Vec2.neo(v.x, v.y);\n        };\n        /** @internal */\n        Vec2.prototype.toString = function () {\n            return JSON.stringify(this);\n        };\n        /**\n         * Does this vector contain finite coordinates?\n         */\n        Vec2.isValid = function (obj) {\n            if (obj === null || typeof obj === 'undefined') {\n                return false;\n            }\n            return math$1.isFinite(obj.x) && math$1.isFinite(obj.y);\n        };\n        Vec2.assert = function (o) {\n            return;\n        };\n        Vec2.prototype.clone = function () {\n            return Vec2.clone(this);\n        };\n        /**\n         * Set this vector to all zeros.\n         *\n         * @returns this\n         */\n        Vec2.prototype.setZero = function () {\n            this.x = 0.0;\n            this.y = 0.0;\n            return this;\n        };\n        /**\n         * Set this vector to some specified coordinates.\n         *\n         * @returns this\n         */\n        // tslint:disable-next-line:typedef\n        Vec2.prototype.set = function (x, y) {\n            if (typeof x === 'object') {\n                this.x = x.x;\n                this.y = x.y;\n            }\n            else {\n                this.x = x;\n                this.y = y;\n            }\n            return this;\n        };\n        /**\n         * Set this vector to some specified coordinates.\n         *\n         * @returns this\n         */\n        Vec2.prototype.setNum = function (x, y) {\n            this.x = x;\n            this.y = y;\n            return this;\n        };\n        /**\n         * Set this vector to some specified coordinates.\n         *\n         * @returns this\n         */\n        Vec2.prototype.setVec2 = function (value) {\n            this.x = value.x;\n            this.y = value.y;\n            return this;\n        };\n        /**\n         * @internal\n         * @deprecated Use setCombine or setMul\n         */\n        Vec2.prototype.wSet = function (a, v, b, w) {\n            if (typeof b !== 'undefined' || typeof w !== 'undefined') {\n                return this.setCombine(a, v, b, w);\n            }\n            else {\n                return this.setMul(a, v);\n            }\n        };\n        /**\n         * Set linear combination of v and w: `a * v + b * w`\n         */\n        Vec2.prototype.setCombine = function (a, v, b, w) {\n            var x = a * v.x + b * w.x;\n            var y = a * v.y + b * w.y;\n            // `this` may be `w`\n            this.x = x;\n            this.y = y;\n            return this;\n        };\n        Vec2.prototype.setMul = function (a, v) {\n            var x = a * v.x;\n            var y = a * v.y;\n            this.x = x;\n            this.y = y;\n            return this;\n        };\n        /**\n         * Add a vector to this vector.\n         *\n         * @returns this\n         */\n        Vec2.prototype.add = function (w) {\n            this.x += w.x;\n            this.y += w.y;\n            return this;\n        };\n        /**\n         * @internal\n         * @deprecated Use addCombine or addMul\n         */\n        Vec2.prototype.wAdd = function (a, v, b, w) {\n            if (typeof b !== 'undefined' || typeof w !== 'undefined') {\n                return this.addCombine(a, v, b, w);\n            }\n            else {\n                return this.addMul(a, v);\n            }\n        };\n        /**\n         * Add linear combination of v and w: `a * v + b * w`\n         */\n        Vec2.prototype.addCombine = function (a, v, b, w) {\n            var x = a * v.x + b * w.x;\n            var y = a * v.y + b * w.y;\n            // `this` may be `w`\n            this.x += x;\n            this.y += y;\n            return this;\n        };\n        Vec2.prototype.addMul = function (a, v) {\n            var x = a * v.x;\n            var y = a * v.y;\n            this.x += x;\n            this.y += y;\n            return this;\n        };\n        /**\n         * @deprecated Use subCombine or subMul\n         */\n        Vec2.prototype.wSub = function (a, v, b, w) {\n            if (typeof b !== 'undefined' || typeof w !== 'undefined') {\n                return this.subCombine(a, v, b, w);\n            }\n            else {\n                return this.subMul(a, v);\n            }\n        };\n        /**\n         * Subtract linear combination of v and w: `a * v + b * w`\n         */\n        Vec2.prototype.subCombine = function (a, v, b, w) {\n            var x = a * v.x + b * w.x;\n            var y = a * v.y + b * w.y;\n            // `this` may be `w`\n            this.x -= x;\n            this.y -= y;\n            return this;\n        };\n        Vec2.prototype.subMul = function (a, v) {\n            var x = a * v.x;\n            var y = a * v.y;\n            this.x -= x;\n            this.y -= y;\n            return this;\n        };\n        /**\n         * Subtract a vector from this vector\n         *\n         * @returns this\n         */\n        Vec2.prototype.sub = function (w) {\n            this.x -= w.x;\n            this.y -= w.y;\n            return this;\n        };\n        /**\n         * Multiply this vector by a scalar.\n         *\n         * @returns this\n         */\n        Vec2.prototype.mul = function (m) {\n            this.x *= m;\n            this.y *= m;\n            return this;\n        };\n        /**\n         * Get the length of this vector (the norm).\n         *\n         * For performance, use this instead of lengthSquared (if possible).\n         */\n        Vec2.prototype.length = function () {\n            return Vec2.lengthOf(this);\n        };\n        /**\n         * Get the length squared.\n         */\n        Vec2.prototype.lengthSquared = function () {\n            return Vec2.lengthSquared(this);\n        };\n        /**\n         * Convert this vector into a unit vector.\n         *\n         * @returns old length\n         */\n        Vec2.prototype.normalize = function () {\n            var length = this.length();\n            if (length < math$1.EPSILON) {\n                return 0.0;\n            }\n            var invLength = 1.0 / length;\n            this.x *= invLength;\n            this.y *= invLength;\n            return length;\n        };\n        /**\n         * Get the length of this vector (the norm).\n         *\n         * For performance, use this instead of lengthSquared (if possible).\n         */\n        Vec2.lengthOf = function (v) {\n            return math$1.sqrt(v.x * v.x + v.y * v.y);\n        };\n        /**\n         * Get the length squared.\n         */\n        Vec2.lengthSquared = function (v) {\n            return v.x * v.x + v.y * v.y;\n        };\n        Vec2.distance = function (v, w) {\n            var dx = v.x - w.x;\n            var dy = v.y - w.y;\n            return math$1.sqrt(dx * dx + dy * dy);\n        };\n        Vec2.distanceSquared = function (v, w) {\n            var dx = v.x - w.x;\n            var dy = v.y - w.y;\n            return dx * dx + dy * dy;\n        };\n        Vec2.areEqual = function (v, w) {\n            return v === w || typeof w === 'object' && w !== null && v.x === w.x && v.y === w.y;\n        };\n        /**\n         * Get the skew vector such that dot(skew_vec, other) == cross(vec, other)\n         */\n        Vec2.skew = function (v) {\n            return Vec2.neo(-v.y, v.x);\n        };\n        /**\n         * Perform the dot product on two vectors.\n         */\n        Vec2.dot = function (v, w) {\n            return v.x * w.x + v.y * w.y;\n        };\n        /**\n         * Perform the cross product on two vectors. In 2D this produces a scalar.\n         *\n         * Perform the cross product on a vector and a scalar. In 2D this produces a\n         * vector.\n         */\n        // tslint:disable-next-line:typedef\n        Vec2.cross = function (v, w) {\n            if (typeof w === 'number') {\n                return Vec2.neo(w * v.y, -w * v.x);\n            }\n            else if (typeof v === 'number') {\n                return Vec2.neo(-v * w.y, v * w.x);\n            }\n            else {\n                return v.x * w.y - v.y * w.x;\n            }\n        };\n        /**\n         * Perform the cross product on two vectors. In 2D this produces a scalar.\n         */\n        Vec2.crossVec2Vec2 = function (v, w) {\n            return v.x * w.y - v.y * w.x;\n        };\n        /**\n         * Perform the cross product on a vector and a scalar. In 2D this produces a\n         * vector.\n         */\n        Vec2.crossVec2Num = function (v, w) {\n            return Vec2.neo(w * v.y, -w * v.x);\n        };\n        /**\n         * Perform the cross product on a vector and a scalar. In 2D this produces a\n         * vector.\n         */\n        Vec2.crossNumVec2 = function (v, w) {\n            return Vec2.neo(-v * w.y, v * w.x);\n        };\n        /**\n         * Returns `a + (v x w)`\n         */\n        // tslint:disable-next-line:typedef\n        Vec2.addCross = function (a, v, w) {\n            if (typeof w === 'number') {\n                return Vec2.neo(w * v.y + a.x, -w * v.x + a.y);\n            }\n            else if (typeof v === 'number') {\n                return Vec2.neo(-v * w.y + a.x, v * w.x + a.y);\n            }\n        };\n        /**\n         * Returns `a + (v x w)`\n         */\n        Vec2.addCrossVec2Num = function (a, v, w) {\n            return Vec2.neo(w * v.y + a.x, -w * v.x + a.y);\n        };\n        /**\n         * Returns `a + (v x w)`\n         */\n        Vec2.addCrossNumVec2 = function (a, v, w) {\n            return Vec2.neo(-v * w.y + a.x, v * w.x + a.y);\n        };\n        Vec2.add = function (v, w) {\n            return Vec2.neo(v.x + w.x, v.y + w.y);\n        };\n        /** @internal @deprecated */\n        Vec2.wAdd = function (a, v, b, w) {\n            if (typeof b !== 'undefined' || typeof w !== 'undefined') {\n                return Vec2.combine(a, v, b, w);\n            }\n            else {\n                return Vec2.mulNumVec2(a, v);\n            }\n        };\n        Vec2.combine = function (a, v, b, w) {\n            return Vec2.zero().setCombine(a, v, b, w);\n        };\n        Vec2.sub = function (v, w) {\n            return Vec2.neo(v.x - w.x, v.y - w.y);\n        };\n        // tslint:disable-next-line:typedef\n        Vec2.mul = function (a, b) {\n            if (typeof a === 'object') {\n                return Vec2.neo(a.x * b, a.y * b);\n            }\n            else if (typeof b === 'object') {\n                return Vec2.neo(a * b.x, a * b.y);\n            }\n        };\n        Vec2.mulVec2Num = function (a, b) {\n            return Vec2.neo(a.x * b, a.y * b);\n        };\n        Vec2.mulNumVec2 = function (a, b) {\n            return Vec2.neo(a * b.x, a * b.y);\n        };\n        Vec2.prototype.neg = function () {\n            this.x = -this.x;\n            this.y = -this.y;\n            return this;\n        };\n        Vec2.neg = function (v) {\n            return Vec2.neo(-v.x, -v.y);\n        };\n        Vec2.abs = function (v) {\n            return Vec2.neo(math$1.abs(v.x), math$1.abs(v.y));\n        };\n        Vec2.mid = function (v, w) {\n            return Vec2.neo((v.x + w.x) * 0.5, (v.y + w.y) * 0.5);\n        };\n        Vec2.upper = function (v, w) {\n            return Vec2.neo(math$1.max(v.x, w.x), math$1.max(v.y, w.y));\n        };\n        Vec2.lower = function (v, w) {\n            return Vec2.neo(math$1.min(v.x, w.x), math$1.min(v.y, w.y));\n        };\n        Vec2.prototype.clamp = function (max) {\n            var lengthSqr = this.x * this.x + this.y * this.y;\n            if (lengthSqr > max * max) {\n                var invLength = math$1.invSqrt(lengthSqr);\n                this.x *= invLength * max;\n                this.y *= invLength * max;\n            }\n            return this;\n        };\n        Vec2.clamp = function (v, max) {\n            v = Vec2.neo(v.x, v.y);\n            v.clamp(max);\n            return v;\n        };\n        /**  @internal @deprecated */\n        // tslint:disable-next-line:typedef\n        Vec2.scaleFn = function (x, y) {\n            return function (v) {\n                return Vec2.neo(v.x * x, v.y * y);\n            };\n        };\n        /**  @internal @deprecated */\n        // tslint:disable-next-line:typedef\n        Vec2.translateFn = function (x, y) {\n            return function (v) {\n                return Vec2.neo(v.x + x, v.y + y);\n            };\n        };\n        return Vec2;\n    }());\n\n    /*\n     * Planck.js\n     * The MIT License\n     * Copyright (c) 2021 Erin Catto, Ali Shakiba\n     *\n     * Permission is hereby granted, free of charge, to any person obtaining a copy\n     * of this software and associated documentation files (the \"Software\"), to deal\n     * in the Software without restriction, including without limitation the rights\n     * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n     * copies of the Software, and to permit persons to whom the Software is\n     * furnished to do so, subject to the following conditions:\n     *\n     * The above copyright notice and this permission notice shall be included in all\n     * copies or substantial portions of the Software.\n     *\n     * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n     * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n     * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n     * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n     * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n     * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n     * SOFTWARE.\n     */\n    var AABB = /** @class */ (function () {\n        function AABB(lower, upper) {\n            if (!(this instanceof AABB)) {\n                return new AABB(lower, upper);\n            }\n            this.lowerBound = Vec2.zero();\n            this.upperBound = Vec2.zero();\n            if (typeof lower === 'object') {\n                this.lowerBound.setVec2(lower);\n            }\n            if (typeof upper === 'object') {\n                this.upperBound.setVec2(upper);\n            }\n            else if (typeof lower === 'object') {\n                this.upperBound.setVec2(lower);\n            }\n        }\n        /**\n         * Verify that the bounds are sorted.\n         */\n        AABB.prototype.isValid = function () {\n            return AABB.isValid(this);\n        };\n        AABB.isValid = function (obj) {\n            if (obj === null || typeof obj === 'undefined') {\n                return false;\n            }\n            return Vec2.isValid(obj.lowerBound) && Vec2.isValid(obj.upperBound) && Vec2.sub(obj.upperBound, obj.lowerBound).lengthSquared() >= 0;\n        };\n        AABB.assert = function (o) {\n            return;\n        };\n        /**\n         * Get the center of the AABB.\n         */\n        AABB.prototype.getCenter = function () {\n            return Vec2.neo((this.lowerBound.x + this.upperBound.x) * 0.5, (this.lowerBound.y + this.upperBound.y) * 0.5);\n        };\n        /**\n         * Get the extents of the AABB (half-widths).\n         */\n        AABB.prototype.getExtents = function () {\n            return Vec2.neo((this.upperBound.x - this.lowerBound.x) * 0.5, (this.upperBound.y - this.lowerBound.y) * 0.5);\n        };\n        /**\n         * Get the perimeter length.\n         */\n        AABB.prototype.getPerimeter = function () {\n            return 2.0 * (this.upperBound.x - this.lowerBound.x + this.upperBound.y - this.lowerBound.y);\n        };\n        /**\n         * Combine one or two AABB into this one.\n         */\n        AABB.prototype.combine = function (a, b) {\n            b = b || this;\n            var lowerA = a.lowerBound;\n            var upperA = a.upperBound;\n            var lowerB = b.lowerBound;\n            var upperB = b.upperBound;\n            var lowerX = math$1.min(lowerA.x, lowerB.x);\n            var lowerY = math$1.min(lowerA.y, lowerB.y);\n            var upperX = math$1.max(upperB.x, upperA.x);\n            var upperY = math$1.max(upperB.y, upperA.y);\n            this.lowerBound.setNum(lowerX, lowerY);\n            this.upperBound.setNum(upperX, upperY);\n        };\n        AABB.prototype.combinePoints = function (a, b) {\n            this.lowerBound.setNum(math$1.min(a.x, b.x), math$1.min(a.y, b.y));\n            this.upperBound.setNum(math$1.max(a.x, b.x), math$1.max(a.y, b.y));\n        };\n        AABB.prototype.set = function (aabb) {\n            this.lowerBound.setNum(aabb.lowerBound.x, aabb.lowerBound.y);\n            this.upperBound.setNum(aabb.upperBound.x, aabb.upperBound.y);\n        };\n        AABB.prototype.contains = function (aabb) {\n            var result = true;\n            result = result && this.lowerBound.x <= aabb.lowerBound.x;\n            result = result && this.lowerBound.y <= aabb.lowerBound.y;\n            result = result && aabb.upperBound.x <= this.upperBound.x;\n            result = result && aabb.upperBound.y <= this.upperBound.y;\n            return result;\n        };\n        AABB.prototype.extend = function (value) {\n            AABB.extend(this, value);\n            return this;\n        };\n        AABB.extend = function (aabb, value) {\n            aabb.lowerBound.x -= value;\n            aabb.lowerBound.y -= value;\n            aabb.upperBound.x += value;\n            aabb.upperBound.y += value;\n        };\n        AABB.testOverlap = function (a, b) {\n            var d1x = b.lowerBound.x - a.upperBound.x;\n            var d2x = a.lowerBound.x - b.upperBound.x;\n            var d1y = b.lowerBound.y - a.upperBound.y;\n            var d2y = a.lowerBound.y - b.upperBound.y;\n            if (d1x > 0 || d1y > 0 || d2x > 0 || d2y > 0) {\n                return false;\n            }\n            return true;\n        };\n        AABB.areEqual = function (a, b) {\n            return Vec2.areEqual(a.lowerBound, b.lowerBound) && Vec2.areEqual(a.upperBound, b.upperBound);\n        };\n        AABB.diff = function (a, b) {\n            var wD = math$1.max(0, math$1.min(a.upperBound.x, b.upperBound.x) - math$1.max(b.lowerBound.x, a.lowerBound.x));\n            var hD = math$1.max(0, math$1.min(a.upperBound.y, b.upperBound.y) - math$1.max(b.lowerBound.y, a.lowerBound.y));\n            var wA = a.upperBound.x - a.lowerBound.x;\n            var hA = a.upperBound.y - a.lowerBound.y;\n            var wB = b.upperBound.x - b.lowerBound.x;\n            var hB = b.upperBound.y - b.lowerBound.y;\n            return wA * hA + wB * hB - wD * hD;\n        };\n        AABB.prototype.rayCast = function (output, input) {\n            // From Real-time Collision Detection, p179.\n            var tmin = -Infinity;\n            var tmax = Infinity;\n            var p = input.p1;\n            var d = Vec2.sub(input.p2, input.p1);\n            var absD = Vec2.abs(d);\n            var normal = Vec2.zero();\n            for (var f = 'x'; f !== null; f = (f === 'x' ? 'y' : null)) {\n                if (absD.x < math$1.EPSILON) {\n                    // Parallel.\n                    if (p[f] < this.lowerBound[f] || this.upperBound[f] < p[f]) {\n                        return false;\n                    }\n                }\n                else {\n                    var inv_d = 1.0 / d[f];\n                    var t1 = (this.lowerBound[f] - p[f]) * inv_d;\n                    var t2 = (this.upperBound[f] - p[f]) * inv_d;\n                    // Sign of the normal vector.\n                    var s = -1.0;\n                    if (t1 > t2) {\n                        var temp = t1;\n                        t1 = t2;\n                        t2 = temp;\n                        s = 1.0;\n                    }\n                    // Push the min up\n                    if (t1 > tmin) {\n                        normal.setZero();\n                        normal[f] = s;\n                        tmin = t1;\n                    }\n                    // Pull the max down\n                    tmax = math$1.min(tmax, t2);\n                    if (tmin > tmax) {\n                        return false;\n                    }\n                }\n            }\n            // Does the ray start inside the box?\n            // Does the ray intersect beyond the max fraction?\n            if (tmin < 0.0 || input.maxFraction < tmin) {\n                return false;\n            }\n            // Intersection.\n            output.fraction = tmin;\n            output.normal = normal;\n            return true;\n        };\n        /** @internal */\n        AABB.prototype.toString = function () {\n            return JSON.stringify(this);\n        };\n        return AABB;\n    }());\n\n    /*\n     * Planck.js\n     * The MIT License\n     * Copyright (c) 2021 Erin Catto, Ali Shakiba\n     *\n     * Permission is hereby granted, free of charge, to any person obtaining a copy\n     * of this software and associated documentation files (the \"Software\"), to deal\n     * in the Software without restriction, including without limitation the rights\n     * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n     * copies of the Software, and to permit persons to whom the Software is\n     * furnished to do so, subject to the following conditions:\n     *\n     * The above copyright notice and this permission notice shall be included in all\n     * copies or substantial portions of the Software.\n     *\n     * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n     * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n     * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n     * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n     * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n     * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n     * SOFTWARE.\n     */\n    // TODO merge with World options?\n    /**\n     * Tuning constants based on meters-kilograms-seconds (MKS) units.\n     */\n    // tslint:disable-next-line:no-unnecessary-class\n    var Settings = /** @class */ (function () {\n        function Settings() {\n        }\n        Object.defineProperty(Settings, \"linearSlopSquared\", {\n            get: function () { return Settings.linearSlop * Settings.linearSlop; },\n            enumerable: false,\n            configurable: true\n        });\n        Object.defineProperty(Settings, \"polygonRadius\", {\n            /**\n             * The radius of the polygon/edge shape skin. This should not be modified.\n             * Making this smaller means polygons will have an insufficient buffer for\n             * continuous collision. Making it larger may create artifacts for vertex\n             * collision.\n             */\n            get: function () { return 2.0 * Settings.linearSlop; },\n            enumerable: false,\n            configurable: true\n        });\n        Object.defineProperty(Settings, \"maxTranslationSquared\", {\n            get: function () { return Settings.maxTranslation * Settings.maxTranslation; },\n            enumerable: false,\n            configurable: true\n        });\n        Object.defineProperty(Settings, \"maxRotationSquared\", {\n            get: function () { return Settings.maxRotation * Settings.maxRotation; },\n            enumerable: false,\n            configurable: true\n        });\n        Object.defineProperty(Settings, \"linearSleepToleranceSqr\", {\n            get: function () { return Math.pow(Settings.linearSleepTolerance, 2); },\n            enumerable: false,\n            configurable: true\n        });\n        Object.defineProperty(Settings, \"angularSleepToleranceSqr\", {\n            get: function () { return Math.pow(Settings.angularSleepTolerance, 2); },\n            enumerable: false,\n            configurable: true\n        });\n        // Collision\n        /**\n         * The maximum number of contact points between two convex shapes. Do not change\n         * this value.\n         */\n        Settings.maxManifoldPoints = 2;\n        /**\n         * The maximum number of vertices on a convex polygon. You cannot increase this\n         * too much because BlockAllocator has a maximum object size.\n         */\n        Settings.maxPolygonVertices = 12;\n        /**\n         * This is used to fatten AABBs in the dynamic tree. This allows proxies to move\n         * by a small amount without triggering a tree adjustment. This is in meters.\n         */\n        Settings.aabbExtension = 0.1;\n        /**\n         * This is used to fatten AABBs in the dynamic tree. This is used to predict the\n         * future position based on the current displacement. This is a dimensionless\n         * multiplier.\n         */\n        Settings.aabbMultiplier = 2.0;\n        /**\n         * A small length used as a collision and constraint tolerance. Usually it is\n         * chosen to be numerically significant, but visually insignificant.\n         */\n        Settings.linearSlop = 0.005;\n        /**\n         * A small angle used as a collision and constraint tolerance. Usually it is\n         * chosen to be numerically significant, but visually insignificant.\n         */\n        Settings.angularSlop = (2.0 / 180.0 * Math.PI);\n        /**\n         * Maximum number of sub-steps per contact in continuous physics simulation.\n         */\n        Settings.maxSubSteps = 8;\n        // Dynamics\n        /**\n         * Maximum number of contacts to be handled to solve a TOI impact.\n         */\n        Settings.maxTOIContacts = 32;\n        /**\n         * Maximum iterations to solve a TOI.\n         */\n        Settings.maxTOIIterations = 20;\n        /**\n         * Maximum iterations to find Distance.\n         */\n        Settings.maxDistnceIterations = 20;\n        /**\n         * A velocity threshold for elastic collisions. Any collision with a relative\n         * linear velocity below this threshold will be treated as inelastic.\n         */\n        Settings.velocityThreshold = 1.0;\n        /**\n         * The maximum linear position correction used when solving constraints. This\n         * helps to prevent overshoot.\n         */\n        Settings.maxLinearCorrection = 0.2;\n        /**\n         * The maximum angular position correction used when solving constraints. This\n         * helps to prevent overshoot.\n         */\n        Settings.maxAngularCorrection = (8.0 / 180.0 * Math.PI);\n        /**\n         * The maximum linear velocity of a body. This limit is very large and is used\n         * to prevent numerical problems. You shouldn't need to adjust Settings.\n         */\n        Settings.maxTranslation = 2.0;\n        /**\n         * The maximum angular velocity of a body. This limit is very large and is used\n         * to prevent numerical problems. You shouldn't need to adjust Settings.\n         */\n        Settings.maxRotation = (0.5 * Math.PI);\n        /**\n         * This scale factor controls how fast overlap is resolved. Ideally this would\n         * be 1 so that overlap is removed in one time step. However using values close\n         * to 1 often lead to overshoot.\n         */\n        Settings.baumgarte = 0.2;\n        Settings.toiBaugarte = 0.75;\n        // Sleep\n        /**\n         * The time that a body must be still before it will go to sleep.\n         */\n        Settings.timeToSleep = 0.5;\n        /**\n         * A body cannot sleep if its linear velocity is above this tolerance.\n         */\n        Settings.linearSleepTolerance = 0.01;\n        /**\n         * A body cannot sleep if its angular velocity is above this tolerance.\n         */\n        Settings.angularSleepTolerance = (2.0 / 180.0 * Math.PI);\n        return Settings;\n    }());\n\n    /*\n     * Copyright (c) 2016-2018 Ali Shakiba http://shakiba.me/planck.js\n     *\n     * This software is provided 'as-is', without any express or implied\n     * warranty.  In no event will the authors be held liable for any damages\n     * arising from the use of this software.\n     * Permission is granted to anyone to use this software for any purpose,\n     * including commercial applications, and to alter it and redistribute it\n     * freely, subject to the following restrictions:\n     * 1. The origin of this software must not be misrepresented; you must not\n     * claim that you wrote the original software. If you use this software\n     * in a product, an acknowledgment in the product documentation would be\n     * appreciated but is not required.\n     * 2. Altered source versions must be plainly marked as such, and must not be\n     * misrepresented as being the original software.\n     * 3. This notice may not be removed or altered from any source distribution.\n     */\n    var Pool = /** @class */ (function () {\n        function Pool(opts) {\n            this._list = [];\n            this._max = Infinity;\n            this._createCount = 0;\n            this._outCount = 0;\n            this._inCount = 0;\n            this._discardCount = 0;\n            this._list = [];\n            this._max = opts.max || this._max;\n            this._createFn = opts.create;\n            this._outFn = opts.allocate;\n            this._inFn = opts.release;\n            this._discardFn = opts.discard;\n        }\n        Pool.prototype.max = function (n) {\n            if (typeof n === 'number') {\n                this._max = n;\n                return this;\n            }\n            return this._max;\n        };\n        Pool.prototype.size = function () {\n            return this._list.length;\n        };\n        Pool.prototype.allocate = function () {\n            var item;\n            if (this._list.length > 0) {\n                item = this._list.shift();\n            }\n            else {\n                this._createCount++;\n                if (typeof this._createFn === 'function') {\n                    item = this._createFn();\n                }\n                else {\n                    // tslint:disable-next-line:no-object-literal-type-assertion\n                    item = {};\n                }\n            }\n            this._outCount++;\n            if (typeof this._outFn === 'function') {\n                this._outFn(item);\n            }\n            return item;\n        };\n        Pool.prototype.release = function (item) {\n            if (this._list.length < this._max) {\n                this._inCount++;\n                if (typeof this._inFn === 'function') {\n                    this._inFn(item);\n                }\n                this._list.push(item);\n            }\n            else {\n                this._discardCount++;\n                if (typeof this._discardFn === 'function') {\n                    item = this._discardFn(item);\n                }\n            }\n        };\n        /** @internal */\n        Pool.prototype.toString = function () {\n            return \" +\" + this._createCount + \" >\" + this._outCount + \" <\" + this._inCount + \" -\"\n                + this._discardCount + \" =\" + this._list.length + \"/\" + this._max;\n        };\n        return Pool;\n    }());\n\n    /*\n     * Planck.js\n     * The MIT License\n     * Copyright (c) 2021 Erin Catto, Ali Shakiba\n     *\n     * Permission is hereby granted, free of charge, to any person obtaining a copy\n     * of this software and associated documentation files (the \"Software\"), to deal\n     * in the Software without restriction, including without limitation the rights\n     * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n     * copies of the Software, and to permit persons to whom the Software is\n     * furnished to do so, subject to the following conditions:\n     *\n     * The above copyright notice and this permission notice shall be included in all\n     * copies or substantial portions of the Software.\n     *\n     * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n     * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n     * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n     * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n     * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n     * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n     * SOFTWARE.\n     */\n    /**\n     * A node in the dynamic tree. The client does not interact with this directly.\n     */\n    var TreeNode = /** @class */ (function () {\n        function TreeNode(id) {\n            /** Enlarged AABB */\n            this.aabb = new AABB();\n            this.userData = null;\n            this.parent = null;\n            this.child1 = null;\n            this.child2 = null;\n            /** 0: leaf, -1: free node */\n            this.height = -1;\n            this.id = id;\n        }\n        /** @internal */\n        TreeNode.prototype.toString = function () {\n            return this.id + \": \" + this.userData;\n        };\n        TreeNode.prototype.isLeaf = function () {\n            return this.child1 == null;\n        };\n        return TreeNode;\n    }());\n    /**\n     * A dynamic AABB tree broad-phase, inspired by Nathanael Presson's btDbvt. A\n     * dynamic tree arranges data in a binary tree to accelerate queries such as\n     * volume queries and ray casts. Leafs are proxies with an AABB. In the tree we\n     * expand the proxy AABB by `aabbExtension` so that the proxy AABB is bigger\n     * than the client object. This allows the client object to move by small\n     * amounts without triggering a tree update.\n     *\n     * Nodes are pooled and relocatable, so we use node indices rather than\n     * pointers.\n     */\n    var DynamicTree = /** @class */ (function () {\n        function DynamicTree() {\n            this.inputPool = new Pool({\n                create: function () {\n                    // tslint:disable-next-line:no-object-literal-type-assertion\n                    return {};\n                },\n                release: function (stack) {\n                }\n            });\n            this.stackPool = new Pool({\n                create: function () {\n                    return [];\n                },\n                release: function (stack) {\n                    stack.length = 0;\n                }\n            });\n            this.iteratorPool = new Pool({\n                create: function () {\n                    return new Iterator();\n                },\n                release: function (iterator) {\n                    iterator.close();\n                }\n            });\n            this.m_root = null;\n            this.m_nodes = {};\n            this.m_lastProxyId = 0;\n            this.m_pool = new Pool({\n                create: function () {\n                    return new TreeNode();\n                }\n            });\n        }\n        /**\n         * Get proxy user data.\n         *\n         * @return the proxy user data or 0 if the id is invalid.\n         */\n        DynamicTree.prototype.getUserData = function (id) {\n            var node = this.m_nodes[id];\n            return node.userData;\n        };\n        /**\n         * Get the fat AABB for a node id.\n         *\n         * @return the proxy user data or 0 if the id is invalid.\n         */\n        DynamicTree.prototype.getFatAABB = function (id) {\n            var node = this.m_nodes[id];\n            return node.aabb;\n        };\n        DynamicTree.prototype.allocateNode = function () {\n            var node = this.m_pool.allocate();\n            node.id = ++this.m_lastProxyId;\n            node.userData = null;\n            node.parent = null;\n            node.child1 = null;\n            node.child2 = null;\n            node.height = -1;\n            this.m_nodes[node.id] = node;\n            return node;\n        };\n        DynamicTree.prototype.freeNode = function (node) {\n            this.m_pool.release(node);\n            node.height = -1;\n            // tslint:disable-next-line:no-dynamic-delete\n            delete this.m_nodes[node.id];\n        };\n        /**\n         * Create a proxy in the tree as a leaf node. We return the index of the node\n         * instead of a pointer so that we can grow the node pool.\n         *\n         * Create a proxy. Provide a tight fitting AABB and a userData pointer.\n         */\n        DynamicTree.prototype.createProxy = function (aabb, userData) {\n            var node = this.allocateNode();\n            node.aabb.set(aabb);\n            // Fatten the aabb.\n            AABB.extend(node.aabb, Settings.aabbExtension);\n            node.userData = userData;\n            node.height = 0;\n            this.insertLeaf(node);\n            return node.id;\n        };\n        /**\n         * Destroy a proxy. This asserts if the id is invalid.\n         */\n        DynamicTree.prototype.destroyProxy = function (id) {\n            var node = this.m_nodes[id];\n            this.removeLeaf(node);\n            this.freeNode(node);\n        };\n        /**\n         * Move a proxy with a swepted AABB. If the proxy has moved outside of its\n         * fattened AABB, then the proxy is removed from the tree and re-inserted.\n         * Otherwise the function returns immediately.\n         *\n         * @param d Displacement\n         *\n         * @return true if the proxy was re-inserted.\n         */\n        DynamicTree.prototype.moveProxy = function (id, aabb, d) {\n            var node = this.m_nodes[id];\n            if (node.aabb.contains(aabb)) {\n                return false;\n            }\n            this.removeLeaf(node);\n            node.aabb.set(aabb);\n            // Extend AABB.\n            aabb = node.aabb;\n            AABB.extend(aabb, Settings.aabbExtension);\n            // Predict AABB displacement.\n            // const d = Vec2.mul(Settings.aabbMultiplier, displacement);\n            if (d.x < 0.0) {\n                aabb.lowerBound.x += d.x * Settings.aabbMultiplier;\n            }\n            else {\n                aabb.upperBound.x += d.x * Settings.aabbMultiplier;\n            }\n            if (d.y < 0.0) {\n                aabb.lowerBound.y += d.y * Settings.aabbMultiplier;\n            }\n            else {\n                aabb.upperBound.y += d.y * Settings.aabbMultiplier;\n            }\n            this.insertLeaf(node);\n            return true;\n        };\n        DynamicTree.prototype.insertLeaf = function (leaf) {\n            if (this.m_root == null) {\n                this.m_root = leaf;\n                this.m_root.parent = null;\n                return;\n            }\n            // Find the best sibling for this node\n            var leafAABB = leaf.aabb;\n            var index = this.m_root;\n            while (!index.isLeaf()) {\n                var child1 = index.child1;\n                var child2 = index.child2;\n                var area = index.aabb.getPerimeter();\n                var combinedAABB = new AABB();\n                combinedAABB.combine(index.aabb, leafAABB);\n                var combinedArea = combinedAABB.getPerimeter();\n                // Cost of creating a new parent for this node and the new leaf\n                var cost = 2.0 * combinedArea;\n                // Minimum cost of pushing the leaf further down the tree\n                var inheritanceCost = 2.0 * (combinedArea - area);\n                // Cost of descending into child1\n                var cost1 = void 0;\n                if (child1.isLeaf()) {\n                    var aabb = new AABB();\n                    aabb.combine(leafAABB, child1.aabb);\n                    cost1 = aabb.getPerimeter() + inheritanceCost;\n                }\n                else {\n                    var aabb = new AABB();\n                    aabb.combine(leafAABB, child1.aabb);\n                    var oldArea = child1.aabb.getPerimeter();\n                    var newArea = aabb.getPerimeter();\n                    cost1 = (newArea - oldArea) + inheritanceCost;\n                }\n                // Cost of descending into child2\n                var cost2 = void 0;\n                if (child2.isLeaf()) {\n                    var aabb = new AABB();\n                    aabb.combine(leafAABB, child2.aabb);\n                    cost2 = aabb.getPerimeter() + inheritanceCost;\n                }\n                else {\n                    var aabb = new AABB();\n                    aabb.combine(leafAABB, child2.aabb);\n                    var oldArea = child2.aabb.getPerimeter();\n                    var newArea = aabb.getPerimeter();\n                    cost2 = newArea - oldArea + inheritanceCost;\n                }\n                // Descend according to the minimum cost.\n                if (cost < cost1 && cost < cost2) {\n                    break;\n                }\n                // Descend\n                if (cost1 < cost2) {\n                    index = child1;\n                }\n                else {\n                    index = child2;\n                }\n            }\n            var sibling = index;\n            // Create a new parent.\n            var oldParent = sibling.parent;\n            var newParent = this.allocateNode();\n            newParent.parent = oldParent;\n            newParent.userData = null;\n            newParent.aabb.combine(leafAABB, sibling.aabb);\n            newParent.height = sibling.height + 1;\n            if (oldParent != null) {\n                // The sibling was not the root.\n                if (oldParent.child1 === sibling) {\n                    oldParent.child1 = newParent;\n                }\n                else {\n                    oldParent.child2 = newParent;\n                }\n                newParent.child1 = sibling;\n                newParent.child2 = leaf;\n                sibling.parent = newParent;\n                leaf.parent = newParent;\n            }\n            else {\n                // The sibling was the root.\n                newParent.child1 = sibling;\n                newParent.child2 = leaf;\n                sibling.parent = newParent;\n                leaf.parent = newParent;\n                this.m_root = newParent;\n            }\n            // Walk back up the tree fixing heights and AABBs\n            index = leaf.parent;\n            while (index != null) {\n                index = this.balance(index);\n                var child1 = index.child1;\n                var child2 = index.child2;\n                index.height = 1 + math$1.max(child1.height, child2.height);\n                index.aabb.combine(child1.aabb, child2.aabb);\n                index = index.parent;\n            }\n            // validate();\n        };\n        DynamicTree.prototype.removeLeaf = function (leaf) {\n            if (leaf === this.m_root) {\n                this.m_root = null;\n                return;\n            }\n            var parent = leaf.parent;\n            var grandParent = parent.parent;\n            var sibling;\n            if (parent.child1 === leaf) {\n                sibling = parent.child2;\n            }\n            else {\n                sibling = parent.child1;\n            }\n            if (grandParent != null) {\n                // Destroy parent and connect sibling to grandParent.\n                if (grandParent.child1 === parent) {\n                    grandParent.child1 = sibling;\n                }\n                else {\n                    grandParent.child2 = sibling;\n                }\n                sibling.parent = grandParent;\n                this.freeNode(parent);\n                // Adjust ancestor bounds.\n                var index = grandParent;\n                while (index != null) {\n                    index = this.balance(index);\n                    var child1 = index.child1;\n                    var child2 = index.child2;\n                    index.aabb.combine(child1.aabb, child2.aabb);\n                    index.height = 1 + math$1.max(child1.height, child2.height);\n                    index = index.parent;\n                }\n            }\n            else {\n                this.m_root = sibling;\n                sibling.parent = null;\n                this.freeNode(parent);\n            }\n            // validate();\n        };\n        /**\n         * Perform a left or right rotation if node A is imbalanced. Returns the new\n         * root index.\n         */\n        DynamicTree.prototype.balance = function (iA) {\n            var A = iA;\n            if (A.isLeaf() || A.height < 2) {\n                return iA;\n            }\n            var B = A.child1;\n            var C = A.child2;\n            var balance = C.height - B.height;\n            // Rotate C up\n            if (balance > 1) {\n                var F = C.child1;\n                var G = C.child2;\n                // Swap A and C\n                C.child1 = A;\n                C.parent = A.parent;\n                A.parent = C;\n                // A's old parent should point to C\n                if (C.parent != null) {\n                    if (C.parent.child1 === iA) {\n                        C.parent.child1 = C;\n                    }\n                    else {\n                        C.parent.child2 = C;\n                    }\n                }\n                else {\n                    this.m_root = C;\n                }\n                // Rotate\n                if (F.height > G.height) {\n                    C.child2 = F;\n                    A.child2 = G;\n                    G.parent = A;\n                    A.aabb.combine(B.aabb, G.aabb);\n                    C.aabb.combine(A.aabb, F.aabb);\n                    A.height = 1 + math$1.max(B.height, G.height);\n                    C.height = 1 + math$1.max(A.height, F.height);\n                }\n                else {\n                    C.child2 = G;\n                    A.child2 = F;\n                    F.parent = A;\n                    A.aabb.combine(B.aabb, F.aabb);\n                    C.aabb.combine(A.aabb, G.aabb);\n                    A.height = 1 + math$1.max(B.height, F.height);\n                    C.height = 1 + math$1.max(A.height, G.height);\n                }\n                return C;\n            }\n            // Rotate B up\n            if (balance < -1) {\n                var D = B.child1;\n                var E = B.child2;\n                // Swap A and B\n                B.child1 = A;\n                B.parent = A.parent;\n                A.parent = B;\n                // A's old parent should point to B\n                if (B.parent != null) {\n                    if (B.parent.child1 === A) {\n                        B.parent.child1 = B;\n                    }\n                    else {\n                        B.parent.child2 = B;\n                    }\n                }\n                else {\n                    this.m_root = B;\n                }\n                // Rotate\n                if (D.height > E.height) {\n                    B.child2 = D;\n                    A.child1 = E;\n                    E.parent = A;\n                    A.aabb.combine(C.aabb, E.aabb);\n                    B.aabb.combine(A.aabb, D.aabb);\n                    A.height = 1 + math$1.max(C.height, E.height);\n                    B.height = 1 + math$1.max(A.height, D.height);\n                }\n                else {\n                    B.child2 = E;\n                    A.child1 = D;\n                    D.parent = A;\n                    A.aabb.combine(C.aabb, D.aabb);\n                    B.aabb.combine(A.aabb, E.aabb);\n                    A.height = 1 + math$1.max(C.height, D.height);\n                    B.height = 1 + math$1.max(A.height, E.height);\n                }\n                return B;\n            }\n            return A;\n        };\n        /**\n         * Compute the height of the binary tree in O(N) time. Should not be called\n         * often.\n         */\n        DynamicTree.prototype.getHeight = function () {\n            if (this.m_root == null) {\n                return 0;\n            }\n            return this.m_root.height;\n        };\n        /**\n         * Get the ratio of the sum of the node areas to the root area.\n         */\n        DynamicTree.prototype.getAreaRatio = function () {\n            if (this.m_root == null) {\n                return 0.0;\n            }\n            var root = this.m_root;\n            var rootArea = root.aabb.getPerimeter();\n            var totalArea = 0.0;\n            var node;\n            var it = this.iteratorPool.allocate().preorder(this.m_root);\n            while (node = it.next()) {\n                if (node.height < 0) {\n                    // Free node in pool\n                    continue;\n                }\n                totalArea += node.aabb.getPerimeter();\n            }\n            this.iteratorPool.release(it);\n            return totalArea / rootArea;\n        };\n        /**\n         * Compute the height of a sub-tree.\n         */\n        DynamicTree.prototype.computeHeight = function (id) {\n            var node;\n            if (typeof id !== 'undefined') {\n                node = this.m_nodes[id];\n            }\n            else {\n                node = this.m_root;\n            }\n            // _ASSERT && common.assert(0 <= id && id < this.m_nodeCapacity);\n            if (node.isLeaf()) {\n                return 0;\n            }\n            var height1 = this.computeHeight(node.child1.id);\n            var height2 = this.computeHeight(node.child2.id);\n            return 1 + math$1.max(height1, height2);\n        };\n        DynamicTree.prototype.validateStructure = function (node) {\n            if (node == null) {\n                return;\n            }\n            if (node === this.m_root) ;\n            var child1 = node.child1;\n            var child2 = node.child2;\n            if (node.isLeaf()) {\n                return;\n            }\n            this.validateStructure(child1);\n            this.validateStructure(child2);\n        };\n        DynamicTree.prototype.validateMetrics = function (node) {\n            if (node == null) {\n                return;\n            }\n            var child1 = node.child1;\n            var child2 = node.child2;\n            if (node.isLeaf()) {\n                return;\n            }\n            // _ASSERT && common.assert(0 <= child1 && child1 < this.m_nodeCapacity);\n            // _ASSERT && common.assert(0 <= child2 && child2 < this.m_nodeCapacity);\n            var height1 = child1.height;\n            var height2 = child2.height;\n            1 + math$1.max(height1, height2);\n            var aabb = new AABB();\n            aabb.combine(child1.aabb, child2.aabb);\n            this.validateMetrics(child1);\n            this.validateMetrics(child2);\n        };\n        /**\n         * Validate this tree. For testing.\n         */\n        DynamicTree.prototype.validate = function () {\n            this.validateStructure(this.m_root);\n            this.validateMetrics(this.m_root);\n        };\n        /**\n         * Get the maximum balance of an node in the tree. The balance is the difference\n         * in height of the two children of a node.\n         */\n        DynamicTree.prototype.getMaxBalance = function () {\n            var maxBalance = 0;\n            var node;\n            var it = this.iteratorPool.allocate().preorder(this.m_root);\n            while (node = it.next()) {\n                if (node.height <= 1) {\n                    continue;\n                }\n                var balance = math$1.abs(node.child2.height - node.child1.height);\n                maxBalance = math$1.max(maxBalance, balance);\n            }\n            this.iteratorPool.release(it);\n            return maxBalance;\n        };\n        /**\n         * Build an optimal tree. Very expensive. For testing.\n         */\n        DynamicTree.prototype.rebuildBottomUp = function () {\n            var nodes = [];\n            var count = 0;\n            // Build array of leaves. Free the rest.\n            var node;\n            var it = this.iteratorPool.allocate().preorder(this.m_root);\n            while (node = it.next()) {\n                if (node.height < 0) {\n                    // free node in pool\n                    continue;\n                }\n                if (node.isLeaf()) {\n                    node.parent = null;\n                    nodes[count] = node;\n                    ++count;\n                }\n                else {\n                    this.freeNode(node);\n                }\n            }\n            this.iteratorPool.release(it);\n            while (count > 1) {\n                var minCost = Infinity;\n                var iMin = -1;\n                var jMin = -1;\n                for (var i = 0; i < count; ++i) {\n                    var aabbi = nodes[i].aabb;\n                    for (var j = i + 1; j < count; ++j) {\n                        var aabbj = nodes[j].aabb;\n                        var b = new AABB();\n                        b.combine(aabbi, aabbj);\n                        var cost = b.getPerimeter();\n                        if (cost < minCost) {\n                            iMin = i;\n                            jMin = j;\n                            minCost = cost;\n                        }\n                    }\n                }\n                var child1 = nodes[iMin];\n                var child2 = nodes[jMin];\n                var parent_1 = this.allocateNode();\n                parent_1.child1 = child1;\n                parent_1.child2 = child2;\n                parent_1.height = 1 + math$1.max(child1.height, child2.height);\n                parent_1.aabb.combine(child1.aabb, child2.aabb);\n                parent_1.parent = null;\n                child1.parent = parent_1;\n                child2.parent = parent_1;\n                nodes[jMin] = nodes[count - 1];\n                nodes[iMin] = parent_1;\n                --count;\n            }\n            this.m_root = nodes[0];\n            this.validate();\n        };\n        /**\n         * Shift the world origin. Useful for large worlds. The shift formula is:\n         * position -= newOrigin\n         *\n         * @param newOrigin The new origin with respect to the old origin\n         */\n        DynamicTree.prototype.shiftOrigin = function (newOrigin) {\n            // Build array of leaves. Free the rest.\n            var node;\n            var it = this.iteratorPool.allocate().preorder(this.m_root);\n            while (node = it.next()) {\n                var aabb = node.aabb;\n                aabb.lowerBound.x -= newOrigin.x;\n                aabb.lowerBound.y -= newOrigin.y;\n                aabb.upperBound.x -= newOrigin.x;\n                aabb.upperBound.y -= newOrigin.y;\n            }\n            this.iteratorPool.release(it);\n        };\n        /**\n         * Query an AABB for overlapping proxies. The callback class is called for each\n         * proxy that overlaps the supplied AABB.\n         */\n        DynamicTree.prototype.query = function (aabb, queryCallback) {\n            var stack = this.stackPool.allocate();\n            stack.push(this.m_root);\n            while (stack.length > 0) {\n                var node = stack.pop();\n                if (node == null) {\n                    continue;\n                }\n                if (AABB.testOverlap(node.aabb, aabb)) {\n                    if (node.isLeaf()) {\n                        var proceed = queryCallback(node.id);\n                        if (proceed === false) {\n                            return;\n                        }\n                    }\n                    else {\n                        stack.push(node.child1);\n                        stack.push(node.child2);\n                    }\n                }\n            }\n            this.stackPool.release(stack);\n        };\n        /**\n         * Ray-cast against the proxies in the tree. This relies on the callback to\n         * perform a exact ray-cast in the case were the proxy contains a shape. The\n         * callback also performs the any collision filtering. This has performance\n         * roughly equal to k * log(n), where k is the number of collisions and n is the\n         * number of proxies in the tree.\n         *\n         * @param input The ray-cast input data. The ray extends from `p1` to `p1 + maxFraction * (p2 - p1)`.\n         * @param rayCastCallback A function that is called for each proxy that is hit by the ray.\n         */\n        DynamicTree.prototype.rayCast = function (input, rayCastCallback) {\n            var p1 = input.p1;\n            var p2 = input.p2;\n            var r = Vec2.sub(p2, p1);\n            r.normalize();\n            // v is perpendicular to the segment.\n            var v = Vec2.crossNumVec2(1.0, r);\n            var abs_v = Vec2.abs(v);\n            // Separating axis for segment (Gino, p80).\n            // |dot(v, p1 - c)| > dot(|v|, h)\n            var maxFraction = input.maxFraction;\n            // Build a bounding box for the segment.\n            var segmentAABB = new AABB();\n            var t = Vec2.combine((1 - maxFraction), p1, maxFraction, p2);\n            segmentAABB.combinePoints(p1, t);\n            var stack = this.stackPool.allocate();\n            var subInput = this.inputPool.allocate();\n            stack.push(this.m_root);\n            while (stack.length > 0) {\n                var node = stack.pop();\n                if (node == null) {\n                    continue;\n                }\n                if (AABB.testOverlap(node.aabb, segmentAABB) === false) {\n                    continue;\n                }\n                // Separating axis for segment (Gino, p80).\n                // |dot(v, p1 - c)| > dot(|v|, h)\n                var c = node.aabb.getCenter();\n                var h = node.aabb.getExtents();\n                var separation = math$1.abs(Vec2.dot(v, Vec2.sub(p1, c))) - Vec2.dot(abs_v, h);\n                if (separation > 0.0) {\n                    continue;\n                }\n                if (node.isLeaf()) {\n                    subInput.p1 = Vec2.clone(input.p1);\n                    subInput.p2 = Vec2.clone(input.p2);\n                    subInput.maxFraction = maxFraction;\n                    var value = rayCastCallback(subInput, node.id);\n                    if (value === 0.0) {\n                        // The client has terminated the ray cast.\n                        return;\n                    }\n                    if (value > 0.0) {\n                        // update segment bounding box.\n                        maxFraction = value;\n                        t = Vec2.combine((1 - maxFraction), p1, maxFraction, p2);\n                        segmentAABB.combinePoints(p1, t);\n                    }\n                }\n                else {\n                    stack.push(node.child1);\n                    stack.push(node.child2);\n                }\n            }\n            this.stackPool.release(stack);\n            this.inputPool.release(subInput);\n        };\n        return DynamicTree;\n    }());\n    var Iterator = /** @class */ (function () {\n        function Iterator() {\n            this.parents = [];\n            this.states = [];\n        }\n        Iterator.prototype.preorder = function (root) {\n            this.parents.length = 0;\n            this.parents.push(root);\n            this.states.length = 0;\n            this.states.push(0);\n            return this;\n        };\n        Iterator.prototype.next = function () {\n            while (this.parents.length > 0) {\n                var i = this.parents.length - 1;\n                var node = this.parents[i];\n                if (this.states[i] === 0) {\n                    this.states[i] = 1;\n                    return node;\n                }\n                if (this.states[i] === 1) {\n                    this.states[i] = 2;\n                    if (node.child1) {\n                        this.parents.push(node.child1);\n                        this.states.push(1);\n                        return node.child1;\n                    }\n                }\n                if (this.states[i] === 2) {\n                    this.states[i] = 3;\n                    if (node.child2) {\n                        this.parents.push(node.child2);\n                        this.states.push(1);\n                        return node.child2;\n                    }\n                }\n                this.parents.pop();\n                this.states.pop();\n            }\n        };\n        Iterator.prototype.close = function () {\n            this.parents.length = 0;\n        };\n        return Iterator;\n    }());\n\n    /*\n     * Planck.js\n     * The MIT License\n     * Copyright (c) 2021 Erin Catto, Ali Shakiba\n     *\n     * Permission is hereby granted, free of charge, to any person obtaining a copy\n     * of this software and associated documentation files (the \"Software\"), to deal\n     * in the Software without restriction, including without limitation the rights\n     * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n     * copies of the Software, and to permit persons to whom the Software is\n     * furnished to do so, subject to the following conditions:\n     *\n     * The above copyright notice and this permission notice shall be included in all\n     * copies or substantial portions of the Software.\n     *\n     * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n     * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n     * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n     * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n     * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n     * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n     * SOFTWARE.\n     */\n    /**\n     * The broad-phase wraps and extends a dynamic-tree to keep track of moved\n     * objects and query them on update.\n     */\n    var BroadPhase = /** @class */ (function () {\n        function BroadPhase() {\n            var _this = this;\n            this.m_tree = new DynamicTree();\n            this.m_proxyCount = 0;\n            this.m_moveBuffer = [];\n            /**\n             * Query an AABB for overlapping proxies. The callback class is called for each\n             * proxy that overlaps the supplied AABB.\n             */\n            this.query = function (aabb, queryCallback) {\n                _this.m_tree.query(aabb, queryCallback);\n            };\n            this.queryCallback = function (proxyId) {\n                // A proxy cannot form a pair with itself.\n                if (proxyId === _this.m_queryProxyId) {\n                    return true;\n                }\n                var proxyIdA = math$1.min(proxyId, _this.m_queryProxyId);\n                var proxyIdB = math$1.max(proxyId, _this.m_queryProxyId);\n                // TODO: Skip any duplicate pairs.\n                var userDataA = _this.m_tree.getUserData(proxyIdA);\n                var userDataB = _this.m_tree.getUserData(proxyIdB);\n                // Send the pairs back to the client.\n                _this.m_callback(userDataA, userDataB);\n                return true;\n            };\n        }\n        /**\n         * Get user data from a proxy. Returns null if the id is invalid.\n         */\n        BroadPhase.prototype.getUserData = function (proxyId) {\n            return this.m_tree.getUserData(proxyId);\n        };\n        /**\n         * Test overlap of fat AABBs.\n         */\n        BroadPhase.prototype.testOverlap = function (proxyIdA, proxyIdB) {\n            var aabbA = this.m_tree.getFatAABB(proxyIdA);\n            var aabbB = this.m_tree.getFatAABB(proxyIdB);\n            return AABB.testOverlap(aabbA, aabbB);\n        };\n        /**\n         * Get the fat AABB for a proxy.\n         */\n        BroadPhase.prototype.getFatAABB = function (proxyId) {\n            return this.m_tree.getFatAABB(proxyId);\n        };\n        /**\n         * Get the number of proxies.\n         */\n        BroadPhase.prototype.getProxyCount = function () {\n            return this.m_proxyCount;\n        };\n        /**\n         * Get the height of the embedded tree.\n         */\n        BroadPhase.prototype.getTreeHeight = function () {\n            return this.m_tree.getHeight();\n        };\n        /**\n         * Get the balance (integer) of the embedded tree.\n         */\n        BroadPhase.prototype.getTreeBalance = function () {\n            return this.m_tree.getMaxBalance();\n        };\n        /**\n         * Get the quality metric of the embedded tree.\n         */\n        BroadPhase.prototype.getTreeQuality = function () {\n            return this.m_tree.getAreaRatio();\n        };\n        /**\n         * Ray-cast against the proxies in the tree. This relies on the callback to\n         * perform a exact ray-cast in the case were the proxy contains a shape. The\n         * callback also performs the any collision filtering. This has performance\n         * roughly equal to k * log(n), where k is the number of collisions and n is the\n         * number of proxies in the tree.\n         *\n         * @param input The ray-cast input data. The ray extends from `p1` to `p1 + maxFraction * (p2 - p1)`.\n         * @param rayCastCallback A function that is called for each proxy that is hit by the ray.\n         */\n        BroadPhase.prototype.rayCast = function (input, rayCastCallback) {\n            this.m_tree.rayCast(input, rayCastCallback);\n        };\n        /**\n         * Shift the world origin. Useful for large worlds. The shift formula is:\n         * position -= newOrigin\n         *\n         * @param newOrigin The new origin with respect to the old origin\n         */\n        BroadPhase.prototype.shiftOrigin = function (newOrigin) {\n            this.m_tree.shiftOrigin(newOrigin);\n        };\n        /**\n         * Create a proxy with an initial AABB. Pairs are not reported until UpdatePairs\n         * is called.\n         */\n        BroadPhase.prototype.createProxy = function (aabb, userData) {\n            var proxyId = this.m_tree.createProxy(aabb, userData);\n            this.m_proxyCount++;\n            this.bufferMove(proxyId);\n            return proxyId;\n        };\n        /**\n         * Destroy a proxy. It is up to the client to remove any pairs.\n         */\n        BroadPhase.prototype.destroyProxy = function (proxyId) {\n            this.unbufferMove(proxyId);\n            this.m_proxyCount--;\n            this.m_tree.destroyProxy(proxyId);\n        };\n        /**\n         * Call moveProxy as many times as you like, then when you are done call\n         * UpdatePairs to finalized the proxy pairs (for your time step).\n         */\n        BroadPhase.prototype.moveProxy = function (proxyId, aabb, displacement) {\n            var changed = this.m_tree.moveProxy(proxyId, aabb, displacement);\n            if (changed) {\n                this.bufferMove(proxyId);\n            }\n        };\n        /**\n         * Call to trigger a re-processing of it's pairs on the next call to\n         * UpdatePairs.\n         */\n        BroadPhase.prototype.touchProxy = function (proxyId) {\n            this.bufferMove(proxyId);\n        };\n        BroadPhase.prototype.bufferMove = function (proxyId) {\n            this.m_moveBuffer.push(proxyId);\n        };\n        BroadPhase.prototype.unbufferMove = function (proxyId) {\n            for (var i = 0; i < this.m_moveBuffer.length; ++i) {\n                if (this.m_moveBuffer[i] === proxyId) {\n                    this.m_moveBuffer[i] = null;\n                }\n            }\n        };\n        /**\n         * Update the pairs. This results in pair callbacks. This can only add pairs.\n         */\n        BroadPhase.prototype.updatePairs = function (addPairCallback) {\n            this.m_callback = addPairCallback;\n            // Perform tree queries for all moving proxies.\n            while (this.m_moveBuffer.length > 0) {\n                this.m_queryProxyId = this.m_moveBuffer.pop();\n                if (this.m_queryProxyId === null) {\n                    continue;\n                }\n                // We have to query the tree with the fat AABB so that\n                // we don't fail to create a pair that may touch later.\n                var fatAABB = this.m_tree.getFatAABB(this.m_queryProxyId);\n                // Query tree, create pairs and add them pair buffer.\n                this.m_tree.query(fatAABB, this.queryCallback);\n            }\n            // Try to keep the tree balanced.\n            // this.m_tree.rebalance(4);\n        };\n        return BroadPhase;\n    }());\n\n    /*\n     * Planck.js\n     * The MIT License\n     * Copyright (c) 2021 Erin Catto, Ali Shakiba\n     *\n     * Permission is hereby granted, free of charge, to any person obtaining a copy\n     * of this software and associated documentation files (the \"Software\"), to deal\n     * in the Software without restriction, including without limitation the rights\n     * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n     * copies of the Software, and to permit persons to whom the Software is\n     * furnished to do so, subject to the following conditions:\n     *\n     * The above copyright notice and this permission notice shall be included in all\n     * copies or substantial portions of the Software.\n     *\n     * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n     * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n     * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n     * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n     * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n     * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n     * SOFTWARE.\n     */\n    var Rot = /** @class */ (function () {\n        /** Initialize from an angle in radians. */\n        function Rot(angle) {\n            if (!(this instanceof Rot)) {\n                return new Rot(angle);\n            }\n            if (typeof angle === 'number') {\n                this.setAngle(angle);\n            }\n            else if (typeof angle === 'object') {\n                this.setRot(angle);\n            }\n            else {\n                this.setIdentity();\n            }\n        }\n        /** @internal */\n        Rot.neo = function (angle) {\n            var obj = Object.create(Rot.prototype);\n            obj.setAngle(angle);\n            return obj;\n        };\n        Rot.clone = function (rot) {\n            var obj = Object.create(Rot.prototype);\n            obj.s = rot.s;\n            obj.c = rot.c;\n            return obj;\n        };\n        Rot.identity = function () {\n            var obj = Object.create(Rot.prototype);\n            obj.s = 0.0;\n            obj.c = 1.0;\n            return obj;\n        };\n        Rot.isValid = function (obj) {\n            if (obj === null || typeof obj === 'undefined') {\n                return false;\n            }\n            return math$1.isFinite(obj.s) && math$1.isFinite(obj.c);\n        };\n        Rot.assert = function (o) {\n            return;\n        };\n        /** Set to the identity rotation. */\n        Rot.prototype.setIdentity = function () {\n            this.s = 0.0;\n            this.c = 1.0;\n        };\n        Rot.prototype.set = function (angle) {\n            if (typeof angle === 'object') {\n                this.s = angle.s;\n                this.c = angle.c;\n            }\n            else {\n                // TODO_ERIN optimize\n                this.s = math$1.sin(angle);\n                this.c = math$1.cos(angle);\n            }\n        };\n        Rot.prototype.setRot = function (angle) {\n            this.s = angle.s;\n            this.c = angle.c;\n        };\n        /** Set using an angle in radians. */\n        Rot.prototype.setAngle = function (angle) {\n            // TODO_ERIN optimize\n            this.s = math$1.sin(angle);\n            this.c = math$1.cos(angle);\n        };\n        /** Get the angle in radians. */\n        Rot.prototype.getAngle = function () {\n            return math$1.atan2(this.s, this.c);\n        };\n        /** Get the x-axis. */\n        Rot.prototype.getXAxis = function () {\n            return Vec2.neo(this.c, this.s);\n        };\n        /** Get the u-axis. */\n        Rot.prototype.getYAxis = function () {\n            return Vec2.neo(-this.s, this.c);\n        };\n        // tslint:disable-next-line:typedef\n        Rot.mul = function (rot, m) {\n            if ('c' in m && 's' in m) {\n                // [qc -qs] * [rc -rs] = [qc*rc-qs*rs -qc*rs-qs*rc]\n                // [qs qc] [rs rc] [qs*rc+qc*rs -qs*rs+qc*rc]\n                // s = qs * rc + qc * rs\n                // c = qc * rc - qs * rs\n                var qr = Rot.identity();\n                qr.s = rot.s * m.c + rot.c * m.s;\n                qr.c = rot.c * m.c - rot.s * m.s;\n                return qr;\n            }\n            else if ('x' in m && 'y' in m) {\n                return Vec2.neo(rot.c * m.x - rot.s * m.y, rot.s * m.x + rot.c * m.y);\n            }\n        };\n        /** Multiply two rotations: q * r */\n        Rot.mulRot = function (rot, m) {\n            // [qc -qs] * [rc -rs] = [qc*rc-qs*rs -qc*rs-qs*rc]\n            // [qs qc] [rs rc] [qs*rc+qc*rs -qs*rs+qc*rc]\n            // s = qs * rc + qc * rs\n            // c = qc * rc - qs * rs\n            var qr = Rot.identity();\n            qr.s = rot.s * m.c + rot.c * m.s;\n            qr.c = rot.c * m.c - rot.s * m.s;\n            return qr;\n        };\n        /** Rotate a vector */\n        Rot.mulVec2 = function (rot, m) {\n            return Vec2.neo(rot.c * m.x - rot.s * m.y, rot.s * m.x + rot.c * m.y);\n        };\n        Rot.mulSub = function (rot, v, w) {\n            var x = rot.c * (v.x - w.x) - rot.s * (v.y - w.y);\n            var y = rot.s * (v.x - w.x) + rot.c * (v.y - w.y);\n            return Vec2.neo(x, y);\n        };\n        // tslint:disable-next-line:typedef\n        Rot.mulT = function (rot, m) {\n            if ('c' in m && 's' in m) {\n                // [ qc qs] * [rc -rs] = [qc*rc+qs*rs -qc*rs+qs*rc]\n                // [-qs qc] [rs rc] [-qs*rc+qc*rs qs*rs+qc*rc]\n                // s = qc * rs - qs * rc\n                // c = qc * rc + qs * rs\n                var qr = Rot.identity();\n                qr.s = rot.c * m.s - rot.s * m.c;\n                qr.c = rot.c * m.c + rot.s * m.s;\n                return qr;\n            }\n            else if ('x' in m && 'y' in m) {\n                return Vec2.neo(rot.c * m.x + rot.s * m.y, -rot.s * m.x + rot.c * m.y);\n            }\n        };\n        /** Transpose multiply two rotations: qT * r */\n        Rot.mulTRot = function (rot, m) {\n            // [ qc qs] * [rc -rs] = [qc*rc+qs*rs -qc*rs+qs*rc]\n            // [-qs qc] [rs rc] [-qs*rc+qc*rs qs*rs+qc*rc]\n            // s = qc * rs - qs * rc\n            // c = qc * rc + qs * rs\n            var qr = Rot.identity();\n            qr.s = rot.c * m.s - rot.s * m.c;\n            qr.c = rot.c * m.c + rot.s * m.s;\n            return qr;\n        };\n        /** Inverse rotate a vector */\n        Rot.mulTVec2 = function (rot, m) {\n            return Vec2.neo(rot.c * m.x + rot.s * m.y, -rot.s * m.x + rot.c * m.y);\n        };\n        return Rot;\n    }());\n\n    /*\n     * Planck.js\n     * The MIT License\n     * Copyright (c) 2021 Erin Catto, Ali Shakiba\n     *\n     * Permission is hereby granted, free of charge, to any person obtaining a copy\n     * of this software and associated documentation files (the \"Software\"), to deal\n     * in the Software without restriction, including without limitation the rights\n     * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n     * copies of the Software, and to permit persons to whom the Software is\n     * furnished to do so, subject to the following conditions:\n     *\n     * The above copyright notice and this permission notice shall be included in all\n     * copies or substantial portions of the Software.\n     *\n     * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n     * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n     * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n     * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n     * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n     * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n     * SOFTWARE.\n     */\n    /**\n     * A transform contains translation and rotation. It is used to represent the\n     * position and orientation of rigid frames. Initialize using a position vector\n     * and a rotation.\n     */\n    var Transform = /** @class */ (function () {\n        function Transform(position, rotation) {\n            if (!(this instanceof Transform)) {\n                return new Transform(position, rotation);\n            }\n            this.p = Vec2.zero();\n            this.q = Rot.identity();\n            if (typeof position !== 'undefined') {\n                this.p.setVec2(position);\n            }\n            if (typeof rotation !== 'undefined') {\n                this.q.setAngle(rotation);\n            }\n        }\n        Transform.clone = function (xf) {\n            var obj = Object.create(Transform.prototype);\n            obj.p = Vec2.clone(xf.p);\n            obj.q = Rot.clone(xf.q);\n            return obj;\n        };\n        /** @internal */\n        Transform.neo = function (position, rotation) {\n            var obj = Object.create(Transform.prototype);\n            obj.p = Vec2.clone(position);\n            obj.q = Rot.clone(rotation);\n            return obj;\n        };\n        Transform.identity = function () {\n            var obj = Object.create(Transform.prototype);\n            obj.p = Vec2.zero();\n            obj.q = Rot.identity();\n            return obj;\n        };\n        /**\n         * Set this to the identity transform.\n         */\n        Transform.prototype.setIdentity = function () {\n            this.p.setZero();\n            this.q.setIdentity();\n        };\n        /**\n         * Set this based on the position and angle.\n         */\n        // tslint:disable-next-line:typedef\n        Transform.prototype.set = function (a, b) {\n            if (typeof b === 'undefined') {\n                this.p.set(a.p);\n                this.q.set(a.q);\n            }\n            else {\n                this.p.set(a);\n                this.q.set(b);\n            }\n        };\n        /**\n         * Set this based on the position and angle.\n         */\n        Transform.prototype.setNum = function (position, rotation) {\n            this.p.setVec2(position);\n            this.q.setAngle(rotation);\n        };\n        Transform.prototype.setTransform = function (xf) {\n            this.p.setVec2(xf.p);\n            this.q.setRot(xf.q);\n        };\n        Transform.isValid = function (obj) {\n            if (obj === null || typeof obj === 'undefined') {\n                return false;\n            }\n            return Vec2.isValid(obj.p) && Rot.isValid(obj.q);\n        };\n        Transform.assert = function (o) {\n            return;\n        };\n        // static mul(a: Transform, b: Vec2[]): Vec2[];\n        // static mul(a: Transform, b: Transform[]): Transform[];\n        // tslint:disable-next-line:typedef\n        Transform.mul = function (a, b) {\n            if (Array.isArray(b)) {\n                var arr = [];\n                for (var i = 0; i < b.length; i++) {\n                    arr[i] = Transform.mul(a, b[i]);\n                }\n                return arr;\n            }\n            else if ('x' in b && 'y' in b) {\n                return Transform.mulVec2(a, b);\n            }\n            else if ('p' in b && 'q' in b) {\n                return Transform.mulXf(a, b);\n            }\n        };\n        // tslint:disable-next-line:typedef\n        Transform.mulAll = function (a, b) {\n            var arr = [];\n            for (var i = 0; i < b.length; i++) {\n                arr[i] = Transform.mul(a, b[i]);\n            }\n            return arr;\n        };\n        /** @internal @deprecated */\n        // tslint:disable-next-line:typedef\n        Transform.mulFn = function (a) {\n            return function (b) {\n                return Transform.mul(a, b);\n            };\n        };\n        Transform.mulVec2 = function (a, b) {\n            var x = (a.q.c * b.x - a.q.s * b.y) + a.p.x;\n            var y = (a.q.s * b.x + a.q.c * b.y) + a.p.y;\n            return Vec2.neo(x, y);\n        };\n        Transform.mulXf = function (a, b) {\n            // v2 = A.q.Rot(B.q.Rot(v1) + B.p) + A.p\n            // = (A.q * B.q).Rot(v1) + A.q.Rot(B.p) + A.p\n            var xf = Transform.identity();\n            xf.q = Rot.mulRot(a.q, b.q);\n            xf.p = Vec2.add(Rot.mulVec2(a.q, b.p), a.p);\n            return xf;\n        };\n        // tslint:disable-next-line:typedef\n        Transform.mulT = function (a, b) {\n            if ('x' in b && 'y' in b) {\n                return Transform.mulTVec2(a, b);\n            }\n            else if ('p' in b && 'q' in b) {\n                return Transform.mulTXf(a, b);\n            }\n        };\n        Transform.mulTVec2 = function (a, b) {\n            var px = b.x - a.p.x;\n            var py = b.y - a.p.y;\n            var x = (a.q.c * px + a.q.s * py);\n            var y = (-a.q.s * px + a.q.c * py);\n            return Vec2.neo(x, y);\n        };\n        Transform.mulTXf = function (a, b) {\n            // v2 = A.q' * (B.q * v1 + B.p - A.p)\n            // = A.q' * B.q * v1 + A.q' * (B.p - A.p)\n            var xf = Transform.identity();\n            xf.q.setRot(Rot.mulTRot(a.q, b.q));\n            xf.p.setVec2(Rot.mulTVec2(a.q, Vec2.sub(b.p, a.p)));\n            return xf;\n        };\n        return Transform;\n    }());\n\n    /*\n     * Planck.js\n     * The MIT License\n     * Copyright (c) 2021 Erin Catto, Ali Shakiba\n     *\n     * Permission is hereby granted, free of charge, to any person obtaining a copy\n     * of this software and associated documentation files (the \"Software\"), to deal\n     * in the Software without restriction, including without limitation the rights\n     * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n     * copies of the Software, and to permit persons to whom the Software is\n     * furnished to do so, subject to the following conditions:\n     *\n     * The above copyright notice and this permission notice shall be included in all\n     * copies or substantial portions of the Software.\n     *\n     * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n     * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n     * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n     * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n     * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n     * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n     * SOFTWARE.\n     */\n    /**\n     * This describes the motion of a body/shape for TOI computation. Shapes are\n     * defined with respect to the body origin, which may not coincide with the\n     * center of mass. However, to support dynamics we must interpolate the center\n     * of mass position.\n     */\n    var Sweep = /** @class */ (function () {\n        function Sweep(c, a) {\n            this.localCenter = Vec2.zero();\n            this.c = Vec2.zero();\n            this.a = 0;\n            this.alpha0 = 0;\n            this.c0 = Vec2.zero();\n            this.a0 = 0;\n        }\n        Sweep.prototype.setTransform = function (xf) {\n            var c = Transform.mulVec2(xf, this.localCenter);\n            this.c.setVec2(c);\n            this.c0.setVec2(c);\n            this.a = xf.q.getAngle();\n            this.a0 = xf.q.getAngle();\n        };\n        Sweep.prototype.setLocalCenter = function (localCenter, xf) {\n            this.localCenter.setVec2(localCenter);\n            var c = Transform.mulVec2(xf, this.localCenter);\n            this.c.setVec2(c);\n            this.c0.setVec2(c);\n        };\n        /**\n         * Get the interpolated transform at a specific time.\n         *\n         * @param xf\n         * @param beta A factor in [0,1], where 0 indicates alpha0\n         */\n        Sweep.prototype.getTransform = function (xf, beta) {\n            if (beta === void 0) { beta = 0; }\n            xf.q.setAngle((1.0 - beta) * this.a0 + beta * this.a);\n            xf.p.setCombine((1.0 - beta), this.c0, beta, this.c);\n            // shift to origin\n            xf.p.sub(Rot.mulVec2(xf.q, this.localCenter));\n        };\n        /**\n         * Advance the sweep forward, yielding a new initial state.\n         *\n         * @param alpha The new initial time\n         */\n        Sweep.prototype.advance = function (alpha) {\n            var beta = (alpha - this.alpha0) / (1.0 - this.alpha0);\n            this.c0.setCombine(beta, this.c, 1 - beta, this.c0);\n            this.a0 = beta * this.a + (1 - beta) * this.a0;\n            this.alpha0 = alpha;\n        };\n        Sweep.prototype.forward = function () {\n            this.a0 = this.a;\n            this.c0.setVec2(this.c);\n        };\n        /**\n         * normalize the angles in radians to be between -pi and pi.\n         */\n        Sweep.prototype.normalize = function () {\n            var a0 = math$1.mod(this.a0, -math$1.PI, +math$1.PI);\n            this.a -= this.a0 - a0;\n            this.a0 = a0;\n        };\n        Sweep.prototype.clone = function () {\n            var clone = new Sweep();\n            clone.localCenter.setVec2(this.localCenter);\n            clone.alpha0 = this.alpha0;\n            clone.a0 = this.a0;\n            clone.a = this.a;\n            clone.c0.setVec2(this.c0);\n            clone.c.setVec2(this.c);\n            return clone;\n        };\n        Sweep.prototype.set = function (that) {\n            this.localCenter.setVec2(that.localCenter);\n            this.alpha0 = that.alpha0;\n            this.a0 = that.a0;\n            this.a = that.a;\n            this.c0.setVec2(that.c0);\n            this.c.setVec2(that.c);\n        };\n        return Sweep;\n    }());\n\n    /*\n     * Planck.js\n     * The MIT License\n     * Copyright (c) 2021 Erin Catto, Ali Shakiba\n     *\n     * Permission is hereby granted, free of charge, to any person obtaining a copy\n     * of this software and associated documentation files (the \"Software\"), to deal\n     * in the Software without restriction, including without limitation the rights\n     * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n     * copies of the Software, and to permit persons to whom the Software is\n     * furnished to do so, subject to the following conditions:\n     *\n     * The above copyright notice and this permission notice shall be included in all\n     * copies or substantial portions of the Software.\n     *\n     * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n     * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n     * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n     * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n     * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n     * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n     * SOFTWARE.\n     */\n    var Velocity = /** @class */ (function () {\n        function Velocity() {\n            this.v = Vec2.zero();\n            this.w = 0;\n        }\n        return Velocity;\n    }());\n\n    /*\n     * Planck.js\n     * The MIT License\n     * Copyright (c) 2021 Erin Catto, Ali Shakiba\n     *\n     * Permission is hereby granted, free of charge, to any person obtaining a copy\n     * of this software and associated documentation files (the \"Software\"), to deal\n     * in the Software without restriction, including without limitation the rights\n     * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n     * copies of the Software, and to permit persons to whom the Software is\n     * furnished to do so, subject to the following conditions:\n     *\n     * The above copyright notice and this permission notice shall be included in all\n     * copies or substantial portions of the Software.\n     *\n     * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n     * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n     * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n     * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n     * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n     * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n     * SOFTWARE.\n     */\n    var Position = /** @class */ (function () {\n        function Position() {\n            this.c = Vec2.zero();\n            this.a = 0;\n        }\n        Position.prototype.getTransform = function (xf, p) {\n            xf.q.setAngle(this.a);\n            xf.p.setVec2(Vec2.sub(this.c, Rot.mulVec2(xf.q, p)));\n            return xf;\n        };\n        return Position;\n    }());\n\n    /*\n     * Planck.js\n     * The MIT License\n     * Copyright (c) 2021 Erin Catto, Ali Shakiba\n     *\n     * Permission is hereby granted, free of charge, to any person obtaining a copy\n     * of this software and associated documentation files (the \"Software\"), to deal\n     * in the Software without restriction, including without limitation the rights\n     * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n     * copies of the Software, and to permit persons to whom the Software is\n     * furnished to do so, subject to the following conditions:\n     *\n     * The above copyright notice and this permission notice shall be included in all\n     * copies or substantial portions of the Software.\n     *\n     * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n     * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n     * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n     * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n     * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n     * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n     * SOFTWARE.\n     */\n    /**\n     * A shape is used for collision detection. You can create a shape however you\n     * like. Shapes used for simulation in World are created automatically when a\n     * Fixture is created. Shapes may encapsulate one or more child shapes.\n     */\n    var Shape = /** @class */ (function () {\n        function Shape() {\n        }\n        /** @internal */\n        Shape.prototype._reset = function () {\n        };\n        Shape.isValid = function (obj) {\n            if (obj === null || typeof obj === 'undefined') {\n                return false;\n            }\n            return typeof obj.m_type === 'string' && typeof obj.m_radius === 'number';\n        };\n        Shape.prototype.getRadius = function () {\n            return this.m_radius;\n        };\n        /**\n         * Get the type of this shape. You can use this to down cast to the concrete\n         * shape.\n         *\n         * @return the shape type.\n         */\n        Shape.prototype.getType = function () {\n            return this.m_type;\n        };\n        return Shape;\n    }());\n\n    /*\n     * Planck.js\n     * The MIT License\n     * Copyright (c) 2021 Erin Catto, Ali Shakiba\n     *\n     * Permission is hereby granted, free of charge, to any person obtaining a copy\n     * of this software and associated documentation files (the \"Software\"), to deal\n     * in the Software without restriction, including without limitation the rights\n     * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n     * copies of the Software, and to permit persons to whom the Software is\n     * furnished to do so, subject to the following conditions:\n     *\n     * The above copyright notice and this permission notice shall be included in all\n     * copies or substantial portions of the Software.\n     *\n     * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n     * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n     * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n     * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n     * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n     * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n     * SOFTWARE.\n     */\n    var FixtureDefDefault = {\n        userData: null,\n        friction: 0.2,\n        restitution: 0.0,\n        density: 0.0,\n        isSensor: false,\n        filterGroupIndex: 0,\n        filterCategoryBits: 0x0001,\n        filterMaskBits: 0xFFFF\n    };\n    /**\n     * This proxy is used internally to connect shape children to the broad-phase.\n     */\n    var FixtureProxy = /** @class */ (function () {\n        function FixtureProxy(fixture, childIndex) {\n            this.aabb = new AABB();\n            this.fixture = fixture;\n            this.childIndex = childIndex;\n            this.proxyId;\n        }\n        return FixtureProxy;\n    }());\n    /**\n     * A fixture is used to attach a shape to a body for collision detection. A\n     * fixture inherits its transform from its parent. Fixtures hold additional\n     * non-geometric data such as friction, collision filters, etc.\n     *\n     * To create a new Fixture use {@link Body.createFixture}.\n     */\n    var Fixture = /** @class */ (function () {\n        // tslint:disable-next-line:typedef\n        /** @internal */ function Fixture(body, shape, def) {\n            if (shape.shape) {\n                def = shape;\n                shape = shape.shape;\n            }\n            else if (typeof def === 'number') {\n                def = { density: def };\n            }\n            def = options(def, FixtureDefDefault);\n            this.m_body = body;\n            this.m_friction = def.friction;\n            this.m_restitution = def.restitution;\n            this.m_density = def.density;\n            this.m_isSensor = def.isSensor;\n            this.m_filterGroupIndex = def.filterGroupIndex;\n            this.m_filterCategoryBits = def.filterCategoryBits;\n            this.m_filterMaskBits = def.filterMaskBits;\n            // TODO validate shape\n            this.m_shape = shape; // .clone();\n            this.m_next = null;\n            this.m_proxies = [];\n            this.m_proxyCount = 0;\n            var childCount = this.m_shape.getChildCount();\n            for (var i = 0; i < childCount; ++i) {\n                this.m_proxies[i] = new FixtureProxy(this, i);\n            }\n            this.m_userData = def.userData;\n        }\n        /**\n         * Re-setup fixture.\n         * @internal\n         */\n        Fixture.prototype._reset = function () {\n            var body = this.getBody();\n            var broadPhase = body.m_world.m_broadPhase;\n            this.destroyProxies(broadPhase);\n            if (this.m_shape._reset) {\n                this.m_shape._reset();\n            }\n            var childCount = this.m_shape.getChildCount();\n            for (var i = 0; i < childCount; ++i) {\n                this.m_proxies[i] = new FixtureProxy(this, i);\n            }\n            this.createProxies(broadPhase, body.m_xf);\n            body.resetMassData();\n        };\n        /** @internal */\n        Fixture.prototype._serialize = function () {\n            return {\n                friction: this.m_friction,\n                restitution: this.m_restitution,\n                density: this.m_density,\n                isSensor: this.m_isSensor,\n                filterGroupIndex: this.m_filterGroupIndex,\n                filterCategoryBits: this.m_filterCategoryBits,\n                filterMaskBits: this.m_filterMaskBits,\n                shape: this.m_shape,\n            };\n        };\n        /** @internal */\n        Fixture._deserialize = function (data, body, restore) {\n            var shape = restore(Shape, data.shape);\n            var fixture = shape && new Fixture(body, shape, data);\n            return fixture;\n        };\n        /**\n         * Get the type of the child shape. You can use this to down cast to the\n         * concrete shape.\n         */\n        Fixture.prototype.getType = function () {\n            return this.m_shape.getType();\n        };\n        /**\n         * Get the child shape. You can modify the child shape, however you should not\n         * change the number of vertices because this will crash some collision caching\n         * mechanisms. Manipulating the shape may lead to non-physical behavior.\n         */\n        Fixture.prototype.getShape = function () {\n            return this.m_shape;\n        };\n        /**\n         * A sensor shape collects contact information but never generates a collision\n         * response.\n         */\n        Fixture.prototype.isSensor = function () {\n            return this.m_isSensor;\n        };\n        /**\n         * Set if this fixture is a sensor.\n         */\n        Fixture.prototype.setSensor = function (sensor) {\n            if (sensor != this.m_isSensor) {\n                this.m_body.setAwake(true);\n                this.m_isSensor = sensor;\n            }\n        };\n        // /**\n        //  * Get the contact filtering data.\n        //  */\n        // getFilterData() {\n        //   return this.m_filter;\n        // }\n        /**\n         * Get the user data that was assigned in the fixture definition. Use this to\n         * store your application specific data.\n         */\n        Fixture.prototype.getUserData = function () {\n            return this.m_userData;\n        };\n        /**\n         * Set the user data. Use this to store your application specific data.\n         */\n        Fixture.prototype.setUserData = function (data) {\n            this.m_userData = data;\n        };\n        /**\n         * Get the parent body of this fixture. This is null if the fixture is not\n         * attached.\n         */\n        Fixture.prototype.getBody = function () {\n            return this.m_body;\n        };\n        /**\n         * Get the next fixture in the parent body's fixture list.\n         */\n        Fixture.prototype.getNext = function () {\n            return this.m_next;\n        };\n        /**\n         * Get the density of this fixture.\n         */\n        Fixture.prototype.getDensity = function () {\n            return this.m_density;\n        };\n        /**\n         * Set the density of this fixture. This will _not_ automatically adjust the\n         * mass of the body. You must call Body.resetMassData to update the body's mass.\n         */\n        Fixture.prototype.setDensity = function (density) {\n            this.m_density = density;\n        };\n        /**\n         * Get the coefficient of friction, usually in the range [0,1].\n         */\n        Fixture.prototype.getFriction = function () {\n            return this.m_friction;\n        };\n        /**\n         * Set the coefficient of friction. This will not change the friction of\n         * existing contacts.\n         */\n        Fixture.prototype.setFriction = function (friction) {\n            this.m_friction = friction;\n        };\n        /**\n         * Get the coefficient of restitution.\n         */\n        Fixture.prototype.getRestitution = function () {\n            return this.m_restitution;\n        };\n        /**\n         * Set the coefficient of restitution. This will not change the restitution of\n         * existing contacts.\n         */\n        Fixture.prototype.setRestitution = function (restitution) {\n            this.m_restitution = restitution;\n        };\n        /**\n         * Test a point in world coordinates for containment in this fixture.\n         */\n        Fixture.prototype.testPoint = function (p) {\n            return this.m_shape.testPoint(this.m_body.getTransform(), p);\n        };\n        /**\n         * Cast a ray against this shape.\n         */\n        Fixture.prototype.rayCast = function (output, input, childIndex) {\n            return this.m_shape.rayCast(output, input, this.m_body.getTransform(), childIndex);\n        };\n        /**\n         * Get the mass data for this fixture. The mass data is based on the density and\n         * the shape. The rotational inertia is about the shape's origin. This operation\n         * may be expensive.\n         */\n        Fixture.prototype.getMassData = function (massData) {\n            this.m_shape.computeMass(massData, this.m_density);\n        };\n        /**\n         * Get the fixture's AABB. This AABB may be enlarge and/or stale. If you need a\n         * more accurate AABB, compute it using the shape and the body transform.\n         */\n        Fixture.prototype.getAABB = function (childIndex) {\n            return this.m_proxies[childIndex].aabb;\n        };\n        /**\n         * These support body activation/deactivation.\n         */\n        Fixture.prototype.createProxies = function (broadPhase, xf) {\n            // Create proxies in the broad-phase.\n            this.m_proxyCount = this.m_shape.getChildCount();\n            for (var i = 0; i < this.m_proxyCount; ++i) {\n                var proxy = this.m_proxies[i];\n                this.m_shape.computeAABB(proxy.aabb, xf, i);\n                proxy.proxyId = broadPhase.createProxy(proxy.aabb, proxy);\n            }\n        };\n        Fixture.prototype.destroyProxies = function (broadPhase) {\n            // Destroy proxies in the broad-phase.\n            for (var i = 0; i < this.m_proxyCount; ++i) {\n                var proxy = this.m_proxies[i];\n                broadPhase.destroyProxy(proxy.proxyId);\n                proxy.proxyId = null;\n            }\n            this.m_proxyCount = 0;\n        };\n        /**\n         * Updates this fixture proxy in broad-phase (with combined AABB of current and\n         * next transformation).\n         */\n        Fixture.prototype.synchronize = function (broadPhase, xf1, xf2) {\n            for (var i = 0; i < this.m_proxyCount; ++i) {\n                var proxy = this.m_proxies[i];\n                // Compute an AABB that covers the swept shape (may miss some rotation\n                // effect).\n                var aabb1 = new AABB();\n                var aabb2 = new AABB();\n                this.m_shape.computeAABB(aabb1, xf1, proxy.childIndex);\n                this.m_shape.computeAABB(aabb2, xf2, proxy.childIndex);\n                proxy.aabb.combine(aabb1, aabb2);\n                var displacement = Vec2.sub(xf2.p, xf1.p);\n                broadPhase.moveProxy(proxy.proxyId, proxy.aabb, displacement);\n            }\n        };\n        /**\n         * Set the contact filtering data. This will not update contacts until the next\n         * time step when either parent body is active and awake. This automatically\n         * calls refilter.\n         */\n        Fixture.prototype.setFilterData = function (filter) {\n            this.m_filterGroupIndex = filter.groupIndex;\n            this.m_filterCategoryBits = filter.categoryBits;\n            this.m_filterMaskBits = filter.maskBits;\n            this.refilter();\n        };\n        Fixture.prototype.getFilterGroupIndex = function () {\n            return this.m_filterGroupIndex;\n        };\n        Fixture.prototype.setFilterGroupIndex = function (groupIndex) {\n            this.m_filterGroupIndex = groupIndex;\n        };\n        Fixture.prototype.getFilterCategoryBits = function () {\n            return this.m_filterCategoryBits;\n        };\n        Fixture.prototype.setFilterCategoryBits = function (categoryBits) {\n            this.m_filterCategoryBits = categoryBits;\n        };\n        Fixture.prototype.getFilterMaskBits = function () {\n            return this.m_filterMaskBits;\n        };\n        Fixture.prototype.setFilterMaskBits = function (maskBits) {\n            this.m_filterMaskBits = maskBits;\n        };\n        /**\n         * Call this if you want to establish collision that was previously disabled by\n         * ContactFilter.\n         */\n        Fixture.prototype.refilter = function () {\n            if (this.m_body == null) {\n                return;\n            }\n            // Flag associated contacts for filtering.\n            var edge = this.m_body.getContactList();\n            while (edge) {\n                var contact = edge.contact;\n                var fixtureA = contact.getFixtureA();\n                var fixtureB = contact.getFixtureB();\n                if (fixtureA == this || fixtureB == this) {\n                    contact.flagForFiltering();\n                }\n                edge = edge.next;\n            }\n            var world = this.m_body.getWorld();\n            if (world == null) {\n                return;\n            }\n            // Touch each proxy so that new pairs may be created\n            var broadPhase = world.m_broadPhase;\n            for (var i = 0; i < this.m_proxyCount; ++i) {\n                broadPhase.touchProxy(this.m_proxies[i].proxyId);\n            }\n        };\n        /**\n         * Implement this method to provide collision filtering, if you want finer\n         * control over contact creation.\n         *\n         * Return true if contact calculations should be performed between these two\n         * fixtures.\n         *\n         * Warning: for performance reasons this is only called when the AABBs begin to\n         * overlap.\n         */\n        Fixture.prototype.shouldCollide = function (that) {\n            if (that.m_filterGroupIndex === this.m_filterGroupIndex && that.m_filterGroupIndex !== 0) {\n                return that.m_filterGroupIndex > 0;\n            }\n            var collideA = (that.m_filterMaskBits & this.m_filterCategoryBits) !== 0;\n            var collideB = (that.m_filterCategoryBits & this.m_filterMaskBits) !== 0;\n            var collide = collideA && collideB;\n            return collide;\n        };\n        return Fixture;\n    }());\n\n    /*\n     * Planck.js\n     * The MIT License\n     * Copyright (c) 2021 Erin Catto, Ali Shakiba\n     *\n     * Permission is hereby granted, free of charge, to any person obtaining a copy\n     * of this software and associated documentation files (the \"Software\"), to deal\n     * in the Software without restriction, including without limitation the rights\n     * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n     * copies of the Software, and to permit persons to whom the Software is\n     * furnished to do so, subject to the following conditions:\n     *\n     * The above copyright notice and this permission notice shall be included in all\n     * copies or substantial portions of the Software.\n     *\n     * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n     * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n     * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n     * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n     * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n     * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n     * SOFTWARE.\n     */\n    var STATIC = 'static';\n    var KINEMATIC = 'kinematic';\n    var DYNAMIC = 'dynamic';\n    var BodyDefDefault = {\n        type: STATIC,\n        position: Vec2.zero(),\n        angle: 0.0,\n        linearVelocity: Vec2.zero(),\n        angularVelocity: 0.0,\n        linearDamping: 0.0,\n        angularDamping: 0.0,\n        fixedRotation: false,\n        bullet: false,\n        gravityScale: 1.0,\n        allowSleep: true,\n        awake: true,\n        active: true,\n        userData: null\n    };\n    /**\n     * MassData This holds the mass data computed for a shape.\n     */\n    var MassData = /** @class */ (function () {\n        function MassData() {\n            /** The mass of the shape, usually in kilograms. */\n            this.mass = 0;\n            /** The position of the shape's centroid relative to the shape's origin. */\n            this.center = Vec2.zero();\n            /** The rotational inertia of the shape about the local origin. */\n            this.I = 0;\n        }\n        return MassData;\n    }());\n    /**\n     * A rigid body composed of one or more fixtures.\n     *\n     * To create a new Body use {@link World.createBody}.\n     */\n    var Body = /** @class */ (function () {\n        /** @internal */\n        function Body(world, def) {\n            def = options(def, BodyDefDefault);\n            this.m_world = world;\n            this.m_awakeFlag = def.awake;\n            this.m_autoSleepFlag = def.allowSleep;\n            this.m_bulletFlag = def.bullet;\n            this.m_fixedRotationFlag = def.fixedRotation;\n            this.m_activeFlag = def.active;\n            this.m_islandFlag = false;\n            this.m_toiFlag = false;\n            this.m_userData = def.userData;\n            this.m_type = def.type;\n            if (this.m_type == DYNAMIC) {\n                this.m_mass = 1.0;\n                this.m_invMass = 1.0;\n            }\n            else {\n                this.m_mass = 0.0;\n                this.m_invMass = 0.0;\n            }\n            // Rotational inertia about the center of mass.\n            this.m_I = 0.0;\n            this.m_invI = 0.0;\n            // the body origin transform\n            this.m_xf = Transform.identity();\n            this.m_xf.p = Vec2.clone(def.position);\n            this.m_xf.q.setAngle(def.angle);\n            // the swept motion for CCD\n            this.m_sweep = new Sweep();\n            this.m_sweep.setTransform(this.m_xf);\n            // position and velocity correction\n            this.c_velocity = new Velocity();\n            this.c_position = new Position();\n            this.m_force = Vec2.zero();\n            this.m_torque = 0.0;\n            this.m_linearVelocity = Vec2.clone(def.linearVelocity);\n            this.m_angularVelocity = def.angularVelocity;\n            this.m_linearDamping = def.linearDamping;\n            this.m_angularDamping = def.angularDamping;\n            this.m_gravityScale = def.gravityScale;\n            this.m_sleepTime = 0.0;\n            this.m_jointList = null;\n            this.m_contactList = null;\n            this.m_fixtureList = null;\n            this.m_prev = null;\n            this.m_next = null;\n            this.m_destroyed = false;\n        }\n        /** @internal */\n        Body.prototype._serialize = function () {\n            var fixtures = [];\n            for (var f = this.m_fixtureList; f; f = f.m_next) {\n                fixtures.push(f);\n            }\n            return {\n                type: this.m_type,\n                bullet: this.m_bulletFlag,\n                position: this.m_xf.p,\n                angle: this.m_xf.q.getAngle(),\n                linearVelocity: this.m_linearVelocity,\n                angularVelocity: this.m_angularVelocity,\n                fixtures: fixtures,\n            };\n        };\n        /** @internal */\n        Body._deserialize = function (data, world, restore) {\n            var body = new Body(world, data);\n            if (data.fixtures) {\n                for (var i = data.fixtures.length - 1; i >= 0; i--) {\n                    var fixture = restore(Fixture, data.fixtures[i], body);\n                    body._addFixture(fixture);\n                }\n            }\n            return body;\n        };\n        Body.prototype.isWorldLocked = function () {\n            return this.m_world && this.m_world.isLocked() ? true : false;\n        };\n        Body.prototype.getWorld = function () {\n            return this.m_world;\n        };\n        Body.prototype.getNext = function () {\n            return this.m_next;\n        };\n        Body.prototype.setUserData = function (data) {\n            this.m_userData = data;\n        };\n        Body.prototype.getUserData = function () {\n            return this.m_userData;\n        };\n        Body.prototype.getFixtureList = function () {\n            return this.m_fixtureList;\n        };\n        Body.prototype.getJointList = function () {\n            return this.m_jointList;\n        };\n        /**\n         * Warning: this list changes during the time step and you may miss some\n         * collisions if you don't use ContactListener.\n         */\n        Body.prototype.getContactList = function () {\n            return this.m_contactList;\n        };\n        Body.prototype.isStatic = function () {\n            return this.m_type == STATIC;\n        };\n        Body.prototype.isDynamic = function () {\n            return this.m_type == DYNAMIC;\n        };\n        Body.prototype.isKinematic = function () {\n            return this.m_type == KINEMATIC;\n        };\n        /**\n         * This will alter the mass and velocity.\n         */\n        Body.prototype.setStatic = function () {\n            this.setType(STATIC);\n            return this;\n        };\n        Body.prototype.setDynamic = function () {\n            this.setType(DYNAMIC);\n            return this;\n        };\n        Body.prototype.setKinematic = function () {\n            this.setType(KINEMATIC);\n            return this;\n        };\n        /**\n         * @internal\n         */\n        Body.prototype.getType = function () {\n            return this.m_type;\n        };\n        /**\n         * @internal\n         */\n        Body.prototype.setType = function (type) {\n            if (this.isWorldLocked() == true) {\n                return;\n            }\n            if (this.m_type == type) {\n                return;\n            }\n            this.m_type = type;\n            this.resetMassData();\n            if (this.m_type == STATIC) {\n                this.m_linearVelocity.setZero();\n                this.m_angularVelocity = 0.0;\n                this.m_sweep.forward();\n                this.synchronizeFixtures();\n            }\n            this.setAwake(true);\n            this.m_force.setZero();\n            this.m_torque = 0.0;\n            // Delete the attached contacts.\n            var ce = this.m_contactList;\n            while (ce) {\n                var ce0 = ce;\n                ce = ce.next;\n                this.m_world.destroyContact(ce0.contact);\n            }\n            this.m_contactList = null;\n            // Touch the proxies so that new contacts will be created (when appropriate)\n            var broadPhase = this.m_world.m_broadPhase;\n            for (var f = this.m_fixtureList; f; f = f.m_next) {\n                var proxyCount = f.m_proxyCount;\n                for (var i = 0; i < proxyCount; ++i) {\n                    broadPhase.touchProxy(f.m_proxies[i].proxyId);\n                }\n            }\n        };\n        Body.prototype.isBullet = function () {\n            return this.m_bulletFlag;\n        };\n        /**\n         * Should this body be treated like a bullet for continuous collision detection?\n         */\n        Body.prototype.setBullet = function (flag) {\n            this.m_bulletFlag = !!flag;\n        };\n        Body.prototype.isSleepingAllowed = function () {\n            return this.m_autoSleepFlag;\n        };\n        Body.prototype.setSleepingAllowed = function (flag) {\n            this.m_autoSleepFlag = !!flag;\n            if (this.m_autoSleepFlag == false) {\n                this.setAwake(true);\n            }\n        };\n        Body.prototype.isAwake = function () {\n            return this.m_awakeFlag;\n        };\n        /**\n         * Set the sleep state of the body. A sleeping body has very low CPU cost.\n         *\n         * @param flag Set to true to wake the body, false to put it to sleep.\n         */\n        Body.prototype.setAwake = function (flag) {\n            if (flag) {\n                if (this.m_awakeFlag == false) {\n                    this.m_awakeFlag = true;\n                    this.m_sleepTime = 0.0;\n                }\n            }\n            else {\n                this.m_awakeFlag = false;\n                this.m_sleepTime = 0.0;\n                this.m_linearVelocity.setZero();\n                this.m_angularVelocity = 0.0;\n                this.m_force.setZero();\n                this.m_torque = 0.0;\n            }\n        };\n        Body.prototype.isActive = function () {\n            return this.m_activeFlag;\n        };\n        /**\n         * Set the active state of the body. An inactive body is not simulated and\n         * cannot be collided with or woken up. If you pass a flag of true, all fixtures\n         * will be added to the broad-phase. If you pass a flag of false, all fixtures\n         * will be removed from the broad-phase and all contacts will be destroyed.\n         * Fixtures and joints are otherwise unaffected.\n         *\n         * You may continue to create/destroy fixtures and joints on inactive bodies.\n         * Fixtures on an inactive body are implicitly inactive and will not participate\n         * in collisions, ray-casts, or queries. Joints connected to an inactive body\n         * are implicitly inactive. An inactive body is still owned by a World object\n         * and remains\n         */\n        Body.prototype.setActive = function (flag) {\n            if (flag == this.m_activeFlag) {\n                return;\n            }\n            this.m_activeFlag = !!flag;\n            if (this.m_activeFlag) {\n                // Create all proxies.\n                var broadPhase = this.m_world.m_broadPhase;\n                for (var f = this.m_fixtureList; f; f = f.m_next) {\n                    f.createProxies(broadPhase, this.m_xf);\n                }\n                // Contacts are created the next time step.\n            }\n            else {\n                // Destroy all proxies.\n                var broadPhase = this.m_world.m_broadPhase;\n                for (var f = this.m_fixtureList; f; f = f.m_next) {\n                    f.destroyProxies(broadPhase);\n                }\n                // Destroy the attached contacts.\n                var ce = this.m_contactList;\n                while (ce) {\n                    var ce0 = ce;\n                    ce = ce.next;\n                    this.m_world.destroyContact(ce0.contact);\n                }\n                this.m_contactList = null;\n            }\n        };\n        Body.prototype.isFixedRotation = function () {\n            return this.m_fixedRotationFlag;\n        };\n        /**\n         * Set this body to have fixed rotation. This causes the mass to be reset.\n         */\n        Body.prototype.setFixedRotation = function (flag) {\n            if (this.m_fixedRotationFlag == flag) {\n                return;\n            }\n            this.m_fixedRotationFlag = !!flag;\n            this.m_angularVelocity = 0.0;\n            this.resetMassData();\n        };\n        /**\n         * Get the world transform for the body's origin.\n         */\n        Body.prototype.getTransform = function () {\n            return this.m_xf;\n        };\n        /**\n         * Set the position of the body's origin and rotation. Manipulating a body's\n         * transform may cause non-physical behavior. Note: contacts are updated on the\n         * next call to World.step.\n         *\n         * @param position The world position of the body's local origin.\n         * @param angle The world rotation in radians.\n         */\n        Body.prototype.setTransform = function (position, angle) {\n            if (this.isWorldLocked() == true) {\n                return;\n            }\n            this.m_xf.setNum(position, angle);\n            this.m_sweep.setTransform(this.m_xf);\n            var broadPhase = this.m_world.m_broadPhase;\n            for (var f = this.m_fixtureList; f; f = f.m_next) {\n                f.synchronize(broadPhase, this.m_xf, this.m_xf);\n            }\n        };\n        Body.prototype.synchronizeTransform = function () {\n            this.m_sweep.getTransform(this.m_xf, 1);\n        };\n        /**\n         * Update fixtures in broad-phase.\n         */\n        Body.prototype.synchronizeFixtures = function () {\n            var xf = Transform.identity();\n            this.m_sweep.getTransform(xf, 0);\n            var broadPhase = this.m_world.m_broadPhase;\n            for (var f = this.m_fixtureList; f; f = f.m_next) {\n                f.synchronize(broadPhase, xf, this.m_xf);\n            }\n        };\n        /**\n         * Used in TOI.\n         */\n        Body.prototype.advance = function (alpha) {\n            // Advance to the new safe time. This doesn't sync the broad-phase.\n            this.m_sweep.advance(alpha);\n            this.m_sweep.c.setVec2(this.m_sweep.c0);\n            this.m_sweep.a = this.m_sweep.a0;\n            this.m_sweep.getTransform(this.m_xf, 1);\n        };\n        /**\n         * Get the world position for the body's origin.\n         */\n        Body.prototype.getPosition = function () {\n            return this.m_xf.p;\n        };\n        Body.prototype.setPosition = function (p) {\n            this.setTransform(p, this.m_sweep.a);\n        };\n        /**\n         * Get the current world rotation angle in radians.\n         */\n        Body.prototype.getAngle = function () {\n            return this.m_sweep.a;\n        };\n        Body.prototype.setAngle = function (angle) {\n            this.setTransform(this.m_xf.p, angle);\n        };\n        /**\n         * Get the world position of the center of mass.\n         */\n        Body.prototype.getWorldCenter = function () {\n            return this.m_sweep.c;\n        };\n        /**\n         * Get the local position of the center of mass.\n         */\n        Body.prototype.getLocalCenter = function () {\n            return this.m_sweep.localCenter;\n        };\n        /**\n         * Get the linear velocity of the center of mass.\n         *\n         * @return the linear velocity of the center of mass.\n         */\n        Body.prototype.getLinearVelocity = function () {\n            return this.m_linearVelocity;\n        };\n        /**\n         * Get the world linear velocity of a world point attached to this body.\n         *\n         * @param worldPoint A point in world coordinates.\n         */\n        Body.prototype.getLinearVelocityFromWorldPoint = function (worldPoint) {\n            var localCenter = Vec2.sub(worldPoint, this.m_sweep.c);\n            return Vec2.add(this.m_linearVelocity, Vec2.crossNumVec2(this.m_angularVelocity, localCenter));\n        };\n        /**\n         * Get the world velocity of a local point.\n         *\n         * @param localPoint A point in local coordinates.\n         */\n        Body.prototype.getLinearVelocityFromLocalPoint = function (localPoint) {\n            return this.getLinearVelocityFromWorldPoint(this.getWorldPoint(localPoint));\n        };\n        /**\n         * Set the linear velocity of the center of mass.\n         *\n         * @param v The new linear velocity of the center of mass.\n         */\n        Body.prototype.setLinearVelocity = function (v) {\n            if (this.m_type == STATIC) {\n                return;\n            }\n            if (Vec2.dot(v, v) > 0.0) {\n                this.setAwake(true);\n            }\n            this.m_linearVelocity.setVec2(v);\n        };\n        /**\n         * Get the angular velocity.\n         *\n         * @returns the angular velocity in radians/second.\n         */\n        Body.prototype.getAngularVelocity = function () {\n            return this.m_angularVelocity;\n        };\n        /**\n         * Set the angular velocity.\n         *\n         * @param omega The new angular velocity in radians/second.\n         */\n        Body.prototype.setAngularVelocity = function (w) {\n            if (this.m_type == STATIC) {\n                return;\n            }\n            if (w * w > 0.0) {\n                this.setAwake(true);\n            }\n            this.m_angularVelocity = w;\n        };\n        Body.prototype.getLinearDamping = function () {\n            return this.m_linearDamping;\n        };\n        Body.prototype.setLinearDamping = function (linearDamping) {\n            this.m_linearDamping = linearDamping;\n        };\n        Body.prototype.getAngularDamping = function () {\n            return this.m_angularDamping;\n        };\n        Body.prototype.setAngularDamping = function (angularDamping) {\n            this.m_angularDamping = angularDamping;\n        };\n        Body.prototype.getGravityScale = function () {\n            return this.m_gravityScale;\n        };\n        /**\n         * Scale the gravity applied to this body.\n         */\n        Body.prototype.setGravityScale = function (scale) {\n            this.m_gravityScale = scale;\n        };\n        /**\n         * Get the total mass of the body.\n         *\n         * @returns The mass, usually in kilograms (kg).\n         */\n        Body.prototype.getMass = function () {\n            return this.m_mass;\n        };\n        /**\n         * Get the rotational inertia of the body about the local origin.\n         *\n         * @return the rotational inertia, usually in kg-m^2.\n         */\n        Body.prototype.getInertia = function () {\n            return this.m_I + this.m_mass\n                * Vec2.dot(this.m_sweep.localCenter, this.m_sweep.localCenter);\n        };\n        /**\n         * Copy the mass data of the body to data.\n         */\n        Body.prototype.getMassData = function (data) {\n            data.mass = this.m_mass;\n            data.I = this.getInertia();\n            data.center.setVec2(this.m_sweep.localCenter);\n        };\n        /**\n         * This resets the mass properties to the sum of the mass properties of the\n         * fixtures. This normally does not need to be called unless you called\n         * SetMassData to override the mass and you later want to reset the mass.\n         */\n        Body.prototype.resetMassData = function () {\n            // Compute mass data from shapes. Each shape has its own density.\n            this.m_mass = 0.0;\n            this.m_invMass = 0.0;\n            this.m_I = 0.0;\n            this.m_invI = 0.0;\n            this.m_sweep.localCenter.setZero();\n            // Static and kinematic bodies have zero mass.\n            if (this.isStatic() || this.isKinematic()) {\n                this.m_sweep.c0.setVec2(this.m_xf.p);\n                this.m_sweep.c.setVec2(this.m_xf.p);\n                this.m_sweep.a0 = this.m_sweep.a;\n                return;\n            }\n            // Accumulate mass over all fixtures.\n            var localCenter = Vec2.zero();\n            for (var f = this.m_fixtureList; f; f = f.m_next) {\n                if (f.m_density == 0.0) {\n                    continue;\n                }\n                var massData = new MassData();\n                f.getMassData(massData);\n                this.m_mass += massData.mass;\n                localCenter.addMul(massData.mass, massData.center);\n                this.m_I += massData.I;\n            }\n            // Compute center of mass.\n            if (this.m_mass > 0.0) {\n                this.m_invMass = 1.0 / this.m_mass;\n                localCenter.mul(this.m_invMass);\n            }\n            else {\n                // Force all dynamic bodies to have a positive mass.\n                this.m_mass = 1.0;\n                this.m_invMass = 1.0;\n            }\n            if (this.m_I > 0.0 && this.m_fixedRotationFlag == false) {\n                // Center the inertia about the center of mass.\n                this.m_I -= this.m_mass * Vec2.dot(localCenter, localCenter);\n                this.m_invI = 1.0 / this.m_I;\n            }\n            else {\n                this.m_I = 0.0;\n                this.m_invI = 0.0;\n            }\n            // Move center of mass.\n            var oldCenter = Vec2.clone(this.m_sweep.c);\n            this.m_sweep.setLocalCenter(localCenter, this.m_xf);\n            // Update center of mass velocity.\n            this.m_linearVelocity.add(Vec2.crossNumVec2(this.m_angularVelocity, Vec2.sub(this.m_sweep.c, oldCenter)));\n        };\n        /**\n         * Set the mass properties to override the mass properties of the fixtures. Note\n         * that this changes the center of mass position. Note that creating or\n         * destroying fixtures can also alter the mass. This function has no effect if\n         * the body isn't dynamic.\n         *\n         * @param massData The mass properties.\n         */\n        Body.prototype.setMassData = function (massData) {\n            if (this.isWorldLocked() == true) {\n                return;\n            }\n            if (this.m_type != DYNAMIC) {\n                return;\n            }\n            this.m_invMass = 0.0;\n            this.m_I = 0.0;\n            this.m_invI = 0.0;\n            this.m_mass = massData.mass;\n            if (this.m_mass <= 0.0) {\n                this.m_mass = 1.0;\n            }\n            this.m_invMass = 1.0 / this.m_mass;\n            if (massData.I > 0.0 && this.m_fixedRotationFlag == false) {\n                this.m_I = massData.I - this.m_mass\n                    * Vec2.dot(massData.center, massData.center);\n                this.m_invI = 1.0 / this.m_I;\n            }\n            // Move center of mass.\n            var oldCenter = Vec2.clone(this.m_sweep.c);\n            this.m_sweep.setLocalCenter(massData.center, this.m_xf);\n            // Update center of mass velocity.\n            this.m_linearVelocity.add(Vec2.crossNumVec2(this.m_angularVelocity, Vec2.sub(this.m_sweep.c, oldCenter)));\n        };\n        /**\n         * Apply a force at a world point. If the force is not applied at the center of\n         * mass, it will generate a torque and affect the angular velocity. This wakes\n         * up the body.\n         *\n         * @param force The world force vector, usually in Newtons (N).\n         * @param point The world position of the point of application.\n         * @param wake Also wake up the body\n         */\n        Body.prototype.applyForce = function (force, point, wake) {\n            if (wake === void 0) { wake = true; }\n            if (this.m_type != DYNAMIC) {\n                return;\n            }\n            if (wake && this.m_awakeFlag == false) {\n                this.setAwake(true);\n            }\n            // Don't accumulate a force if the body is sleeping.\n            if (this.m_awakeFlag) {\n                this.m_force.add(force);\n                this.m_torque += Vec2.crossVec2Vec2(Vec2.sub(point, this.m_sweep.c), force);\n            }\n        };\n        /**\n         * Apply a force to the center of mass. This wakes up the body.\n         *\n         * @param force The world force vector, usually in Newtons (N).\n         * @param wake Also wake up the body\n         */\n        Body.prototype.applyForceToCenter = function (force, wake) {\n            if (wake === void 0) { wake = true; }\n            if (this.m_type != DYNAMIC) {\n                return;\n            }\n            if (wake && this.m_awakeFlag == false) {\n                this.setAwake(true);\n            }\n            // Don't accumulate a force if the body is sleeping\n            if (this.m_awakeFlag) {\n                this.m_force.add(force);\n            }\n        };\n        /**\n         * Apply a torque. This affects the angular velocity without affecting the\n         * linear velocity of the center of mass. This wakes up the body.\n         *\n         * @param torque About the z-axis (out of the screen), usually in N-m.\n         * @param wake Also wake up the body\n         */\n        Body.prototype.applyTorque = function (torque, wake) {\n            if (wake === void 0) { wake = true; }\n            if (this.m_type != DYNAMIC) {\n                return;\n            }\n            if (wake && this.m_awakeFlag == false) {\n                this.setAwake(true);\n            }\n            // Don't accumulate a force if the body is sleeping\n            if (this.m_awakeFlag) {\n                this.m_torque += torque;\n            }\n        };\n        /**\n         * Apply an impulse at a point. This immediately modifies the velocity. It also\n         * modifies the angular velocity if the point of application is not at the\n         * center of mass. This wakes up the body.\n         *\n         * @param impulse The world impulse vector, usually in N-seconds or kg-m/s.\n         * @param point The world position of the point of application.\n         * @param wake Also wake up the body\n         */\n        Body.prototype.applyLinearImpulse = function (impulse, point, wake) {\n            if (wake === void 0) { wake = true; }\n            if (this.m_type != DYNAMIC) {\n                return;\n            }\n            if (wake && this.m_awakeFlag == false) {\n                this.setAwake(true);\n            }\n            // Don't accumulate velocity if the body is sleeping\n            if (this.m_awakeFlag) {\n                this.m_linearVelocity.addMul(this.m_invMass, impulse);\n                this.m_angularVelocity += this.m_invI * Vec2.crossVec2Vec2(Vec2.sub(point, this.m_sweep.c), impulse);\n            }\n        };\n        /**\n         * Apply an angular impulse.\n         *\n         * @param impulse The angular impulse in units of kg*m*m/s\n         * @param wake Also wake up the body\n         */\n        Body.prototype.applyAngularImpulse = function (impulse, wake) {\n            if (wake === void 0) { wake = true; }\n            if (this.m_type != DYNAMIC) {\n                return;\n            }\n            if (wake && this.m_awakeFlag == false) {\n                this.setAwake(true);\n            }\n            // Don't accumulate velocity if the body is sleeping\n            if (this.m_awakeFlag) {\n                this.m_angularVelocity += this.m_invI * impulse;\n            }\n        };\n        /**\n         * This is used to prevent connected bodies (by joints) from colliding,\n         * depending on the joint's collideConnected flag.\n         */\n        Body.prototype.shouldCollide = function (that) {\n            // At least one body should be dynamic.\n            if (this.m_type != DYNAMIC && that.m_type != DYNAMIC) {\n                return false;\n            }\n            // Does a joint prevent collision?\n            for (var jn = this.m_jointList; jn; jn = jn.next) {\n                if (jn.other == that) {\n                    if (jn.joint.m_collideConnected == false) {\n                        return false;\n                    }\n                }\n            }\n            return true;\n        };\n        /**\n         * @internal Used for deserialize.\n         */\n        Body.prototype._addFixture = function (fixture) {\n            if (this.isWorldLocked() == true) {\n                return null;\n            }\n            if (this.m_activeFlag) {\n                var broadPhase = this.m_world.m_broadPhase;\n                fixture.createProxies(broadPhase, this.m_xf);\n            }\n            fixture.m_next = this.m_fixtureList;\n            this.m_fixtureList = fixture;\n            // Adjust mass properties if needed.\n            if (fixture.m_density > 0.0) {\n                this.resetMassData();\n            }\n            // Let the world know we have a new fixture. This will cause new contacts\n            // to be created at the beginning of the next time step.\n            this.m_world.m_newFixture = true;\n            return fixture;\n        };\n        // tslint:disable-next-line:typedef\n        Body.prototype.createFixture = function (shape, fixdef) {\n            if (this.isWorldLocked() == true) {\n                return null;\n            }\n            var fixture = new Fixture(this, shape, fixdef);\n            this._addFixture(fixture);\n            return fixture;\n        };\n        /**\n         * Destroy a fixture. This removes the fixture from the broad-phase and destroys\n         * all contacts associated with this fixture. This will automatically adjust the\n         * mass of the body if the body is dynamic and the fixture has positive density.\n         * All fixtures attached to a body are implicitly destroyed when the body is\n         * destroyed.\n         *\n         * Warning: This function is locked during callbacks.\n         *\n         * @param fixture The fixture to be removed.\n         */\n        Body.prototype.destroyFixture = function (fixture) {\n            if (this.isWorldLocked() == true) {\n                return;\n            }\n            if (this.m_fixtureList === fixture) {\n                this.m_fixtureList = fixture.m_next;\n            }\n            else {\n                var node = this.m_fixtureList;\n                while (node != null) {\n                    if (node.m_next === fixture) {\n                        node.m_next = fixture.m_next;\n                        break;\n                    }\n                    node = node.m_next;\n                }\n            }\n            // Destroy any contacts associated with the fixture.\n            var edge = this.m_contactList;\n            while (edge) {\n                var c = edge.contact;\n                edge = edge.next;\n                var fixtureA = c.getFixtureA();\n                var fixtureB = c.getFixtureB();\n                if (fixture == fixtureA || fixture == fixtureB) {\n                    // This destroys the contact and removes it from\n                    // this body's contact list.\n                    this.m_world.destroyContact(c);\n                }\n            }\n            if (this.m_activeFlag) {\n                var broadPhase = this.m_world.m_broadPhase;\n                fixture.destroyProxies(broadPhase);\n            }\n            fixture.m_body = null;\n            fixture.m_next = null;\n            this.m_world.publish('remove-fixture', fixture);\n            // Reset the mass data.\n            this.resetMassData();\n        };\n        /**\n         * Get the corresponding world point of a local point.\n         */\n        Body.prototype.getWorldPoint = function (localPoint) {\n            return Transform.mulVec2(this.m_xf, localPoint);\n        };\n        /**\n         * Get the corresponding world vector of a local vector.\n         */\n        Body.prototype.getWorldVector = function (localVector) {\n            return Rot.mulVec2(this.m_xf.q, localVector);\n        };\n        /**\n         * Gets the corresponding local point of a world point.\n         */\n        Body.prototype.getLocalPoint = function (worldPoint) {\n            return Transform.mulTVec2(this.m_xf, worldPoint);\n        };\n        /**\n         * Gets the corresponding local vector of a world vector.\n         */\n        Body.prototype.getLocalVector = function (worldVector) {\n            return Rot.mulTVec2(this.m_xf.q, worldVector);\n        };\n        /**\n         * A static body does not move under simulation and behaves as if it has infinite mass.\n         * Internally, zero is stored for the mass and the inverse mass.\n         * Static bodies can be moved manually by the user.\n         * A static body has zero velocity.\n         * Static bodies do not collide with other static or kinematic bodies.\n         */\n        Body.STATIC = 'static';\n        /**\n         * A kinematic body moves under simulation according to its velocity.\n         * Kinematic bodies do not respond to forces.\n         * They can be moved manually by the user, but normally a kinematic body is moved by setting its velocity.\n         * A kinematic body behaves as if it has infinite mass, however, zero is stored for the mass and the inverse mass.\n         * Kinematic bodies do not collide with other kinematic or static bodies.\n         */\n        Body.KINEMATIC = 'kinematic';\n        /**\n         * A dynamic body is fully simulated.\n         * They can be moved manually by the user, but normally they move according to forces.\n         * A dynamic body can collide with all body types.\n         * A dynamic body always has finite, non-zero mass.\n         * If you try to set the mass of a dynamic body to zero, it will automatically acquire a mass of one kilogram and it won't rotate.\n         */\n        Body.DYNAMIC = 'dynamic';\n        return Body;\n    }());\n\n    /*\n     * Planck.js\n     * The MIT License\n     * Copyright (c) 2021 Erin Catto, Ali Shakiba\n     *\n     * Permission is hereby granted, free of charge, to any person obtaining a copy\n     * of this software and associated documentation files (the \"Software\"), to deal\n     * in the Software without restriction, including without limitation the rights\n     * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n     * copies of the Software, and to permit persons to whom the Software is\n     * furnished to do so, subject to the following conditions:\n     *\n     * The above copyright notice and this permission notice shall be included in all\n     * copies or substantial portions of the Software.\n     *\n     * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n     * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n     * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n     * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n     * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n     * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n     * SOFTWARE.\n     */\n    /**\n     * A 2-by-2 matrix. Stored in column-major order.\n     */\n    var Mat22 = /** @class */ (function () {\n        // tslint:disable-next-line:typedef\n        function Mat22(a, b, c, d) {\n            if (typeof a === 'object' && a !== null) {\n                this.ex = Vec2.clone(a);\n                this.ey = Vec2.clone(b);\n            }\n            else if (typeof a === 'number') {\n                this.ex = Vec2.neo(a, c);\n                this.ey = Vec2.neo(b, d);\n            }\n            else {\n                this.ex = Vec2.zero();\n                this.ey = Vec2.zero();\n            }\n        }\n        /** @internal */\n        Mat22.prototype.toString = function () {\n            return JSON.stringify(this);\n        };\n        Mat22.isValid = function (obj) {\n            if (obj === null || typeof obj === 'undefined') {\n                return false;\n            }\n            return Vec2.isValid(obj.ex) && Vec2.isValid(obj.ey);\n        };\n        Mat22.assert = function (o) {\n            return;\n        };\n        // tslint:disable-next-line:typedef\n        Mat22.prototype.set = function (a, b, c, d) {\n            if (typeof a === 'number' && typeof b === 'number' && typeof c === 'number'\n                && typeof d === 'number') {\n                this.ex.setNum(a, c);\n                this.ey.setNum(b, d);\n            }\n            else if (typeof a === 'object' && typeof b === 'object') {\n                this.ex.setVec2(a);\n                this.ey.setVec2(b);\n            }\n            else if (typeof a === 'object') {\n                this.ex.setVec2(a.ex);\n                this.ey.setVec2(a.ey);\n            }\n            else ;\n        };\n        Mat22.prototype.setIdentity = function () {\n            this.ex.x = 1.0;\n            this.ey.x = 0.0;\n            this.ex.y = 0.0;\n            this.ey.y = 1.0;\n        };\n        Mat22.prototype.setZero = function () {\n            this.ex.x = 0.0;\n            this.ey.x = 0.0;\n            this.ex.y = 0.0;\n            this.ey.y = 0.0;\n        };\n        Mat22.prototype.getInverse = function () {\n            var a = this.ex.x;\n            var b = this.ey.x;\n            var c = this.ex.y;\n            var d = this.ey.y;\n            var det = a * d - b * c;\n            if (det !== 0.0) {\n                det = 1.0 / det;\n            }\n            var imx = new Mat22();\n            imx.ex.x = det * d;\n            imx.ey.x = -det * b;\n            imx.ex.y = -det * c;\n            imx.ey.y = det * a;\n            return imx;\n        };\n        /**\n         * Solve A * x = b, where b is a column vector. This is more efficient than\n         * computing the inverse in one-shot cases.\n         */\n        Mat22.prototype.solve = function (v) {\n            var a = this.ex.x;\n            var b = this.ey.x;\n            var c = this.ex.y;\n            var d = this.ey.y;\n            var det = a * d - b * c;\n            if (det !== 0.0) {\n                det = 1.0 / det;\n            }\n            var w = Vec2.zero();\n            w.x = det * (d * v.x - b * v.y);\n            w.y = det * (a * v.y - c * v.x);\n            return w;\n        };\n        // tslint:disable-next-line:typedef\n        Mat22.mul = function (mx, v) {\n            if (v && 'x' in v && 'y' in v) {\n                var x = mx.ex.x * v.x + mx.ey.x * v.y;\n                var y = mx.ex.y * v.x + mx.ey.y * v.y;\n                return Vec2.neo(x, y);\n            }\n            else if (v && 'ex' in v && 'ey' in v) { // Mat22\n                // return new Mat22(Vec2.mul(mx, v.ex), Vec2.mul(mx, v.ey));\n                var a = mx.ex.x * v.ex.x + mx.ey.x * v.ex.y;\n                var b = mx.ex.x * v.ey.x + mx.ey.x * v.ey.y;\n                var c = mx.ex.y * v.ex.x + mx.ey.y * v.ex.y;\n                var d = mx.ex.y * v.ey.x + mx.ey.y * v.ey.y;\n                return new Mat22(a, b, c, d);\n            }\n        };\n        Mat22.mulVec2 = function (mx, v) {\n            var x = mx.ex.x * v.x + mx.ey.x * v.y;\n            var y = mx.ex.y * v.x + mx.ey.y * v.y;\n            return Vec2.neo(x, y);\n        };\n        Mat22.mulMat22 = function (mx, v) {\n            // return new Mat22(Vec2.mul(mx, v.ex), Vec2.mul(mx, v.ey));\n            var a = mx.ex.x * v.ex.x + mx.ey.x * v.ex.y;\n            var b = mx.ex.x * v.ey.x + mx.ey.x * v.ey.y;\n            var c = mx.ex.y * v.ex.x + mx.ey.y * v.ex.y;\n            var d = mx.ex.y * v.ey.x + mx.ey.y * v.ey.y;\n            return new Mat22(a, b, c, d);\n        };\n        // tslint:disable-next-line:typedef\n        Mat22.mulT = function (mx, v) {\n            if (v && 'x' in v && 'y' in v) { // Vec2\n                return Vec2.neo(Vec2.dot(v, mx.ex), Vec2.dot(v, mx.ey));\n            }\n            else if (v && 'ex' in v && 'ey' in v) { // Mat22\n                var c1 = Vec2.neo(Vec2.dot(mx.ex, v.ex), Vec2.dot(mx.ey, v.ex));\n                var c2 = Vec2.neo(Vec2.dot(mx.ex, v.ey), Vec2.dot(mx.ey, v.ey));\n                return new Mat22(c1, c2);\n            }\n        };\n        Mat22.mulTVec2 = function (mx, v) {\n            return Vec2.neo(Vec2.dot(v, mx.ex), Vec2.dot(v, mx.ey));\n        };\n        Mat22.mulTMat22 = function (mx, v) {\n            var c1 = Vec2.neo(Vec2.dot(mx.ex, v.ex), Vec2.dot(mx.ey, v.ex));\n            var c2 = Vec2.neo(Vec2.dot(mx.ex, v.ey), Vec2.dot(mx.ey, v.ey));\n            return new Mat22(c1, c2);\n        };\n        Mat22.abs = function (mx) {\n            return new Mat22(Vec2.abs(mx.ex), Vec2.abs(mx.ey));\n        };\n        Mat22.add = function (mx1, mx2) {\n            return new Mat22(Vec2.add(mx1.ex, mx2.ex), Vec2.add(mx1.ey, mx2.ey));\n        };\n        return Mat22;\n    }());\n\n    /*\n     * Planck.js\n     * The MIT License\n     * Copyright (c) 2021 Erin Catto, Ali Shakiba\n     *\n     * Permission is hereby granted, free of charge, to any person obtaining a copy\n     * of this software and associated documentation files (the \"Software\"), to deal\n     * in the Software without restriction, including without limitation the rights\n     * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n     * copies of the Software, and to permit persons to whom the Software is\n     * furnished to do so, subject to the following conditions:\n     *\n     * The above copyright notice and this permission notice shall be included in all\n     * copies or substantial portions of the Software.\n     *\n     * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n     * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n     * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n     * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n     * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n     * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n     * SOFTWARE.\n     */\n    var ManifoldType;\n    (function (ManifoldType) {\n        ManifoldType[ManifoldType[\"e_circles\"] = 0] = \"e_circles\";\n        ManifoldType[ManifoldType[\"e_faceA\"] = 1] = \"e_faceA\";\n        ManifoldType[ManifoldType[\"e_faceB\"] = 2] = \"e_faceB\";\n    })(ManifoldType || (ManifoldType = {}));\n    var ContactFeatureType;\n    (function (ContactFeatureType) {\n        ContactFeatureType[ContactFeatureType[\"e_vertex\"] = 0] = \"e_vertex\";\n        ContactFeatureType[ContactFeatureType[\"e_face\"] = 1] = \"e_face\";\n    })(ContactFeatureType || (ContactFeatureType = {}));\n    /**\n     * This is used for determining the state of contact points.\n     */\n    var PointState;\n    (function (PointState) {\n        /** Point does not exist */\n        PointState[PointState[\"nullState\"] = 0] = \"nullState\";\n        /** Point was added in the update */\n        PointState[PointState[\"addState\"] = 1] = \"addState\";\n        /** Point persisted across the update */\n        PointState[PointState[\"persistState\"] = 2] = \"persistState\";\n        /** Point was removed in the update */\n        PointState[PointState[\"removeState\"] = 3] = \"removeState\";\n    })(PointState || (PointState = {}));\n    /**\n     * Used for computing contact manifolds.\n     */\n    var ClipVertex = /** @class */ (function () {\n        function ClipVertex() {\n            this.v = Vec2.zero();\n            this.id = new ContactID();\n        }\n        ClipVertex.prototype.set = function (o) {\n            this.v.setVec2(o.v);\n            this.id.set(o.id);\n        };\n        return ClipVertex;\n    }());\n    /**\n     * A manifold for two touching convex shapes. Manifolds are created in `evaluate`\n     * method of Contact subclasses.\n     *\n     * Supported manifold types are e_faceA or e_faceB for clip point versus plane\n     * with radius and e_circles point versus point with radius.\n     *\n     * We store contacts in this way so that position correction can account for\n     * movement, which is critical for continuous physics. All contact scenarios\n     * must be expressed in one of these types. This structure is stored across time\n     * steps, so we keep it small.\n     *\n     * @prop type e_circle, e_faceA, e_faceB\n     * @prop localPoint Usage depends on manifold type:<br>\n     *       e_circles: the local center of circleA <br>\n     *       e_faceA: the center of faceA <br>\n     *       e_faceB: the center of faceB\n     * @prop localNormal Usage depends on manifold type:<br>\n     *       e_circles: not used <br>\n     *       e_faceA: the normal on polygonA <br>\n     *       e_faceB: the normal on polygonB\n     * @prop points The points of contact {ManifoldPoint[]}\n     * @prop pointCount The number of manifold points\n     */\n    var Manifold = /** @class */ (function () {\n        function Manifold() {\n            this.localNormal = Vec2.zero();\n            this.localPoint = Vec2.zero();\n            this.points = [new ManifoldPoint(), new ManifoldPoint()];\n            this.pointCount = 0;\n        }\n        /**\n         * Evaluate the manifold with supplied transforms. This assumes modest motion\n         * from the original state. This does not change the point count, impulses, etc.\n         * The radii must come from the shapes that generated the manifold.\n         */\n        Manifold.prototype.getWorldManifold = function (wm, xfA, radiusA, xfB, radiusB) {\n            if (this.pointCount == 0) {\n                return;\n            }\n            wm = wm || new WorldManifold();\n            var normal = wm.normal;\n            var points = wm.points;\n            var separations = wm.separations;\n            // TODO: improve\n            switch (this.type) {\n                case ManifoldType.e_circles: {\n                    normal = Vec2.neo(1.0, 0.0);\n                    var pointA = Transform.mulVec2(xfA, this.localPoint);\n                    var pointB = Transform.mulVec2(xfB, this.points[0].localPoint);\n                    var dist = Vec2.sub(pointB, pointA);\n                    if (Vec2.lengthSquared(dist) > math$1.EPSILON * math$1.EPSILON) {\n                        normal.setVec2(dist);\n                        normal.normalize();\n                    }\n                    var cA = pointA.clone().addMul(radiusA, normal);\n                    var cB = pointB.clone().addMul(-radiusB, normal);\n                    points[0] = Vec2.mid(cA, cB);\n                    separations[0] = Vec2.dot(Vec2.sub(cB, cA), normal);\n                    points.length = 1;\n                    separations.length = 1;\n                    break;\n                }\n                case ManifoldType.e_faceA: {\n                    normal = Rot.mulVec2(xfA.q, this.localNormal);\n                    var planePoint = Transform.mulVec2(xfA, this.localPoint);\n                    for (var i = 0; i < this.pointCount; ++i) {\n                        var clipPoint = Transform.mulVec2(xfB, this.points[i].localPoint);\n                        var cA = Vec2.clone(clipPoint).addMul(radiusA - Vec2.dot(Vec2.sub(clipPoint, planePoint), normal), normal);\n                        var cB = Vec2.clone(clipPoint).subMul(radiusB, normal);\n                        points[i] = Vec2.mid(cA, cB);\n                        separations[i] = Vec2.dot(Vec2.sub(cB, cA), normal);\n                    }\n                    points.length = this.pointCount;\n                    separations.length = this.pointCount;\n                    break;\n                }\n                case ManifoldType.e_faceB: {\n                    normal = Rot.mulVec2(xfB.q, this.localNormal);\n                    var planePoint = Transform.mulVec2(xfB, this.localPoint);\n                    for (var i = 0; i < this.pointCount; ++i) {\n                        var clipPoint = Transform.mulVec2(xfA, this.points[i].localPoint);\n                        var cB = Vec2.combine(1, clipPoint, radiusB - Vec2.dot(Vec2.sub(clipPoint, planePoint), normal), normal);\n                        var cA = Vec2.combine(1, clipPoint, -radiusA, normal);\n                        points[i] = Vec2.mid(cA, cB);\n                        separations[i] = Vec2.dot(Vec2.sub(cA, cB), normal);\n                    }\n                    points.length = this.pointCount;\n                    separations.length = this.pointCount;\n                    // Ensure normal points from A to B.\n                    normal.mul(-1);\n                    break;\n                }\n            }\n            wm.normal = normal;\n            wm.points = points;\n            wm.separations = separations;\n            return wm;\n        };\n        Manifold.clipSegmentToLine = clipSegmentToLine;\n        Manifold.ClipVertex = ClipVertex;\n        Manifold.getPointStates = getPointStates;\n        Manifold.PointState = PointState;\n        return Manifold;\n    }());\n    /**\n     * A manifold point is a contact point belonging to a contact manifold. It holds\n     * details related to the geometry and dynamics of the contact points.\n     *\n     * This structure is stored across time steps, so we keep it small.\n     *\n     * Note: impulses are used for internal caching and may not provide reliable\n     * contact forces, especially for high speed collisions.\n     */\n    var ManifoldPoint = /** @class */ (function () {\n        function ManifoldPoint() {\n            /**\n             * Usage depends on manifold type.\n             *       e_circles: the local center of circleB,\n             *       e_faceA: the local center of cirlceB or the clip point of polygonB,\n             *       e_faceB: the clip point of polygonA.\n             */\n            this.localPoint = Vec2.zero();\n            /**\n             * The non-penetration impulse\n             */\n            this.normalImpulse = 0;\n            /**\n             * The friction impulse\n             */\n            this.tangentImpulse = 0;\n            /**\n             * Uniquely identifies a contact point between two shapes to facilatate warm starting\n             */\n            this.id = new ContactID();\n        }\n        return ManifoldPoint;\n    }());\n    /**\n     * Contact ids to facilitate warm starting.\n     */\n    var ContactID = /** @class */ (function () {\n        function ContactID() {\n            this.cf = new ContactFeature();\n        }\n        Object.defineProperty(ContactID.prototype, \"key\", {\n            /**\n             * Used to quickly compare contact ids.\n             */\n            get: function () {\n                return this.cf.indexA + this.cf.indexB * 4 + this.cf.typeA * 16 + this.cf.typeB * 64;\n            },\n            enumerable: false,\n            configurable: true\n        });\n        ContactID.prototype.set = function (o) {\n            // this.key = o.key;\n            this.cf.set(o.cf);\n        };\n        return ContactID;\n    }());\n    /**\n     * The features that intersect to form the contact point.\n     */\n    var ContactFeature = /** @class */ (function () {\n        function ContactFeature() {\n        }\n        ContactFeature.prototype.set = function (o) {\n            this.indexA = o.indexA;\n            this.indexB = o.indexB;\n            this.typeA = o.typeA;\n            this.typeB = o.typeB;\n        };\n        return ContactFeature;\n    }());\n    /**\n     * This is used to compute the current state of a contact manifold.\n     */\n    var WorldManifold = /** @class */ (function () {\n        function WorldManifold() {\n            /**\n             * World contact point (point of intersection)\n             */\n            this.points = []; // [maxManifoldPoints]\n            /**\n             * A negative value indicates overlap, in meters\n             */\n            this.separations = []; // [maxManifoldPoints]\n        }\n        return WorldManifold;\n    }());\n    /**\n     * Compute the point states given two manifolds. The states pertain to the\n     * transition from manifold1 to manifold2. So state1 is either persist or remove\n     * while state2 is either add or persist.\n     */\n    function getPointStates(state1, state2, manifold1, manifold2) {\n        // state1, state2: PointState[Settings.maxManifoldPoints]\n        // for (var i = 0; i < Settings.maxManifoldPoints; ++i) {\n        // state1[i] = PointState.nullState;\n        // state2[i] = PointState.nullState;\n        // }\n        // Detect persists and removes.\n        for (var i = 0; i < manifold1.pointCount; ++i) {\n            var id = manifold1.points[i].id;\n            state1[i] = PointState.removeState;\n            for (var j = 0; j < manifold2.pointCount; ++j) {\n                if (manifold2.points[j].id.key == id.key) {\n                    state1[i] = PointState.persistState;\n                    break;\n                }\n            }\n        }\n        // Detect persists and adds.\n        for (var i = 0; i < manifold2.pointCount; ++i) {\n            var id = manifold2.points[i].id;\n            state2[i] = PointState.addState;\n            for (var j = 0; j < manifold1.pointCount; ++j) {\n                if (manifold1.points[j].id.key == id.key) {\n                    state2[i] = PointState.persistState;\n                    break;\n                }\n            }\n        }\n    }\n    /**\n     * Clipping for contact manifolds. Sutherland-Hodgman clipping.\n     */\n    function clipSegmentToLine(vOut, vIn, normal, offset, vertexIndexA) {\n        // Start with no output points\n        var numOut = 0;\n        // Calculate the distance of end points to the line\n        var distance0 = Vec2.dot(normal, vIn[0].v) - offset;\n        var distance1 = Vec2.dot(normal, vIn[1].v) - offset;\n        // If the points are behind the plane\n        if (distance0 <= 0.0)\n            vOut[numOut++].set(vIn[0]);\n        if (distance1 <= 0.0)\n            vOut[numOut++].set(vIn[1]);\n        // If the points are on different sides of the plane\n        if (distance0 * distance1 < 0.0) {\n            // Find intersection point of edge and plane\n            var interp = distance0 / (distance0 - distance1);\n            vOut[numOut].v.setCombine(1 - interp, vIn[0].v, interp, vIn[1].v);\n            // VertexA is hitting edgeB.\n            vOut[numOut].id.cf.indexA = vertexIndexA;\n            vOut[numOut].id.cf.indexB = vIn[0].id.cf.indexB;\n            vOut[numOut].id.cf.typeA = ContactFeatureType.e_vertex;\n            vOut[numOut].id.cf.typeB = ContactFeatureType.e_face;\n            ++numOut;\n        }\n        return numOut;\n    }\n\n    var stats$1 = {\n        gjkCalls: 0,\n        gjkIters: 0,\n        gjkMaxIters: 0,\n        toiTime: 0,\n        toiMaxTime: 0,\n        toiCalls: 0,\n        toiIters: 0,\n        toiMaxIters: 0,\n        toiRootIters: 0,\n        toiMaxRootIters: 0,\n        toString: function (newline) {\n            newline = typeof newline === 'string' ? newline : '\\n';\n            var string = \"\";\n            // tslint:disable-next-line:no-for-in\n            for (var name_1 in this) {\n                if (typeof this[name_1] !== 'function' && typeof this[name_1] !== 'object') {\n                    string += name_1 + ': ' + this[name_1] + newline;\n                }\n            }\n            return string;\n        }\n    };\n\n    /*\n     * Planck.js\n     * The MIT License\n     * Copyright (c) 2021 Erin Catto, Ali Shakiba\n     *\n     * Permission is hereby granted, free of charge, to any person obtaining a copy\n     * of this software and associated documentation files (the \"Software\"), to deal\n     * in the Software without restriction, including without limitation the rights\n     * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n     * copies of the Software, and to permit persons to whom the Software is\n     * furnished to do so, subject to the following conditions:\n     *\n     * The above copyright notice and this permission notice shall be included in all\n     * copies or substantial portions of the Software.\n     *\n     * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n     * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n     * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n     * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n     * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n     * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n     * SOFTWARE.\n     */\n    /**\n     * GJK using Voronoi regions (Christer Ericson) and Barycentric coordinates.\n     */\n    stats$1.gjkCalls = 0;\n    stats$1.gjkIters = 0;\n    stats$1.gjkMaxIters = 0;\n    /**\n     * Input for Distance. You have to option to use the shape radii in the\n     * computation. Even\n     */\n    var DistanceInput = /** @class */ (function () {\n        function DistanceInput() {\n            this.proxyA = new DistanceProxy();\n            this.proxyB = new DistanceProxy();\n            this.transformA = null;\n            this.transformB = null;\n            this.useRadii = false;\n        }\n        return DistanceInput;\n    }());\n    /**\n     * Output for Distance.\n     *\n     * @prop {Vec2} pointA closest point on shapeA\n     * @prop {Vec2} pointB closest point on shapeB\n     * @prop distance\n     * @prop iterations number of GJK iterations used\n     */\n    var DistanceOutput = /** @class */ (function () {\n        function DistanceOutput() {\n            this.pointA = Vec2.zero();\n            this.pointB = Vec2.zero();\n        }\n        return DistanceOutput;\n    }());\n    /**\n     * Used to warm start Distance. Set count to zero on first call.\n     *\n     * @prop {number} metric length or area\n     * @prop {array} indexA vertices on shape A\n     * @prop {array} indexB vertices on shape B\n     * @prop {number} count\n     */\n    var SimplexCache = /** @class */ (function () {\n        function SimplexCache() {\n            this.metric = 0;\n            this.indexA = [];\n            this.indexB = [];\n            this.count = 0;\n        }\n        return SimplexCache;\n    }());\n    /**\n     * Compute the closest points between two shapes. Supports any combination of:\n     * CircleShape, PolygonShape, EdgeShape. The simplex cache is input/output. On\n     * the first call set SimplexCache.count to zero.\n     */\n    function Distance(output, cache, input) {\n        ++stats$1.gjkCalls;\n        var proxyA = input.proxyA;\n        var proxyB = input.proxyB;\n        var xfA = input.transformA;\n        var xfB = input.transformB;\n        // Initialize the simplex.\n        var simplex = new Simplex();\n        simplex.readCache(cache, proxyA, xfA, proxyB, xfB);\n        // Get simplex vertices as an array.\n        var vertices = simplex.m_v;\n        var k_maxIters = Settings.maxDistnceIterations;\n        // These store the vertices of the last simplex so that we\n        // can check for duplicates and prevent cycling.\n        var saveA = [];\n        var saveB = []; // int[3]\n        var saveCount = 0;\n        // Main iteration loop.\n        var iter = 0;\n        while (iter < k_maxIters) {\n            // Copy simplex so we can identify duplicates.\n            saveCount = simplex.m_count;\n            for (var i = 0; i < saveCount; ++i) {\n                saveA[i] = vertices[i].indexA;\n                saveB[i] = vertices[i].indexB;\n            }\n            simplex.solve();\n            // If we have 3 points, then the origin is in the corresponding triangle.\n            if (simplex.m_count === 3) {\n                break;\n            }\n            // Compute closest point.\n            var p = simplex.getClosestPoint();\n            p.lengthSquared();\n            // Get search direction.\n            var d = simplex.getSearchDirection();\n            // Ensure the search direction is numerically fit.\n            if (d.lengthSquared() < math$1.EPSILON * math$1.EPSILON) {\n                // The origin is probably contained by a line segment\n                // or triangle. Thus the shapes are overlapped.\n                // We can't return zero here even though there may be overlap.\n                // In case the simplex is a point, segment, or triangle it is difficult\n                // to determine if the origin is contained in the CSO or very close to it.\n                break;\n            }\n            // Compute a tentative new simplex vertex using support points.\n            var vertex = vertices[simplex.m_count]; // SimplexVertex\n            vertex.indexA = proxyA.getSupport(Rot.mulTVec2(xfA.q, Vec2.neg(d)));\n            vertex.wA = Transform.mulVec2(xfA, proxyA.getVertex(vertex.indexA));\n            vertex.indexB = proxyB.getSupport(Rot.mulTVec2(xfB.q, d));\n            vertex.wB = Transform.mulVec2(xfB, proxyB.getVertex(vertex.indexB));\n            vertex.w = Vec2.sub(vertex.wB, vertex.wA);\n            // Iteration count is equated to the number of support point calls.\n            ++iter;\n            ++stats$1.gjkIters;\n            // Check for duplicate support points. This is the main termination\n            // criteria.\n            var duplicate = false;\n            for (var i = 0; i < saveCount; ++i) {\n                if (vertex.indexA === saveA[i] && vertex.indexB === saveB[i]) {\n                    duplicate = true;\n                    break;\n                }\n            }\n            // If we found a duplicate support point we must exit to avoid cycling.\n            if (duplicate) {\n                break;\n            }\n            // New vertex is ok and needed.\n            ++simplex.m_count;\n        }\n        stats$1.gjkMaxIters = math$1.max(stats$1.gjkMaxIters, iter);\n        // Prepare output.\n        simplex.getWitnessPoints(output.pointA, output.pointB);\n        output.distance = Vec2.distance(output.pointA, output.pointB);\n        output.iterations = iter;\n        // Cache the simplex.\n        simplex.writeCache(cache);\n        // Apply radii if requested.\n        if (input.useRadii) {\n            var rA = proxyA.m_radius;\n            var rB = proxyB.m_radius;\n            if (output.distance > rA + rB && output.distance > math$1.EPSILON) {\n                // Shapes are still no overlapped.\n                // Move the witness points to the outer surface.\n                output.distance -= rA + rB;\n                var normal = Vec2.sub(output.pointB, output.pointA);\n                normal.normalize();\n                output.pointA.addMul(rA, normal);\n                output.pointB.subMul(rB, normal);\n            }\n            else {\n                // Shapes are overlapped when radii are considered.\n                // Move the witness points to the middle.\n                var p = Vec2.mid(output.pointA, output.pointB);\n                output.pointA.setVec2(p);\n                output.pointB.setVec2(p);\n                output.distance = 0.0;\n            }\n        }\n    }\n    /**\n     * A distance proxy is used by the GJK algorithm. It encapsulates any shape.\n     */\n    var DistanceProxy = /** @class */ (function () {\n        function DistanceProxy() {\n            this.m_buffer = []; // Vec2[2]\n            this.m_vertices = []; // Vec2[]\n            this.m_count = 0;\n            this.m_radius = 0;\n        }\n        /**\n         * Get the vertex count.\n         */\n        DistanceProxy.prototype.getVertexCount = function () {\n            return this.m_count;\n        };\n        /**\n         * Get a vertex by index. Used by Distance.\n         */\n        DistanceProxy.prototype.getVertex = function (index) {\n            return this.m_vertices[index];\n        };\n        /**\n         * Get the supporting vertex index in the given direction.\n         */\n        DistanceProxy.prototype.getSupport = function (d) {\n            var bestIndex = 0;\n            var bestValue = Vec2.dot(this.m_vertices[0], d);\n            for (var i = 0; i < this.m_count; ++i) {\n                var value = Vec2.dot(this.m_vertices[i], d);\n                if (value > bestValue) {\n                    bestIndex = i;\n                    bestValue = value;\n                }\n            }\n            return bestIndex;\n        };\n        /**\n         * Get the supporting vertex in the given direction.\n         */\n        DistanceProxy.prototype.getSupportVertex = function (d) {\n            return this.m_vertices[this.getSupport(d)];\n        };\n        /**\n         * Initialize the proxy using the given shape. The shape must remain in scope\n         * while the proxy is in use.\n         */\n        DistanceProxy.prototype.set = function (shape, index) {\n            shape.computeDistanceProxy(this, index);\n        };\n        return DistanceProxy;\n    }());\n    var SimplexVertex = /** @class */ (function () {\n        function SimplexVertex() {\n            /** support point in proxyA */\n            this.wA = Vec2.zero();\n            /** support point in proxyB */\n            this.wB = Vec2.zero();\n            /** wB - wA; */\n            this.w = Vec2.zero();\n        }\n        SimplexVertex.prototype.set = function (v) {\n            this.indexA = v.indexA;\n            this.indexB = v.indexB;\n            this.wA = Vec2.clone(v.wA);\n            this.wB = Vec2.clone(v.wB);\n            this.w = Vec2.clone(v.w);\n            this.a = v.a;\n        };\n        return SimplexVertex;\n    }());\n    var Simplex = /** @class */ (function () {\n        function Simplex() {\n            this.m_v1 = new SimplexVertex();\n            this.m_v2 = new SimplexVertex();\n            this.m_v3 = new SimplexVertex();\n            this.m_v = [this.m_v1, this.m_v2, this.m_v3];\n            this.m_count;\n        }\n        /** @internal */\n        Simplex.prototype.toString = function () {\n            if (this.m_count === 3) {\n                return [\"+\" + this.m_count,\n                    this.m_v1.a, this.m_v1.wA.x, this.m_v1.wA.y, this.m_v1.wB.x, this.m_v1.wB.y,\n                    this.m_v2.a, this.m_v2.wA.x, this.m_v2.wA.y, this.m_v2.wB.x, this.m_v2.wB.y,\n                    this.m_v3.a, this.m_v3.wA.x, this.m_v3.wA.y, this.m_v3.wB.x, this.m_v3.wB.y\n                ].toString();\n            }\n            else if (this.m_count === 2) {\n                return [\"+\" + this.m_count,\n                    this.m_v1.a, this.m_v1.wA.x, this.m_v1.wA.y, this.m_v1.wB.x, this.m_v1.wB.y,\n                    this.m_v2.a, this.m_v2.wA.x, this.m_v2.wA.y, this.m_v2.wB.x, this.m_v2.wB.y\n                ].toString();\n            }\n            else if (this.m_count === 1) {\n                return [\"+\" + this.m_count,\n                    this.m_v1.a, this.m_v1.wA.x, this.m_v1.wA.y, this.m_v1.wB.x, this.m_v1.wB.y\n                ].toString();\n            }\n            else {\n                return \"+\" + this.m_count;\n            }\n        };\n        Simplex.prototype.readCache = function (cache, proxyA, transformA, proxyB, transformB) {\n            // Copy data from cache.\n            this.m_count = cache.count;\n            for (var i = 0; i < this.m_count; ++i) {\n                var v = this.m_v[i];\n                v.indexA = cache.indexA[i];\n                v.indexB = cache.indexB[i];\n                var wALocal = proxyA.getVertex(v.indexA);\n                var wBLocal = proxyB.getVertex(v.indexB);\n                v.wA = Transform.mulVec2(transformA, wALocal);\n                v.wB = Transform.mulVec2(transformB, wBLocal);\n                v.w = Vec2.sub(v.wB, v.wA);\n                v.a = 0.0;\n            }\n            // Compute the new simplex metric, if it is substantially different than\n            // old metric then flush the simplex.\n            if (this.m_count > 1) {\n                var metric1 = cache.metric;\n                var metric2 = this.getMetric();\n                if (metric2 < 0.5 * metric1 || 2.0 * metric1 < metric2\n                    || metric2 < math$1.EPSILON) {\n                    // Reset the simplex.\n                    this.m_count = 0;\n                }\n            }\n            // If the cache is empty or invalid...\n            if (this.m_count === 0) {\n                var v = this.m_v[0];\n                v.indexA = 0;\n                v.indexB = 0;\n                var wALocal = proxyA.getVertex(0);\n                var wBLocal = proxyB.getVertex(0);\n                v.wA = Transform.mulVec2(transformA, wALocal);\n                v.wB = Transform.mulVec2(transformB, wBLocal);\n                v.w = Vec2.sub(v.wB, v.wA);\n                v.a = 1.0;\n                this.m_count = 1;\n            }\n        };\n        Simplex.prototype.writeCache = function (cache) {\n            cache.metric = this.getMetric();\n            cache.count = this.m_count;\n            for (var i = 0; i < this.m_count; ++i) {\n                cache.indexA[i] = this.m_v[i].indexA;\n                cache.indexB[i] = this.m_v[i].indexB;\n            }\n        };\n        Simplex.prototype.getSearchDirection = function () {\n            switch (this.m_count) {\n                case 1:\n                    return Vec2.neg(this.m_v1.w);\n                case 2: {\n                    var e12 = Vec2.sub(this.m_v2.w, this.m_v1.w);\n                    var sgn = Vec2.crossVec2Vec2(e12, Vec2.neg(this.m_v1.w));\n                    if (sgn > 0.0) {\n                        // Origin is left of e12.\n                        return Vec2.crossNumVec2(1.0, e12);\n                    }\n                    else {\n                        // Origin is right of e12.\n                        return Vec2.crossVec2Num(e12, 1.0);\n                    }\n                }\n                default:\n                    return Vec2.zero();\n            }\n        };\n        Simplex.prototype.getClosestPoint = function () {\n            switch (this.m_count) {\n                case 0:\n                    return Vec2.zero();\n                case 1:\n                    return Vec2.clone(this.m_v1.w);\n                case 2:\n                    return Vec2.combine(this.m_v1.a, this.m_v1.w, this.m_v2.a, this.m_v2.w);\n                case 3:\n                    return Vec2.zero();\n                default:\n                    return Vec2.zero();\n            }\n        };\n        Simplex.prototype.getWitnessPoints = function (pA, pB) {\n            switch (this.m_count) {\n                case 0:\n                    break;\n                case 1:\n                    pA.setVec2(this.m_v1.wA);\n                    pB.setVec2(this.m_v1.wB);\n                    break;\n                case 2:\n                    pA.setCombine(this.m_v1.a, this.m_v1.wA, this.m_v2.a, this.m_v2.wA);\n                    pB.setCombine(this.m_v1.a, this.m_v1.wB, this.m_v2.a, this.m_v2.wB);\n                    break;\n                case 3:\n                    pA.setCombine(this.m_v1.a, this.m_v1.wA, this.m_v2.a, this.m_v2.wA);\n                    pA.addMul(this.m_v3.a, this.m_v3.wA);\n                    pB.setVec2(pA);\n                    break;\n            }\n        };\n        Simplex.prototype.getMetric = function () {\n            switch (this.m_count) {\n                case 0:\n                    return 0.0;\n                case 1:\n                    return 0.0;\n                case 2:\n                    return Vec2.distance(this.m_v1.w, this.m_v2.w);\n                case 3:\n                    return Vec2.crossVec2Vec2(Vec2.sub(this.m_v2.w, this.m_v1.w), Vec2.sub(this.m_v3.w, this.m_v1.w));\n                default:\n                    return 0.0;\n            }\n        };\n        Simplex.prototype.solve = function () {\n            switch (this.m_count) {\n                case 1:\n                    break;\n                case 2:\n                    this.solve2();\n                    break;\n                case 3:\n                    this.solve3();\n                    break;\n            }\n        };\n        // Solve a line segment using barycentric coordinates.\n        //\n        // p = a1 * w1 + a2 * w2\n        // a1 + a2 = 1\n        //\n        // The vector from the origin to the closest point on the line is\n        // perpendicular to the line.\n        // e12 = w2 - w1\n        // dot(p, e) = 0\n        // a1 * dot(w1, e) + a2 * dot(w2, e) = 0\n        //\n        // 2-by-2 linear system\n        // [1 1 ][a1] = [1]\n        // [w1.e12 w2.e12][a2] = [0]\n        //\n        // Define\n        // d12_1 = dot(w2, e12)\n        // d12_2 = -dot(w1, e12)\n        // d12 = d12_1 + d12_2\n        //\n        // Solution\n        // a1 = d12_1 / d12\n        // a2 = d12_2 / d12\n        Simplex.prototype.solve2 = function () {\n            var w1 = this.m_v1.w;\n            var w2 = this.m_v2.w;\n            var e12 = Vec2.sub(w2, w1);\n            // w1 region\n            var d12_2 = -Vec2.dot(w1, e12);\n            if (d12_2 <= 0.0) {\n                // a2 <= 0, so we clamp it to 0\n                this.m_v1.a = 1.0;\n                this.m_count = 1;\n                return;\n            }\n            // w2 region\n            var d12_1 = Vec2.dot(w2, e12);\n            if (d12_1 <= 0.0) {\n                // a1 <= 0, so we clamp it to 0\n                this.m_v2.a = 1.0;\n                this.m_count = 1;\n                this.m_v1.set(this.m_v2);\n                return;\n            }\n            // Must be in e12 region.\n            var inv_d12 = 1.0 / (d12_1 + d12_2);\n            this.m_v1.a = d12_1 * inv_d12;\n            this.m_v2.a = d12_2 * inv_d12;\n            this.m_count = 2;\n        };\n        // Possible regions:\n        // - points[2]\n        // - edge points[0]-points[2]\n        // - edge points[1]-points[2]\n        // - inside the triangle\n        Simplex.prototype.solve3 = function () {\n            var w1 = this.m_v1.w;\n            var w2 = this.m_v2.w;\n            var w3 = this.m_v3.w;\n            // Edge12\n            // [1 1 ][a1] = [1]\n            // [w1.e12 w2.e12][a2] = [0]\n            // a3 = 0\n            var e12 = Vec2.sub(w2, w1);\n            var w1e12 = Vec2.dot(w1, e12);\n            var w2e12 = Vec2.dot(w2, e12);\n            var d12_1 = w2e12;\n            var d12_2 = -w1e12;\n            // Edge13\n            // [1 1 ][a1] = [1]\n            // [w1.e13 w3.e13][a3] = [0]\n            // a2 = 0\n            var e13 = Vec2.sub(w3, w1);\n            var w1e13 = Vec2.dot(w1, e13);\n            var w3e13 = Vec2.dot(w3, e13);\n            var d13_1 = w3e13;\n            var d13_2 = -w1e13;\n            // Edge23\n            // [1 1 ][a2] = [1]\n            // [w2.e23 w3.e23][a3] = [0]\n            // a1 = 0\n            var e23 = Vec2.sub(w3, w2);\n            var w2e23 = Vec2.dot(w2, e23);\n            var w3e23 = Vec2.dot(w3, e23);\n            var d23_1 = w3e23;\n            var d23_2 = -w2e23;\n            // Triangle123\n            var n123 = Vec2.crossVec2Vec2(e12, e13);\n            var d123_1 = n123 * Vec2.crossVec2Vec2(w2, w3);\n            var d123_2 = n123 * Vec2.crossVec2Vec2(w3, w1);\n            var d123_3 = n123 * Vec2.crossVec2Vec2(w1, w2);\n            // w1 region\n            if (d12_2 <= 0.0 && d13_2 <= 0.0) {\n                this.m_v1.a = 1.0;\n                this.m_count = 1;\n                return;\n            }\n            // e12\n            if (d12_1 > 0.0 && d12_2 > 0.0 && d123_3 <= 0.0) {\n                var inv_d12 = 1.0 / (d12_1 + d12_2);\n                this.m_v1.a = d12_1 * inv_d12;\n                this.m_v2.a = d12_2 * inv_d12;\n                this.m_count = 2;\n                return;\n            }\n            // e13\n            if (d13_1 > 0.0 && d13_2 > 0.0 && d123_2 <= 0.0) {\n                var inv_d13 = 1.0 / (d13_1 + d13_2);\n                this.m_v1.a = d13_1 * inv_d13;\n                this.m_v3.a = d13_2 * inv_d13;\n                this.m_count = 2;\n                this.m_v2.set(this.m_v3);\n                return;\n            }\n            // w2 region\n            if (d12_1 <= 0.0 && d23_2 <= 0.0) {\n                this.m_v2.a = 1.0;\n                this.m_count = 1;\n                this.m_v1.set(this.m_v2);\n                return;\n            }\n            // w3 region\n            if (d13_1 <= 0.0 && d23_1 <= 0.0) {\n                this.m_v3.a = 1.0;\n                this.m_count = 1;\n                this.m_v1.set(this.m_v3);\n                return;\n            }\n            // e23\n            if (d23_1 > 0.0 && d23_2 > 0.0 && d123_1 <= 0.0) {\n                var inv_d23 = 1.0 / (d23_1 + d23_2);\n                this.m_v2.a = d23_1 * inv_d23;\n                this.m_v3.a = d23_2 * inv_d23;\n                this.m_count = 2;\n                this.m_v1.set(this.m_v3);\n                return;\n            }\n            // Must be in triangle123\n            var inv_d123 = 1.0 / (d123_1 + d123_2 + d123_3);\n            this.m_v1.a = d123_1 * inv_d123;\n            this.m_v2.a = d123_2 * inv_d123;\n            this.m_v3.a = d123_3 * inv_d123;\n            this.m_count = 3;\n        };\n        return Simplex;\n    }());\n    /**\n     * Determine if two generic shapes overlap.\n     */\n    function testOverlap(shapeA, indexA, shapeB, indexB, xfA, xfB) {\n        var input = new DistanceInput();\n        input.proxyA.set(shapeA, indexA);\n        input.proxyB.set(shapeB, indexB);\n        input.transformA = xfA;\n        input.transformB = xfB;\n        input.useRadii = true;\n        var cache = new SimplexCache();\n        var output = new DistanceOutput();\n        Distance(output, cache, input);\n        return output.distance < 10.0 * math$1.EPSILON;\n    }\n\n    /*\n     * Planck.js\n     * The MIT License\n     * Copyright (c) 2021 Erin Catto, Ali Shakiba\n     *\n     * Permission is hereby granted, free of charge, to any person obtaining a copy\n     * of this software and associated documentation files (the \"Software\"), to deal\n     * in the Software without restriction, including without limitation the rights\n     * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n     * copies of the Software, and to permit persons to whom the Software is\n     * furnished to do so, subject to the following conditions:\n     *\n     * The above copyright notice and this permission notice shall be included in all\n     * copies or substantial portions of the Software.\n     *\n     * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n     * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n     * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n     * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n     * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n     * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n     * SOFTWARE.\n     */\n    /**\n     * A contact edge is used to connect bodies and contacts together in a contact\n     * graph where each body is a node and each contact is an edge. A contact edge\n     * belongs to a doubly linked list maintained in each attached body. Each\n     * contact has two contact nodes, one for each attached body.\n     *\n     * @prop {Contact} contact The contact\n     * @prop {ContactEdge} prev The previous contact edge in the body's contact list\n     * @prop {ContactEdge} next The next contact edge in the body's contact list\n     * @prop {Body} other Provides quick access to the other body attached.\n     */\n    var ContactEdge = /** @class */ (function () {\n        function ContactEdge(contact) {\n            this.contact = contact;\n        }\n        return ContactEdge;\n    }());\n    /**\n     * Friction mixing law. The idea is to allow either fixture to drive the\n     * restitution to zero. For example, anything slides on ice.\n     */\n    function mixFriction(friction1, friction2) {\n        return math$1.sqrt(friction1 * friction2);\n    }\n    /**\n     * Restitution mixing law. The idea is allow for anything to bounce off an\n     * inelastic surface. For example, a superball bounces on anything.\n     */\n    function mixRestitution(restitution1, restitution2) {\n        return restitution1 > restitution2 ? restitution1 : restitution2;\n    }\n    // TODO: move this to Settings?\n    var s_registers = [];\n    // TODO: merge with ManifoldPoint?\n    var VelocityConstraintPoint = /** @class */ (function () {\n        function VelocityConstraintPoint() {\n            this.rA = Vec2.zero();\n            this.rB = Vec2.zero();\n            this.normalImpulse = 0;\n            this.tangentImpulse = 0;\n            this.normalMass = 0;\n            this.tangentMass = 0;\n            this.velocityBias = 0;\n        }\n        return VelocityConstraintPoint;\n    }());\n    /**\n     * The class manages contact between two shapes. A contact exists for each\n     * overlapping AABB in the broad-phase (except if filtered). Therefore a contact\n     * object may exist that has no contact points.\n     */\n    var Contact = /** @class */ (function () {\n        function Contact(fA, indexA, fB, indexB, evaluateFcn) {\n            /** @internal */\n            this.m_manifold = new Manifold();\n            /** @internal */\n            this.m_prev = null;\n            /** @internal */\n            this.m_next = null;\n            /** @internal */\n            this.m_toi = 1.0;\n            /** @internal */\n            this.m_toiCount = 0;\n            /** @internal This contact has a valid TOI in m_toi */\n            this.m_toiFlag = false;\n            /** @internal */\n            this.m_tangentSpeed = 0.0;\n            /** @internal This contact can be disabled (by user) */\n            this.m_enabledFlag = true;\n            /** @internal Used when crawling contact graph when forming islands. */\n            this.m_islandFlag = false;\n            /** @internal Set when the shapes are touching. */\n            this.m_touchingFlag = false;\n            /** @internal This contact needs filtering because a fixture filter was changed. */\n            this.m_filterFlag = false;\n            /** @internal This bullet contact had a TOI event */\n            this.m_bulletHitFlag = false;\n            /** @internal Contact reporting impulse object cache */\n            this.m_impulse = new ContactImpulse(this);\n            // VelocityConstraint\n            /** @internal */ this.v_points = []; // [maxManifoldPoints];\n            /** @internal */ this.v_normal = Vec2.zero();\n            /** @internal */ this.v_normalMass = new Mat22();\n            /** @internal */ this.v_K = new Mat22();\n            // PositionConstraint\n            /** @internal */ this.p_localPoints = []; // [maxManifoldPoints];\n            /** @internal */ this.p_localNormal = Vec2.zero();\n            /** @internal */ this.p_localPoint = Vec2.zero();\n            /** @internal */ this.p_localCenterA = Vec2.zero();\n            /** @internal */ this.p_localCenterB = Vec2.zero();\n            // Nodes for connecting bodies.\n            this.m_nodeA = new ContactEdge(this);\n            this.m_nodeB = new ContactEdge(this);\n            this.m_fixtureA = fA;\n            this.m_fixtureB = fB;\n            this.m_indexA = indexA;\n            this.m_indexB = indexB;\n            this.m_evaluateFcn = evaluateFcn;\n            this.m_friction = mixFriction(this.m_fixtureA.m_friction, this.m_fixtureB.m_friction);\n            this.m_restitution = mixRestitution(this.m_fixtureA.m_restitution, this.m_fixtureB.m_restitution);\n        }\n        Contact.prototype.initConstraint = function (step) {\n            var fixtureA = this.m_fixtureA;\n            var fixtureB = this.m_fixtureB;\n            var shapeA = fixtureA.getShape();\n            var shapeB = fixtureB.getShape();\n            var bodyA = fixtureA.getBody();\n            var bodyB = fixtureB.getBody();\n            var manifold = this.getManifold();\n            var pointCount = manifold.pointCount;\n            this.v_invMassA = bodyA.m_invMass;\n            this.v_invMassB = bodyB.m_invMass;\n            this.v_invIA = bodyA.m_invI;\n            this.v_invIB = bodyB.m_invI;\n            this.v_friction = this.m_friction;\n            this.v_restitution = this.m_restitution;\n            this.v_tangentSpeed = this.m_tangentSpeed;\n            this.v_pointCount = pointCount;\n            this.v_K.setZero();\n            this.v_normalMass.setZero();\n            this.p_invMassA = bodyA.m_invMass;\n            this.p_invMassB = bodyB.m_invMass;\n            this.p_invIA = bodyA.m_invI;\n            this.p_invIB = bodyB.m_invI;\n            this.p_localCenterA = Vec2.clone(bodyA.m_sweep.localCenter);\n            this.p_localCenterB = Vec2.clone(bodyB.m_sweep.localCenter);\n            this.p_radiusA = shapeA.m_radius;\n            this.p_radiusB = shapeB.m_radius;\n            this.p_type = manifold.type;\n            this.p_localNormal = Vec2.clone(manifold.localNormal);\n            this.p_localPoint = Vec2.clone(manifold.localPoint);\n            this.p_pointCount = pointCount;\n            for (var j = 0; j < pointCount; ++j) {\n                var cp = manifold.points[j];\n                var vcp = this.v_points[j] = new VelocityConstraintPoint();\n                if (step.warmStarting) {\n                    vcp.normalImpulse = step.dtRatio * cp.normalImpulse;\n                    vcp.tangentImpulse = step.dtRatio * cp.tangentImpulse;\n                }\n                else {\n                    vcp.normalImpulse = 0.0;\n                    vcp.tangentImpulse = 0.0;\n                }\n                vcp.rA.setZero();\n                vcp.rB.setZero();\n                vcp.normalMass = 0.0;\n                vcp.tangentMass = 0.0;\n                vcp.velocityBias = 0.0;\n                this.p_localPoints[j] = Vec2.clone(cp.localPoint);\n            }\n        };\n        /**\n         * Get the contact manifold. Do not modify the manifold unless you understand\n         * the internals of the library.\n         */\n        Contact.prototype.getManifold = function () {\n            return this.m_manifold;\n        };\n        /**\n         * Get the world manifold.\n         */\n        Contact.prototype.getWorldManifold = function (worldManifold) {\n            var bodyA = this.m_fixtureA.getBody();\n            var bodyB = this.m_fixtureB.getBody();\n            var shapeA = this.m_fixtureA.getShape();\n            var shapeB = this.m_fixtureB.getShape();\n            return this.m_manifold.getWorldManifold(worldManifold, bodyA.getTransform(), shapeA.m_radius, bodyB.getTransform(), shapeB.m_radius);\n        };\n        /**\n         * Enable/disable this contact. This can be used inside the pre-solve contact\n         * listener. The contact is only disabled for the current time step (or sub-step\n         * in continuous collisions).\n         */\n        Contact.prototype.setEnabled = function (flag) {\n            this.m_enabledFlag = !!flag;\n        };\n        /**\n         * Has this contact been disabled?\n         */\n        Contact.prototype.isEnabled = function () {\n            return this.m_enabledFlag;\n        };\n        /**\n         * Is this contact touching?\n         */\n        Contact.prototype.isTouching = function () {\n            return this.m_touchingFlag;\n        };\n        /**\n         * Get the next contact in the world's contact list.\n         */\n        Contact.prototype.getNext = function () {\n            return this.m_next;\n        };\n        /**\n         * Get fixture A in this contact.\n         */\n        Contact.prototype.getFixtureA = function () {\n            return this.m_fixtureA;\n        };\n        /**\n         * Get fixture B in this contact.\n         */\n        Contact.prototype.getFixtureB = function () {\n            return this.m_fixtureB;\n        };\n        /**\n         * Get the child primitive index for fixture A.\n         */\n        Contact.prototype.getChildIndexA = function () {\n            return this.m_indexA;\n        };\n        /**\n         * Get the child primitive index for fixture B.\n         */\n        Contact.prototype.getChildIndexB = function () {\n            return this.m_indexB;\n        };\n        /**\n         * Flag this contact for filtering. Filtering will occur the next time step.\n         */\n        Contact.prototype.flagForFiltering = function () {\n            this.m_filterFlag = true;\n        };\n        /**\n         * Override the default friction mixture. You can call this in\n         * ContactListener.preSolve. This value persists until set or reset.\n         */\n        Contact.prototype.setFriction = function (friction) {\n            this.m_friction = friction;\n        };\n        /**\n         * Get the friction.\n         */\n        Contact.prototype.getFriction = function () {\n            return this.m_friction;\n        };\n        /**\n         * Reset the friction mixture to the default value.\n         */\n        Contact.prototype.resetFriction = function () {\n            this.m_friction = mixFriction(this.m_fixtureA.m_friction, this.m_fixtureB.m_friction);\n        };\n        /**\n         * Override the default restitution mixture. You can call this in\n         * ContactListener.preSolve. The value persists until you set or reset.\n         */\n        Contact.prototype.setRestitution = function (restitution) {\n            this.m_restitution = restitution;\n        };\n        /**\n         * Get the restitution.\n         */\n        Contact.prototype.getRestitution = function () {\n            return this.m_restitution;\n        };\n        /**\n         * Reset the restitution to the default value.\n         */\n        Contact.prototype.resetRestitution = function () {\n            this.m_restitution = mixRestitution(this.m_fixtureA.m_restitution, this.m_fixtureB.m_restitution);\n        };\n        /**\n         * Set the desired tangent speed for a conveyor belt behavior. In meters per\n         * second.\n         */\n        Contact.prototype.setTangentSpeed = function (speed) {\n            this.m_tangentSpeed = speed;\n        };\n        /**\n         * Get the desired tangent speed. In meters per second.\n         */\n        Contact.prototype.getTangentSpeed = function () {\n            return this.m_tangentSpeed;\n        };\n        /**\n         * Called by Update method, and implemented by subclasses.\n         */\n        Contact.prototype.evaluate = function (manifold, xfA, xfB) {\n            this.m_evaluateFcn(manifold, xfA, this.m_fixtureA, this.m_indexA, xfB, this.m_fixtureB, this.m_indexB);\n        };\n        /**\n         * Updates the contact manifold and touching status.\n         *\n         * Note: do not assume the fixture AABBs are overlapping or are valid.\n         *\n         * @param listener.beginContact\n         * @param listener.endContact\n         * @param listener.preSolve\n         */\n        Contact.prototype.update = function (listener) {\n            // Re-enable this contact.\n            this.m_enabledFlag = true;\n            var touching = false;\n            var wasTouching = this.m_touchingFlag;\n            var sensorA = this.m_fixtureA.isSensor();\n            var sensorB = this.m_fixtureB.isSensor();\n            var sensor = sensorA || sensorB;\n            var bodyA = this.m_fixtureA.getBody();\n            var bodyB = this.m_fixtureB.getBody();\n            var xfA = bodyA.getTransform();\n            var xfB = bodyB.getTransform();\n            var oldManifold;\n            // Is this contact a sensor?\n            if (sensor) {\n                var shapeA = this.m_fixtureA.getShape();\n                var shapeB = this.m_fixtureB.getShape();\n                touching = testOverlap(shapeA, this.m_indexA, shapeB, this.m_indexB, xfA, xfB);\n                // Sensors don't generate manifolds.\n                this.m_manifold.pointCount = 0;\n            }\n            else {\n                // TODO reuse manifold\n                oldManifold = this.m_manifold;\n                this.m_manifold = new Manifold();\n                this.evaluate(this.m_manifold, xfA, xfB);\n                touching = this.m_manifold.pointCount > 0;\n                // Match old contact ids to new contact ids and copy the\n                // stored impulses to warm start the solver.\n                for (var i = 0; i < this.m_manifold.pointCount; ++i) {\n                    var nmp = this.m_manifold.points[i];\n                    nmp.normalImpulse = 0.0;\n                    nmp.tangentImpulse = 0.0;\n                    for (var j = 0; j < oldManifold.pointCount; ++j) {\n                        var omp = oldManifold.points[j];\n                        if (omp.id.key == nmp.id.key) {\n                            nmp.normalImpulse = omp.normalImpulse;\n                            nmp.tangentImpulse = omp.tangentImpulse;\n                            break;\n                        }\n                    }\n                }\n                if (touching != wasTouching) {\n                    bodyA.setAwake(true);\n                    bodyB.setAwake(true);\n                }\n            }\n            this.m_touchingFlag = touching;\n            if (!wasTouching && touching && listener) {\n                listener.beginContact(this);\n            }\n            if (wasTouching && !touching && listener) {\n                listener.endContact(this);\n            }\n            if (!sensor && touching && listener) {\n                listener.preSolve(this, oldManifold);\n            }\n        };\n        Contact.prototype.solvePositionConstraint = function (step) {\n            return this._solvePositionConstraint(step);\n        };\n        Contact.prototype.solvePositionConstraintTOI = function (step, toiA, toiB) {\n            return this._solvePositionConstraint(step, toiA, toiB);\n        };\n        Contact.prototype._solvePositionConstraint = function (step, toiA, toiB) {\n            var toi = !!toiA && !!toiB;\n            var fixtureA = this.m_fixtureA;\n            var fixtureB = this.m_fixtureB;\n            var bodyA = fixtureA.getBody();\n            var bodyB = fixtureB.getBody();\n            bodyA.c_velocity;\n            bodyB.c_velocity;\n            var positionA = bodyA.c_position;\n            var positionB = bodyB.c_position;\n            var localCenterA = Vec2.clone(this.p_localCenterA);\n            var localCenterB = Vec2.clone(this.p_localCenterB);\n            var mA = 0.0;\n            var iA = 0.0;\n            if (!toi || (bodyA == toiA || bodyA == toiB)) {\n                mA = this.p_invMassA;\n                iA = this.p_invIA;\n            }\n            var mB = 0.0;\n            var iB = 0.0;\n            if (!toi || (bodyB == toiA || bodyB == toiB)) {\n                mB = this.p_invMassB;\n                iB = this.p_invIB;\n            }\n            var cA = Vec2.clone(positionA.c);\n            var aA = positionA.a;\n            var cB = Vec2.clone(positionB.c);\n            var aB = positionB.a;\n            var minSeparation = 0.0;\n            // Solve normal constraints\n            for (var j = 0; j < this.p_pointCount; ++j) {\n                var xfA = Transform.identity();\n                var xfB = Transform.identity();\n                xfA.q.setAngle(aA);\n                xfB.q.setAngle(aB);\n                xfA.p = Vec2.sub(cA, Rot.mulVec2(xfA.q, localCenterA));\n                xfB.p = Vec2.sub(cB, Rot.mulVec2(xfB.q, localCenterB));\n                // PositionSolverManifold\n                var normal = void 0;\n                var point = void 0;\n                var separation = void 0;\n                switch (this.p_type) {\n                    case ManifoldType.e_circles: {\n                        var pointA = Transform.mulVec2(xfA, this.p_localPoint);\n                        var pointB = Transform.mulVec2(xfB, this.p_localPoints[0]);\n                        normal = Vec2.sub(pointB, pointA);\n                        normal.normalize();\n                        point = Vec2.combine(0.5, pointA, 0.5, pointB);\n                        separation = Vec2.dot(Vec2.sub(pointB, pointA), normal) - this.p_radiusA - this.p_radiusB;\n                        break;\n                    }\n                    case ManifoldType.e_faceA: {\n                        normal = Rot.mulVec2(xfA.q, this.p_localNormal);\n                        var planePoint = Transform.mulVec2(xfA, this.p_localPoint);\n                        var clipPoint = Transform.mulVec2(xfB, this.p_localPoints[j]);\n                        separation = Vec2.dot(Vec2.sub(clipPoint, planePoint), normal) - this.p_radiusA - this.p_radiusB;\n                        point = clipPoint;\n                        break;\n                    }\n                    case ManifoldType.e_faceB: {\n                        normal = Rot.mulVec2(xfB.q, this.p_localNormal);\n                        var planePoint = Transform.mulVec2(xfB, this.p_localPoint);\n                        var clipPoint = Transform.mulVec2(xfA, this.p_localPoints[j]);\n                        separation = Vec2.dot(Vec2.sub(clipPoint, planePoint), normal) - this.p_radiusA - this.p_radiusB;\n                        point = clipPoint;\n                        // Ensure normal points from A to B\n                        normal.mul(-1);\n                        break;\n                    }\n                }\n                var rA = Vec2.sub(point, cA);\n                var rB = Vec2.sub(point, cB);\n                // Track max constraint error.\n                minSeparation = math$1.min(minSeparation, separation);\n                var baumgarte = toi ? Settings.toiBaugarte : Settings.baumgarte;\n                var linearSlop = Settings.linearSlop;\n                var maxLinearCorrection = Settings.maxLinearCorrection;\n                // Prevent large corrections and allow slop.\n                var C = math$1.clamp(baumgarte * (separation + linearSlop), -maxLinearCorrection, 0.0);\n                // Compute the effective mass.\n                var rnA = Vec2.crossVec2Vec2(rA, normal);\n                var rnB = Vec2.crossVec2Vec2(rB, normal);\n                var K = mA + mB + iA * rnA * rnA + iB * rnB * rnB;\n                // Compute normal impulse\n                var impulse = K > 0.0 ? -C / K : 0.0;\n                var P = Vec2.mulNumVec2(impulse, normal);\n                cA.subMul(mA, P);\n                aA -= iA * Vec2.crossVec2Vec2(rA, P);\n                cB.addMul(mB, P);\n                aB += iB * Vec2.crossVec2Vec2(rB, P);\n            }\n            positionA.c.setVec2(cA);\n            positionA.a = aA;\n            positionB.c.setVec2(cB);\n            positionB.a = aB;\n            return minSeparation;\n        };\n        Contact.prototype.initVelocityConstraint = function (step) {\n            var fixtureA = this.m_fixtureA;\n            var fixtureB = this.m_fixtureB;\n            var bodyA = fixtureA.getBody();\n            var bodyB = fixtureB.getBody();\n            var velocityA = bodyA.c_velocity;\n            var velocityB = bodyB.c_velocity;\n            var positionA = bodyA.c_position;\n            var positionB = bodyB.c_position;\n            var radiusA = this.p_radiusA;\n            var radiusB = this.p_radiusB;\n            var manifold = this.getManifold();\n            var mA = this.v_invMassA;\n            var mB = this.v_invMassB;\n            var iA = this.v_invIA;\n            var iB = this.v_invIB;\n            var localCenterA = Vec2.clone(this.p_localCenterA);\n            var localCenterB = Vec2.clone(this.p_localCenterB);\n            var cA = Vec2.clone(positionA.c);\n            var aA = positionA.a;\n            var vA = Vec2.clone(velocityA.v);\n            var wA = velocityA.w;\n            var cB = Vec2.clone(positionB.c);\n            var aB = positionB.a;\n            var vB = Vec2.clone(velocityB.v);\n            var wB = velocityB.w;\n            var xfA = Transform.identity();\n            var xfB = Transform.identity();\n            xfA.q.setAngle(aA);\n            xfB.q.setAngle(aB);\n            xfA.p.setCombine(1, cA, -1, Rot.mulVec2(xfA.q, localCenterA));\n            xfB.p.setCombine(1, cB, -1, Rot.mulVec2(xfB.q, localCenterB));\n            var worldManifold = manifold.getWorldManifold(null, xfA, radiusA, xfB, radiusB);\n            this.v_normal.setVec2(worldManifold.normal);\n            for (var j = 0; j < this.v_pointCount; ++j) {\n                var vcp = this.v_points[j]; // VelocityConstraintPoint\n                vcp.rA.setVec2(Vec2.sub(worldManifold.points[j], cA));\n                vcp.rB.setVec2(Vec2.sub(worldManifold.points[j], cB));\n                var rnA = Vec2.crossVec2Vec2(vcp.rA, this.v_normal);\n                var rnB = Vec2.crossVec2Vec2(vcp.rB, this.v_normal);\n                var kNormal = mA + mB + iA * rnA * rnA + iB * rnB * rnB;\n                vcp.normalMass = kNormal > 0.0 ? 1.0 / kNormal : 0.0;\n                var tangent = Vec2.crossVec2Num(this.v_normal, 1.0);\n                var rtA = Vec2.crossVec2Vec2(vcp.rA, tangent);\n                var rtB = Vec2.crossVec2Vec2(vcp.rB, tangent);\n                var kTangent = mA + mB + iA * rtA * rtA + iB * rtB * rtB;\n                vcp.tangentMass = kTangent > 0.0 ? 1.0 / kTangent : 0.0;\n                // Setup a velocity bias for restitution.\n                vcp.velocityBias = 0.0;\n                var vRel = Vec2.dot(this.v_normal, vB)\n                    + Vec2.dot(this.v_normal, Vec2.crossNumVec2(wB, vcp.rB))\n                    - Vec2.dot(this.v_normal, vA)\n                    - Vec2.dot(this.v_normal, Vec2.crossNumVec2(wA, vcp.rA));\n                if (vRel < -Settings.velocityThreshold) {\n                    vcp.velocityBias = -this.v_restitution * vRel;\n                }\n            }\n            // If we have two points, then prepare the block solver.\n            if (this.v_pointCount == 2 && step.blockSolve) {\n                var vcp1 = this.v_points[0]; // VelocityConstraintPoint\n                var vcp2 = this.v_points[1]; // VelocityConstraintPoint\n                var rn1A = Vec2.crossVec2Vec2(vcp1.rA, this.v_normal);\n                var rn1B = Vec2.crossVec2Vec2(vcp1.rB, this.v_normal);\n                var rn2A = Vec2.crossVec2Vec2(vcp2.rA, this.v_normal);\n                var rn2B = Vec2.crossVec2Vec2(vcp2.rB, this.v_normal);\n                var k11 = mA + mB + iA * rn1A * rn1A + iB * rn1B * rn1B;\n                var k22 = mA + mB + iA * rn2A * rn2A + iB * rn2B * rn2B;\n                var k12 = mA + mB + iA * rn1A * rn2A + iB * rn1B * rn2B;\n                // Ensure a reasonable condition number.\n                var k_maxConditionNumber = 1000.0;\n                if (k11 * k11 < k_maxConditionNumber * (k11 * k22 - k12 * k12)) {\n                    // K is safe to invert.\n                    this.v_K.ex.setNum(k11, k12);\n                    this.v_K.ey.setNum(k12, k22);\n                    this.v_normalMass.set(this.v_K.getInverse());\n                }\n                else {\n                    // The constraints are redundant, just use one.\n                    // TODO_ERIN use deepest?\n                    this.v_pointCount = 1;\n                }\n            }\n            positionA.c.setVec2(cA);\n            positionA.a = aA;\n            velocityA.v.setVec2(vA);\n            velocityA.w = wA;\n            positionB.c.setVec2(cB);\n            positionB.a = aB;\n            velocityB.v.setVec2(vB);\n            velocityB.w = wB;\n        };\n        Contact.prototype.warmStartConstraint = function (step) {\n            var fixtureA = this.m_fixtureA;\n            var fixtureB = this.m_fixtureB;\n            var bodyA = fixtureA.getBody();\n            var bodyB = fixtureB.getBody();\n            var velocityA = bodyA.c_velocity;\n            var velocityB = bodyB.c_velocity;\n            bodyA.c_position;\n            bodyB.c_position;\n            var mA = this.v_invMassA;\n            var iA = this.v_invIA;\n            var mB = this.v_invMassB;\n            var iB = this.v_invIB;\n            var vA = Vec2.clone(velocityA.v);\n            var wA = velocityA.w;\n            var vB = Vec2.clone(velocityB.v);\n            var wB = velocityB.w;\n            var normal = this.v_normal;\n            var tangent = Vec2.crossVec2Num(normal, 1.0);\n            for (var j = 0; j < this.v_pointCount; ++j) {\n                var vcp = this.v_points[j]; // VelocityConstraintPoint\n                var P = Vec2.combine(vcp.normalImpulse, normal, vcp.tangentImpulse, tangent);\n                wA -= iA * Vec2.crossVec2Vec2(vcp.rA, P);\n                vA.subMul(mA, P);\n                wB += iB * Vec2.crossVec2Vec2(vcp.rB, P);\n                vB.addMul(mB, P);\n            }\n            velocityA.v.setVec2(vA);\n            velocityA.w = wA;\n            velocityB.v.setVec2(vB);\n            velocityB.w = wB;\n        };\n        Contact.prototype.storeConstraintImpulses = function (step) {\n            var manifold = this.m_manifold;\n            for (var j = 0; j < this.v_pointCount; ++j) {\n                manifold.points[j].normalImpulse = this.v_points[j].normalImpulse;\n                manifold.points[j].tangentImpulse = this.v_points[j].tangentImpulse;\n            }\n        };\n        Contact.prototype.solveVelocityConstraint = function (step) {\n            var bodyA = this.m_fixtureA.m_body;\n            var bodyB = this.m_fixtureB.m_body;\n            var velocityA = bodyA.c_velocity;\n            bodyA.c_position;\n            var velocityB = bodyB.c_velocity;\n            bodyB.c_position;\n            var mA = this.v_invMassA;\n            var iA = this.v_invIA;\n            var mB = this.v_invMassB;\n            var iB = this.v_invIB;\n            var vA = Vec2.clone(velocityA.v);\n            var wA = velocityA.w;\n            var vB = Vec2.clone(velocityB.v);\n            var wB = velocityB.w;\n            var normal = this.v_normal;\n            var tangent = Vec2.crossVec2Num(normal, 1.0);\n            var friction = this.v_friction;\n            // Solve tangent constraints first because non-penetration is more important\n            // than friction.\n            for (var j = 0; j < this.v_pointCount; ++j) {\n                var vcp = this.v_points[j]; // VelocityConstraintPoint\n                // Relative velocity at contact\n                var dv = Vec2.zero();\n                dv.addCombine(1, vB, 1, Vec2.crossNumVec2(wB, vcp.rB));\n                dv.subCombine(1, vA, 1, Vec2.crossNumVec2(wA, vcp.rA));\n                // Compute tangent force\n                var vt = Vec2.dot(dv, tangent) - this.v_tangentSpeed;\n                var lambda = vcp.tangentMass * (-vt);\n                // Clamp the accumulated force\n                var maxFriction = friction * vcp.normalImpulse;\n                var newImpulse = math$1.clamp(vcp.tangentImpulse + lambda, -maxFriction, maxFriction);\n                lambda = newImpulse - vcp.tangentImpulse;\n                vcp.tangentImpulse = newImpulse;\n                // Apply contact impulse\n                var P = Vec2.mulNumVec2(lambda, tangent);\n                vA.subMul(mA, P);\n                wA -= iA * Vec2.crossVec2Vec2(vcp.rA, P);\n                vB.addMul(mB, P);\n                wB += iB * Vec2.crossVec2Vec2(vcp.rB, P);\n            }\n            // Solve normal constraints\n            if (this.v_pointCount == 1 || step.blockSolve == false) {\n                for (var i = 0; i < this.v_pointCount; ++i) {\n                    var vcp = this.v_points[i]; // VelocityConstraintPoint\n                    // Relative velocity at contact\n                    var dv = Vec2.zero();\n                    dv.addCombine(1, vB, 1, Vec2.crossNumVec2(wB, vcp.rB));\n                    dv.subCombine(1, vA, 1, Vec2.crossNumVec2(wA, vcp.rA));\n                    // Compute normal impulse\n                    var vn = Vec2.dot(dv, normal);\n                    var lambda = -vcp.normalMass * (vn - vcp.velocityBias);\n                    // Clamp the accumulated impulse\n                    var newImpulse = math$1.max(vcp.normalImpulse + lambda, 0.0);\n                    lambda = newImpulse - vcp.normalImpulse;\n                    vcp.normalImpulse = newImpulse;\n                    // Apply contact impulse\n                    var P = Vec2.mulNumVec2(lambda, normal);\n                    vA.subMul(mA, P);\n                    wA -= iA * Vec2.crossVec2Vec2(vcp.rA, P);\n                    vB.addMul(mB, P);\n                    wB += iB * Vec2.crossVec2Vec2(vcp.rB, P);\n                }\n            }\n            else {\n                // Block solver developed in collaboration with Dirk Gregorius (back in\n                // 01/07 on Box2D_Lite).\n                // Build the mini LCP for this contact patch\n                //\n                // vn = A * x + b, vn >= 0, , vn >= 0, x >= 0 and vn_i * x_i = 0 with i =\n                // 1..2\n                //\n                // A = J * W * JT and J = ( -n, -r1 x n, n, r2 x n )\n                // b = vn0 - velocityBias\n                //\n                // The system is solved using the \"Total enumeration method\" (s. Murty).\n                // The complementary constraint vn_i * x_i\n                // implies that we must have in any solution either vn_i = 0 or x_i = 0.\n                // So for the 2D contact problem the cases\n                // vn1 = 0 and vn2 = 0, x1 = 0 and x2 = 0, x1 = 0 and vn2 = 0, x2 = 0 and\n                // vn1 = 0 need to be tested. The first valid\n                // solution that satisfies the problem is chosen.\n                //\n                // In order to account of the accumulated impulse 'a' (because of the\n                // iterative nature of the solver which only requires\n                // that the accumulated impulse is clamped and not the incremental\n                // impulse) we change the impulse variable (x_i).\n                //\n                // Substitute:\n                //\n                // x = a + d\n                //\n                // a := old total impulse\n                // x := new total impulse\n                // d := incremental impulse\n                //\n                // For the current iteration we extend the formula for the incremental\n                // impulse\n                // to compute the new total impulse:\n                //\n                // vn = A * d + b\n                // = A * (x - a) + b\n                // = A * x + b - A * a\n                // = A * x + b'\n                // b' = b - A * a;\n                var vcp1 = this.v_points[0]; // VelocityConstraintPoint\n                var vcp2 = this.v_points[1]; // VelocityConstraintPoint\n                var a = Vec2.neo(vcp1.normalImpulse, vcp2.normalImpulse);\n                // Relative velocity at contact\n                var dv1 = Vec2.zero().add(vB).add(Vec2.crossNumVec2(wB, vcp1.rB)).sub(vA).sub(Vec2.crossNumVec2(wA, vcp1.rA));\n                var dv2 = Vec2.zero().add(vB).add(Vec2.crossNumVec2(wB, vcp2.rB)).sub(vA).sub(Vec2.crossNumVec2(wA, vcp2.rA));\n                // Compute normal velocity\n                var vn1 = Vec2.dot(dv1, normal);\n                var vn2 = Vec2.dot(dv2, normal);\n                var b = Vec2.neo(vn1 - vcp1.velocityBias, vn2 - vcp2.velocityBias);\n                // Compute b'\n                b.sub(Mat22.mulVec2(this.v_K, a));\n                // NOT_USED(k_errorTol);\n                while (true) {\n                    //\n                    // Case 1: vn = 0\n                    //\n                    // 0 = A * x + b'\n                    //\n                    // Solve for x:\n                    //\n                    // x = - inv(A) * b'\n                    //\n                    var x = Mat22.mulVec2(this.v_normalMass, b).neg();\n                    if (x.x >= 0.0 && x.y >= 0.0) {\n                        // Get the incremental impulse\n                        var d = Vec2.sub(x, a);\n                        // Apply incremental impulse\n                        var P1 = Vec2.mulNumVec2(d.x, normal);\n                        var P2 = Vec2.mulNumVec2(d.y, normal);\n                        vA.subCombine(mA, P1, mA, P2);\n                        wA -= iA * (Vec2.crossVec2Vec2(vcp1.rA, P1) + Vec2.crossVec2Vec2(vcp2.rA, P2));\n                        vB.addCombine(mB, P1, mB, P2);\n                        wB += iB * (Vec2.crossVec2Vec2(vcp1.rB, P1) + Vec2.crossVec2Vec2(vcp2.rB, P2));\n                        // Accumulate\n                        vcp1.normalImpulse = x.x;\n                        vcp2.normalImpulse = x.y;\n                        break;\n                    }\n                    //\n                    // Case 2: vn1 = 0 and x2 = 0\n                    //\n                    // 0 = a11 * x1 + a12 * 0 + b1'\n                    // vn2 = a21 * x1 + a22 * 0 + b2'\n                    //\n                    x.x = -vcp1.normalMass * b.x;\n                    x.y = 0.0;\n                    vn1 = 0.0;\n                    vn2 = this.v_K.ex.y * x.x + b.y;\n                    if (x.x >= 0.0 && vn2 >= 0.0) {\n                        // Get the incremental impulse\n                        var d = Vec2.sub(x, a);\n                        // Apply incremental impulse\n                        var P1 = Vec2.mulNumVec2(d.x, normal);\n                        var P2 = Vec2.mulNumVec2(d.y, normal);\n                        vA.subCombine(mA, P1, mA, P2);\n                        wA -= iA * (Vec2.crossVec2Vec2(vcp1.rA, P1) + Vec2.crossVec2Vec2(vcp2.rA, P2));\n                        vB.addCombine(mB, P1, mB, P2);\n                        wB += iB * (Vec2.crossVec2Vec2(vcp1.rB, P1) + Vec2.crossVec2Vec2(vcp2.rB, P2));\n                        // Accumulate\n                        vcp1.normalImpulse = x.x;\n                        vcp2.normalImpulse = x.y;\n                        break;\n                    }\n                    //\n                    // Case 3: vn2 = 0 and x1 = 0\n                    //\n                    // vn1 = a11 * 0 + a12 * x2 + b1'\n                    // 0 = a21 * 0 + a22 * x2 + b2'\n                    //\n                    x.x = 0.0;\n                    x.y = -vcp2.normalMass * b.y;\n                    vn1 = this.v_K.ey.x * x.y + b.x;\n                    vn2 = 0.0;\n                    if (x.y >= 0.0 && vn1 >= 0.0) {\n                        // Resubstitute for the incremental impulse\n                        var d = Vec2.sub(x, a);\n                        // Apply incremental impulse\n                        var P1 = Vec2.mulNumVec2(d.x, normal);\n                        var P2 = Vec2.mulNumVec2(d.y, normal);\n                        vA.subCombine(mA, P1, mA, P2);\n                        wA -= iA * (Vec2.crossVec2Vec2(vcp1.rA, P1) + Vec2.crossVec2Vec2(vcp2.rA, P2));\n                        vB.addCombine(mB, P1, mB, P2);\n                        wB += iB * (Vec2.crossVec2Vec2(vcp1.rB, P1) + Vec2.crossVec2Vec2(vcp2.rB, P2));\n                        // Accumulate\n                        vcp1.normalImpulse = x.x;\n                        vcp2.normalImpulse = x.y;\n                        break;\n                    }\n                    //\n                    // Case 4: x1 = 0 and x2 = 0\n                    //\n                    // vn1 = b1\n                    // vn2 = b2;\n                    //\n                    x.x = 0.0;\n                    x.y = 0.0;\n                    vn1 = b.x;\n                    vn2 = b.y;\n                    if (vn1 >= 0.0 && vn2 >= 0.0) {\n                        // Resubstitute for the incremental impulse\n                        var d = Vec2.sub(x, a);\n                        // Apply incremental impulse\n                        var P1 = Vec2.mulNumVec2(d.x, normal);\n                        var P2 = Vec2.mulNumVec2(d.y, normal);\n                        vA.subCombine(mA, P1, mA, P2);\n                        wA -= iA * (Vec2.crossVec2Vec2(vcp1.rA, P1) + Vec2.crossVec2Vec2(vcp2.rA, P2));\n                        vB.addCombine(mB, P1, mB, P2);\n                        wB += iB * (Vec2.crossVec2Vec2(vcp1.rB, P1) + Vec2.crossVec2Vec2(vcp2.rB, P2));\n                        // Accumulate\n                        vcp1.normalImpulse = x.x;\n                        vcp2.normalImpulse = x.y;\n                        break;\n                    }\n                    // No solution, give up. This is hit sometimes, but it doesn't seem to\n                    // matter.\n                    break;\n                }\n            }\n            velocityA.v.setVec2(vA);\n            velocityA.w = wA;\n            velocityB.v.setVec2(vB);\n            velocityB.w = wB;\n        };\n        /**\n         * @internal\n         */\n        Contact.addType = function (type1, type2, callback) {\n            s_registers[type1] = s_registers[type1] || {};\n            s_registers[type1][type2] = callback;\n        };\n        /**\n         * @internal\n         */\n        Contact.create = function (fixtureA, indexA, fixtureB, indexB) {\n            var typeA = fixtureA.getType();\n            var typeB = fixtureB.getType();\n            // TODO: pool contacts\n            var contact;\n            var evaluateFcn;\n            if (evaluateFcn = s_registers[typeA] && s_registers[typeA][typeB]) {\n                contact = new Contact(fixtureA, indexA, fixtureB, indexB, evaluateFcn);\n            }\n            else if (evaluateFcn = s_registers[typeB] && s_registers[typeB][typeA]) {\n                contact = new Contact(fixtureB, indexB, fixtureA, indexA, evaluateFcn);\n            }\n            else {\n                return null;\n            }\n            // Contact creation may swap fixtures.\n            fixtureA = contact.getFixtureA();\n            fixtureB = contact.getFixtureB();\n            indexA = contact.getChildIndexA();\n            indexB = contact.getChildIndexB();\n            var bodyA = fixtureA.getBody();\n            var bodyB = fixtureB.getBody();\n            // Connect to body A\n            contact.m_nodeA.contact = contact;\n            contact.m_nodeA.other = bodyB;\n            contact.m_nodeA.prev = null;\n            contact.m_nodeA.next = bodyA.m_contactList;\n            if (bodyA.m_contactList != null) {\n                bodyA.m_contactList.prev = contact.m_nodeA;\n            }\n            bodyA.m_contactList = contact.m_nodeA;\n            // Connect to body B\n            contact.m_nodeB.contact = contact;\n            contact.m_nodeB.other = bodyA;\n            contact.m_nodeB.prev = null;\n            contact.m_nodeB.next = bodyB.m_contactList;\n            if (bodyB.m_contactList != null) {\n                bodyB.m_contactList.prev = contact.m_nodeB;\n            }\n            bodyB.m_contactList = contact.m_nodeB;\n            // Wake up the bodies\n            if (fixtureA.isSensor() == false && fixtureB.isSensor() == false) {\n                bodyA.setAwake(true);\n                bodyB.setAwake(true);\n            }\n            return contact;\n        };\n        /**\n         * @internal\n         */\n        Contact.destroy = function (contact, listener) {\n            var fixtureA = contact.m_fixtureA;\n            var fixtureB = contact.m_fixtureB;\n            var bodyA = fixtureA.getBody();\n            var bodyB = fixtureB.getBody();\n            if (contact.isTouching()) {\n                listener.endContact(contact);\n            }\n            // Remove from body 1\n            if (contact.m_nodeA.prev) {\n                contact.m_nodeA.prev.next = contact.m_nodeA.next;\n            }\n            if (contact.m_nodeA.next) {\n                contact.m_nodeA.next.prev = contact.m_nodeA.prev;\n            }\n            if (contact.m_nodeA == bodyA.m_contactList) {\n                bodyA.m_contactList = contact.m_nodeA.next;\n            }\n            // Remove from body 2\n            if (contact.m_nodeB.prev) {\n                contact.m_nodeB.prev.next = contact.m_nodeB.next;\n            }\n            if (contact.m_nodeB.next) {\n                contact.m_nodeB.next.prev = contact.m_nodeB.prev;\n            }\n            if (contact.m_nodeB == bodyB.m_contactList) {\n                bodyB.m_contactList = contact.m_nodeB.next;\n            }\n            if (contact.m_manifold.pointCount > 0 && fixtureA.isSensor() == false\n                && fixtureB.isSensor() == false) {\n                bodyA.setAwake(true);\n                bodyB.setAwake(true);\n            }\n            fixtureA.getType();\n            fixtureB.getType();\n            // const destroyFcn = s_registers[typeA][typeB].destroyFcn;\n            // if (typeof destroyFcn === 'function') {\n            //   destroyFcn(contact);\n            // }\n        };\n        return Contact;\n    }());\n\n    /*\n     * Planck.js\n     * The MIT License\n     * Copyright (c) 2021 Erin Catto, Ali Shakiba\n     *\n     * Permission is hereby granted, free of charge, to any person obtaining a copy\n     * of this software and associated documentation files (the \"Software\"), to deal\n     * in the Software without restriction, including without limitation the rights\n     * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n     * copies of the Software, and to permit persons to whom the Software is\n     * furnished to do so, subject to the following conditions:\n     *\n     * The above copyright notice and this permission notice shall be included in all\n     * copies or substantial portions of the Software.\n     *\n     * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n     * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n     * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n     * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n     * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n     * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n     * SOFTWARE.\n     */\n    /**\n     * A joint edge is used to connect bodies and joints together in a joint graph\n     * where each body is a node and each joint is an edge. A joint edge belongs to\n     * a doubly linked list maintained in each attached body. Each joint has two\n     * joint nodes, one for each attached body.\n     */\n    var JointEdge = /** @class */ (function () {\n        function JointEdge() {\n            /**\n             * provides quick access to the other body attached.\n             */\n            this.other = null;\n            /**\n             * the joint\n             */\n            this.joint = null;\n            /**\n             * prev the previous joint edge in the body's joint list\n             */\n            this.prev = null;\n            /**\n             * the next joint edge in the body's joint list\n             */\n            this.next = null;\n        }\n        return JointEdge;\n    }());\n    /**\n     * The base joint class. Joints are used to constraint two bodies together in\n     * various fashions. Some joints also feature limits and motors.\n     */\n    var Joint = /** @class */ (function () {\n        function Joint(def, bodyA, bodyB) {\n            /** @internal */ this.m_type = 'unknown-joint';\n            /** @internal */ this.m_prev = null;\n            /** @internal */ this.m_next = null;\n            /** @internal */ this.m_edgeA = new JointEdge();\n            /** @internal */ this.m_edgeB = new JointEdge();\n            /** @internal */ this.m_islandFlag = false;\n            bodyA = 'bodyA' in def ? def.bodyA : bodyA;\n            bodyB = 'bodyB' in def ? def.bodyB : bodyB;\n            this.m_bodyA = bodyA;\n            this.m_bodyB = bodyB;\n            this.m_collideConnected = !!def.collideConnected;\n            this.m_userData = def.userData;\n        }\n        /**\n         * Short-cut function to determine if either body is inactive.\n         */\n        Joint.prototype.isActive = function () {\n            return this.m_bodyA.isActive() && this.m_bodyB.isActive();\n        };\n        /**\n         * Get the type of the concrete joint.\n         */\n        Joint.prototype.getType = function () {\n            return this.m_type;\n        };\n        /**\n         * Get the first body attached to this joint.\n         */\n        Joint.prototype.getBodyA = function () {\n            return this.m_bodyA;\n        };\n        /**\n         * Get the second body attached to this joint.\n         */\n        Joint.prototype.getBodyB = function () {\n            return this.m_bodyB;\n        };\n        /**\n         * Get the next joint the world joint list.\n         */\n        Joint.prototype.getNext = function () {\n            return this.m_next;\n        };\n        Joint.prototype.getUserData = function () {\n            return this.m_userData;\n        };\n        Joint.prototype.setUserData = function (data) {\n            this.m_userData = data;\n        };\n        /**\n         * Get collide connected. Note: modifying the collide connect flag won't work\n         * correctly because the flag is only checked when fixture AABBs begin to\n         * overlap.\n         */\n        Joint.prototype.getCollideConnected = function () {\n            return this.m_collideConnected;\n        };\n        /**\n         * Shift the origin for any points stored in world coordinates.\n         */\n        Joint.prototype.shiftOrigin = function (newOrigin) { };\n        return Joint;\n    }());\n\n    var now = function () {\n        return Date.now();\n    };\n    var diff = function (time) {\n        return Date.now() - time;\n    };\n    var Timer = {\n        now: now,\n        diff: diff,\n    };\n\n    /*\n     * Planck.js\n     * The MIT License\n     * Copyright (c) 2021 Erin Catto, Ali Shakiba\n     *\n     * Permission is hereby granted, free of charge, to any person obtaining a copy\n     * of this software and associated documentation files (the \"Software\"), to deal\n     * in the Software without restriction, including without limitation the rights\n     * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n     * copies of the Software, and to permit persons to whom the Software is\n     * furnished to do so, subject to the following conditions:\n     *\n     * The above copyright notice and this permission notice shall be included in all\n     * copies or substantial portions of the Software.\n     *\n     * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n     * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n     * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n     * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n     * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n     * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n     * SOFTWARE.\n     */\n    /**\n     * Input parameters for TimeOfImpact.\n     */\n    var TOIInput = /** @class */ (function () {\n        function TOIInput() {\n            this.proxyA = new DistanceProxy();\n            this.proxyB = new DistanceProxy();\n            this.sweepA = new Sweep();\n            this.sweepB = new Sweep();\n        }\n        return TOIInput;\n    }());\n    var TOIOutputState;\n    (function (TOIOutputState) {\n        TOIOutputState[TOIOutputState[\"e_unknown\"] = 0] = \"e_unknown\";\n        TOIOutputState[TOIOutputState[\"e_failed\"] = 1] = \"e_failed\";\n        TOIOutputState[TOIOutputState[\"e_overlapped\"] = 2] = \"e_overlapped\";\n        TOIOutputState[TOIOutputState[\"e_touching\"] = 3] = \"e_touching\";\n        TOIOutputState[TOIOutputState[\"e_separated\"] = 4] = \"e_separated\";\n    })(TOIOutputState || (TOIOutputState = {}));\n    /**\n     * Output parameters for TimeOfImpact.\n     */\n    var TOIOutput = /** @class */ (function () {\n        function TOIOutput() {\n        }\n        return TOIOutput;\n    }());\n    stats$1.toiTime = 0;\n    stats$1.toiMaxTime = 0;\n    stats$1.toiCalls = 0;\n    stats$1.toiIters = 0;\n    stats$1.toiMaxIters = 0;\n    stats$1.toiRootIters = 0;\n    stats$1.toiMaxRootIters = 0;\n    /**\n     * Compute the upper bound on time before two shapes penetrate. Time is\n     * represented as a fraction between [0,tMax]. This uses a swept separating axis\n     * and may miss some intermediate, non-tunneling collision. If you change the\n     * time interval, you should call this function again.\n     *\n     * Note: use Distance to compute the contact point and normal at the time of\n     * impact.\n     *\n     * CCD via the local separating axis method. This seeks progression by computing\n     * the largest time at which separation is maintained.\n     */\n    function TimeOfImpact(output, input) {\n        var timer = Timer.now();\n        ++stats$1.toiCalls;\n        output.state = TOIOutputState.e_unknown;\n        output.t = input.tMax;\n        var proxyA = input.proxyA; // DistanceProxy\n        var proxyB = input.proxyB; // DistanceProxy\n        var sweepA = input.sweepA; // Sweep\n        var sweepB = input.sweepB; // Sweep\n        // Large rotations can make the root finder fail, so we normalize the\n        // sweep angles.\n        sweepA.normalize();\n        sweepB.normalize();\n        var tMax = input.tMax;\n        var totalRadius = proxyA.m_radius + proxyB.m_radius;\n        var target = math$1.max(Settings.linearSlop, totalRadius - 3.0 * Settings.linearSlop);\n        var tolerance = 0.25 * Settings.linearSlop;\n        var t1 = 0.0;\n        var k_maxIterations = Settings.maxTOIIterations;\n        var iter = 0;\n        // Prepare input for distance query.\n        var cache = new SimplexCache();\n        var distanceInput = new DistanceInput();\n        distanceInput.proxyA = input.proxyA;\n        distanceInput.proxyB = input.proxyB;\n        distanceInput.useRadii = false;\n        // The outer loop progressively attempts to compute new separating axes.\n        // This loop terminates when an axis is repeated (no progress is made).\n        while (true) {\n            var xfA = Transform.identity();\n            var xfB = Transform.identity();\n            sweepA.getTransform(xfA, t1);\n            sweepB.getTransform(xfB, t1);\n            // Get the distance between shapes. We can also use the results\n            // to get a separating axis.\n            distanceInput.transformA = xfA;\n            distanceInput.transformB = xfB;\n            var distanceOutput = new DistanceOutput();\n            Distance(distanceOutput, cache, distanceInput);\n            // If the shapes are overlapped, we give up on continuous collision.\n            if (distanceOutput.distance <= 0.0) {\n                // Failure!\n                output.state = TOIOutputState.e_overlapped;\n                output.t = 0.0;\n                break;\n            }\n            if (distanceOutput.distance < target + tolerance) {\n                // Victory!\n                output.state = TOIOutputState.e_touching;\n                output.t = t1;\n                break;\n            }\n            // Initialize the separating axis.\n            var fcn = new SeparationFunction();\n            fcn.initialize(cache, proxyA, sweepA, proxyB, sweepB, t1);\n            // if (false) {\n            //   // Dump the curve seen by the root finder\n            //   const N = 100;\n            //   const dx = 1.0 / N;\n            //   const xs = []; // [ N + 1 ];\n            //   const fs = []; // [ N + 1 ];\n            //   const x = 0.0;\n            //   for (const i = 0; i <= N; ++i) {\n            //     sweepA.getTransform(xfA, x);\n            //     sweepB.getTransform(xfB, x);\n            //     const f = fcn.evaluate(xfA, xfB) - target;\n            //     printf(\"%g %g\\n\", x, f);\n            //     xs[i] = x;\n            //     fs[i] = f;\n            //     x += dx;\n            //   }\n            // }\n            // Compute the TOI on the separating axis. We do this by successively\n            // resolving the deepest point. This loop is bounded by the number of\n            // vertices.\n            var done = false;\n            var t2 = tMax;\n            var pushBackIter = 0;\n            while (true) {\n                // Find the deepest point at t2. Store the witness point indices.\n                var s2 = fcn.findMinSeparation(t2);\n                // const indexA = fcn.indexA;\n                // const indexB = fcn.indexB;\n                // Is the final configuration separated?\n                if (s2 > target + tolerance) {\n                    // Victory!\n                    output.state = TOIOutputState.e_separated;\n                    output.t = tMax;\n                    done = true;\n                    break;\n                }\n                // Has the separation reached tolerance?\n                if (s2 > target - tolerance) {\n                    // Advance the sweeps\n                    t1 = t2;\n                    break;\n                }\n                // Compute the initial separation of the witness points.\n                var s1 = fcn.evaluate(t1);\n                // const indexA = fcn.indexA;\n                // const indexB = fcn.indexB;\n                // Check for initial overlap. This might happen if the root finder\n                // runs out of iterations.\n                if (s1 < target - tolerance) {\n                    output.state = TOIOutputState.e_failed;\n                    output.t = t1;\n                    done = true;\n                    break;\n                }\n                // Check for touching\n                if (s1 <= target + tolerance) {\n                    // Victory! t1 should hold the TOI (could be 0.0).\n                    output.state = TOIOutputState.e_touching;\n                    output.t = t1;\n                    done = true;\n                    break;\n                }\n                // Compute 1D root of: f(x) - target = 0\n                var rootIterCount = 0;\n                var a1 = t1;\n                var a2 = t2;\n                while (true) {\n                    // Use a mix of the secant rule and bisection.\n                    var t = void 0;\n                    if (rootIterCount & 1) {\n                        // Secant rule to improve convergence.\n                        t = a1 + (target - s1) * (a2 - a1) / (s2 - s1);\n                    }\n                    else {\n                        // Bisection to guarantee progress.\n                        t = 0.5 * (a1 + a2);\n                    }\n                    ++rootIterCount;\n                    ++stats$1.toiRootIters;\n                    var s = fcn.evaluate(t);\n                    fcn.indexA;\n                    fcn.indexB;\n                    if (math$1.abs(s - target) < tolerance) {\n                        // t2 holds a tentative value for t1\n                        t2 = t;\n                        break;\n                    }\n                    // Ensure we continue to bracket the root.\n                    if (s > target) {\n                        a1 = t;\n                        s1 = s;\n                    }\n                    else {\n                        a2 = t;\n                        s2 = s;\n                    }\n                    if (rootIterCount === 50) {\n                        break;\n                    }\n                }\n                stats$1.toiMaxRootIters = math$1.max(stats$1.toiMaxRootIters, rootIterCount);\n                ++pushBackIter;\n                if (pushBackIter === Settings.maxPolygonVertices) {\n                    break;\n                }\n            }\n            ++iter;\n            ++stats$1.toiIters;\n            if (done) {\n                break;\n            }\n            if (iter === k_maxIterations) {\n                // Root finder got stuck. Semi-victory.\n                output.state = TOIOutputState.e_failed;\n                output.t = t1;\n                break;\n            }\n        }\n        stats$1.toiMaxIters = math$1.max(stats$1.toiMaxIters, iter);\n        var time = Timer.diff(timer);\n        stats$1.toiMaxTime = math$1.max(stats$1.toiMaxTime, time);\n        stats$1.toiTime += time;\n    }\n    var SeparationFunctionType;\n    (function (SeparationFunctionType) {\n        SeparationFunctionType[SeparationFunctionType[\"e_points\"] = 1] = \"e_points\";\n        SeparationFunctionType[SeparationFunctionType[\"e_faceA\"] = 2] = \"e_faceA\";\n        SeparationFunctionType[SeparationFunctionType[\"e_faceB\"] = 3] = \"e_faceB\";\n    })(SeparationFunctionType || (SeparationFunctionType = {}));\n    var SeparationFunction = /** @class */ (function () {\n        function SeparationFunction() {\n            this.m_proxyA = new DistanceProxy();\n            this.m_proxyB = new DistanceProxy();\n            this.m_localPoint = Vec2.zero();\n            this.m_axis = Vec2.zero();\n        }\n        // TODO_ERIN might not need to return the separation\n        SeparationFunction.prototype.initialize = function (cache, proxyA, sweepA, proxyB, sweepB, t1) {\n            this.m_proxyA = proxyA;\n            this.m_proxyB = proxyB;\n            var count = cache.count;\n            this.m_sweepA = sweepA;\n            this.m_sweepB = sweepB;\n            var xfA = Transform.identity();\n            var xfB = Transform.identity();\n            this.m_sweepA.getTransform(xfA, t1);\n            this.m_sweepB.getTransform(xfB, t1);\n            if (count === 1) {\n                this.m_type = SeparationFunctionType.e_points;\n                var localPointA = this.m_proxyA.getVertex(cache.indexA[0]);\n                var localPointB = this.m_proxyB.getVertex(cache.indexB[0]);\n                var pointA = Transform.mulVec2(xfA, localPointA);\n                var pointB = Transform.mulVec2(xfB, localPointB);\n                this.m_axis.setCombine(1, pointB, -1, pointA);\n                var s = this.m_axis.normalize();\n                return s;\n            }\n            else if (cache.indexA[0] === cache.indexA[1]) {\n                // Two points on B and one on A.\n                this.m_type = SeparationFunctionType.e_faceB;\n                var localPointB1 = proxyB.getVertex(cache.indexB[0]);\n                var localPointB2 = proxyB.getVertex(cache.indexB[1]);\n                this.m_axis = Vec2.crossVec2Num(Vec2.sub(localPointB2, localPointB1), 1.0);\n                this.m_axis.normalize();\n                var normal = Rot.mulVec2(xfB.q, this.m_axis);\n                this.m_localPoint = Vec2.mid(localPointB1, localPointB2);\n                var pointB = Transform.mulVec2(xfB, this.m_localPoint);\n                var localPointA = proxyA.getVertex(cache.indexA[0]);\n                var pointA = Transform.mulVec2(xfA, localPointA);\n                var s = Vec2.dot(pointA, normal) - Vec2.dot(pointB, normal);\n                if (s < 0.0) {\n                    this.m_axis = Vec2.neg(this.m_axis);\n                    s = -s;\n                }\n                return s;\n            }\n            else {\n                // Two points on A and one or two points on B.\n                this.m_type = SeparationFunctionType.e_faceA;\n                var localPointA1 = this.m_proxyA.getVertex(cache.indexA[0]);\n                var localPointA2 = this.m_proxyA.getVertex(cache.indexA[1]);\n                this.m_axis = Vec2.crossVec2Num(Vec2.sub(localPointA2, localPointA1), 1.0);\n                this.m_axis.normalize();\n                var normal = Rot.mulVec2(xfA.q, this.m_axis);\n                this.m_localPoint = Vec2.mid(localPointA1, localPointA2);\n                var pointA = Transform.mulVec2(xfA, this.m_localPoint);\n                var localPointB = this.m_proxyB.getVertex(cache.indexB[0]);\n                var pointB = Transform.mulVec2(xfB, localPointB);\n                var s = Vec2.dot(pointB, normal) - Vec2.dot(pointA, normal);\n                if (s < 0.0) {\n                    this.m_axis = Vec2.neg(this.m_axis);\n                    s = -s;\n                }\n                return s;\n            }\n        };\n        SeparationFunction.prototype.compute = function (find, t) {\n            // It was findMinSeparation and evaluate\n            var xfA = Transform.identity();\n            var xfB = Transform.identity();\n            this.m_sweepA.getTransform(xfA, t);\n            this.m_sweepB.getTransform(xfB, t);\n            switch (this.m_type) {\n                case SeparationFunctionType.e_points: {\n                    if (find) {\n                        var axisA = Rot.mulTVec2(xfA.q, this.m_axis);\n                        var axisB = Rot.mulTVec2(xfB.q, Vec2.neg(this.m_axis));\n                        this.indexA = this.m_proxyA.getSupport(axisA);\n                        this.indexB = this.m_proxyB.getSupport(axisB);\n                    }\n                    var localPointA = this.m_proxyA.getVertex(this.indexA);\n                    var localPointB = this.m_proxyB.getVertex(this.indexB);\n                    var pointA = Transform.mulVec2(xfA, localPointA);\n                    var pointB = Transform.mulVec2(xfB, localPointB);\n                    var sep = Vec2.dot(pointB, this.m_axis) - Vec2.dot(pointA, this.m_axis);\n                    return sep;\n                }\n                case SeparationFunctionType.e_faceA: {\n                    var normal = Rot.mulVec2(xfA.q, this.m_axis);\n                    var pointA = Transform.mulVec2(xfA, this.m_localPoint);\n                    if (find) {\n                        var axisB = Rot.mulTVec2(xfB.q, Vec2.neg(normal));\n                        this.indexA = -1;\n                        this.indexB = this.m_proxyB.getSupport(axisB);\n                    }\n                    var localPointB = this.m_proxyB.getVertex(this.indexB);\n                    var pointB = Transform.mulVec2(xfB, localPointB);\n                    var sep = Vec2.dot(pointB, normal) - Vec2.dot(pointA, normal);\n                    return sep;\n                }\n                case SeparationFunctionType.e_faceB: {\n                    var normal = Rot.mulVec2(xfB.q, this.m_axis);\n                    var pointB = Transform.mulVec2(xfB, this.m_localPoint);\n                    if (find) {\n                        var axisA = Rot.mulTVec2(xfA.q, Vec2.neg(normal));\n                        this.indexB = -1;\n                        this.indexA = this.m_proxyA.getSupport(axisA);\n                    }\n                    var localPointA = this.m_proxyA.getVertex(this.indexA);\n                    var pointA = Transform.mulVec2(xfA, localPointA);\n                    var sep = Vec2.dot(pointA, normal) - Vec2.dot(pointB, normal);\n                    return sep;\n                }\n                default:\n                    if (find) {\n                        this.indexA = -1;\n                        this.indexB = -1;\n                    }\n                    return 0.0;\n            }\n        };\n        SeparationFunction.prototype.findMinSeparation = function (t) {\n            return this.compute(true, t);\n        };\n        SeparationFunction.prototype.evaluate = function (t) {\n            return this.compute(false, t);\n        };\n        return SeparationFunction;\n    }());\n\n    /*\n     * Planck.js\n     * The MIT License\n     * Copyright (c) 2021 Erin Catto, Ali Shakiba\n     *\n     * Permission is hereby granted, free of charge, to any person obtaining a copy\n     * of this software and associated documentation files (the \"Software\"), to deal\n     * in the Software without restriction, including without limitation the rights\n     * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n     * copies of the Software, and to permit persons to whom the Software is\n     * furnished to do so, subject to the following conditions:\n     *\n     * The above copyright notice and this permission notice shall be included in all\n     * copies or substantial portions of the Software.\n     *\n     * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n     * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n     * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n     * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n     * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n     * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n     * SOFTWARE.\n     */\n    var TimeStep = /** @class */ (function () {\n        function TimeStep() {\n            /** time step */\n            this.dt = 0;\n            /** inverse time step (0 if dt == 0) */\n            this.inv_dt = 0;\n            this.velocityIterations = 0;\n            this.positionIterations = 0;\n            this.warmStarting = false;\n            this.blockSolve = true;\n            /** timestep ratio for variable timestep */\n            this.inv_dt0 = 0.0;\n            /** dt * inv_dt0 */\n            this.dtRatio = 1;\n        }\n        TimeStep.prototype.reset = function (dt) {\n            if (this.dt > 0.0) {\n                this.inv_dt0 = this.inv_dt;\n            }\n            this.dt = dt;\n            this.inv_dt = dt == 0 ? 0 : 1 / dt;\n            this.dtRatio = dt * this.inv_dt0;\n        };\n        return TimeStep;\n    }());\n    // reuse\n    var s_subStep = new TimeStep();\n    /**\n     * Contact impulses for reporting. Impulses are used instead of forces because\n     * sub-step forces may approach infinity for rigid body collisions. These match\n     * up one-to-one with the contact points in Manifold.\n     */\n    var ContactImpulse = /** @class */ (function () {\n        function ContactImpulse(contact) {\n            this.contact = contact;\n            this.normals = [];\n            this.tangents = [];\n        }\n        Object.defineProperty(ContactImpulse.prototype, \"normalImpulses\", {\n            get: function () {\n                var contact = this.contact;\n                var normals = this.normals;\n                normals.length = 0;\n                for (var p = 0; p < contact.v_points.length; ++p) {\n                    normals.push(contact.v_points[p].normalImpulse);\n                }\n                return normals;\n            },\n            enumerable: false,\n            configurable: true\n        });\n        Object.defineProperty(ContactImpulse.prototype, \"tangentImpulses\", {\n            get: function () {\n                var contact = this.contact;\n                var tangents = this.tangents;\n                tangents.length = 0;\n                for (var p = 0; p < contact.v_points.length; ++p) {\n                    tangents.push(contact.v_points[p].tangentImpulse);\n                }\n                return tangents;\n            },\n            enumerable: false,\n            configurable: true\n        });\n        return ContactImpulse;\n    }());\n    /**\n     * Finds and solves islands. An island is a connected subset of the world.\n     */\n    var Solver = /** @class */ (function () {\n        function Solver(world) {\n            this.m_world = world;\n            this.m_stack = [];\n            this.m_bodies = [];\n            this.m_contacts = [];\n            this.m_joints = [];\n        }\n        Solver.prototype.clear = function () {\n            this.m_stack.length = 0;\n            this.m_bodies.length = 0;\n            this.m_contacts.length = 0;\n            this.m_joints.length = 0;\n        };\n        Solver.prototype.addBody = function (body) {\n            this.m_bodies.push(body);\n            // why?\n            // body.c_position.c.setZero();\n            // body.c_position.a = 0;\n            // body.c_velocity.v.setZero();\n            // body.c_velocity.w = 0;\n        };\n        Solver.prototype.addContact = function (contact) {\n            this.m_contacts.push(contact);\n        };\n        Solver.prototype.addJoint = function (joint) {\n            this.m_joints.push(joint);\n        };\n        Solver.prototype.solveWorld = function (step) {\n            var world = this.m_world;\n            // Clear all the island flags.\n            for (var b = world.m_bodyList; b; b = b.m_next) {\n                b.m_islandFlag = false;\n            }\n            for (var c = world.m_contactList; c; c = c.m_next) {\n                c.m_islandFlag = false;\n            }\n            for (var j = world.m_jointList; j; j = j.m_next) {\n                j.m_islandFlag = false;\n            }\n            // Build and simulate all awake islands.\n            var stack = this.m_stack;\n            for (var seed = world.m_bodyList; seed; seed = seed.m_next) {\n                if (seed.m_islandFlag) {\n                    continue;\n                }\n                if (seed.isAwake() == false || seed.isActive() == false) {\n                    continue;\n                }\n                // The seed can be dynamic or kinematic.\n                if (seed.isStatic()) {\n                    continue;\n                }\n                // Reset island and stack.\n                this.clear();\n                stack.push(seed);\n                seed.m_islandFlag = true;\n                // Perform a depth first search (DFS) on the constraint graph.\n                while (stack.length > 0) {\n                    // Grab the next body off the stack and add it to the island.\n                    var b = stack.pop();\n                    this.addBody(b);\n                    // Make sure the body is awake.\n                    b.setAwake(true);\n                    // To keep islands as small as possible, we don't\n                    // propagate islands across static bodies.\n                    if (b.isStatic()) {\n                        continue;\n                    }\n                    // Search all contacts connected to this body.\n                    for (var ce = b.m_contactList; ce; ce = ce.next) {\n                        var contact = ce.contact;\n                        // Has this contact already been added to an island?\n                        if (contact.m_islandFlag) {\n                            continue;\n                        }\n                        // Is this contact solid and touching?\n                        if (contact.isEnabled() == false || contact.isTouching() == false) {\n                            continue;\n                        }\n                        // Skip sensors.\n                        var sensorA = contact.m_fixtureA.m_isSensor;\n                        var sensorB = contact.m_fixtureB.m_isSensor;\n                        if (sensorA || sensorB) {\n                            continue;\n                        }\n                        this.addContact(contact);\n                        contact.m_islandFlag = true;\n                        var other = ce.other;\n                        // Was the other body already added to this island?\n                        if (other.m_islandFlag) {\n                            continue;\n                        }\n                        // _ASSERT && common.assert(stack.length < world.m_bodyCount);\n                        stack.push(other);\n                        other.m_islandFlag = true;\n                    }\n                    // Search all joints connect to this body.\n                    for (var je = b.m_jointList; je; je = je.next) {\n                        if (je.joint.m_islandFlag == true) {\n                            continue;\n                        }\n                        var other = je.other;\n                        // Don't simulate joints connected to inactive bodies.\n                        if (other.isActive() == false) {\n                            continue;\n                        }\n                        this.addJoint(je.joint);\n                        je.joint.m_islandFlag = true;\n                        if (other.m_islandFlag) {\n                            continue;\n                        }\n                        // _ASSERT && common.assert(stack.length < world.m_bodyCount);\n                        stack.push(other);\n                        other.m_islandFlag = true;\n                    }\n                }\n                this.solveIsland(step);\n                // Post solve cleanup.\n                for (var i = 0; i < this.m_bodies.length; ++i) {\n                    // Allow static bodies to participate in other islands.\n                    // TODO: are they added at all?\n                    var b = this.m_bodies[i];\n                    if (b.isStatic()) {\n                        b.m_islandFlag = false;\n                    }\n                }\n            }\n        };\n        Solver.prototype.solveIsland = function (step) {\n            // B2: Island Solve\n            var world = this.m_world;\n            var gravity = world.m_gravity;\n            var allowSleep = world.m_allowSleep;\n            var h = step.dt;\n            // Integrate velocities and apply damping. Initialize the body state.\n            for (var i = 0; i < this.m_bodies.length; ++i) {\n                var body = this.m_bodies[i];\n                var c = Vec2.clone(body.m_sweep.c);\n                var a = body.m_sweep.a;\n                var v = Vec2.clone(body.m_linearVelocity);\n                var w = body.m_angularVelocity;\n                // Store positions for continuous collision.\n                body.m_sweep.c0.setVec2(body.m_sweep.c);\n                body.m_sweep.a0 = body.m_sweep.a;\n                if (body.isDynamic()) {\n                    // Integrate velocities.\n                    v.addMul(h * body.m_gravityScale, gravity);\n                    v.addMul(h * body.m_invMass, body.m_force);\n                    w += h * body.m_invI * body.m_torque;\n                    /**\n                     * <pre>\n                     * Apply damping.\n                     * ODE: dv/dt + c * v = 0\n                     * Solution: v(t) = v0 * exp(-c * t)\n                     * Time step: v(t + dt) = v0 * exp(-c * (t + dt)) = v0 * exp(-c * t) * exp(-c * dt) = v * exp(-c * dt)\n                     * v2 = exp(-c * dt) * v1\n                     * Pade approximation:\n                     * v2 = v1 * 1 / (1 + c * dt)\n                     * </pre>\n                     */\n                    v.mul(1.0 / (1.0 + h * body.m_linearDamping));\n                    w *= 1.0 / (1.0 + h * body.m_angularDamping);\n                }\n                body.c_position.c = c;\n                body.c_position.a = a;\n                body.c_velocity.v = v;\n                body.c_velocity.w = w;\n            }\n            for (var i = 0; i < this.m_contacts.length; ++i) {\n                var contact = this.m_contacts[i];\n                contact.initConstraint(step);\n            }\n            for (var i = 0; i < this.m_contacts.length; ++i) {\n                var contact = this.m_contacts[i];\n                contact.initVelocityConstraint(step);\n            }\n            if (step.warmStarting) {\n                // Warm start.\n                for (var i = 0; i < this.m_contacts.length; ++i) {\n                    var contact = this.m_contacts[i];\n                    contact.warmStartConstraint(step);\n                }\n            }\n            for (var i = 0; i < this.m_joints.length; ++i) {\n                var joint = this.m_joints[i];\n                joint.initVelocityConstraints(step);\n            }\n            // Solve velocity constraints\n            for (var i = 0; i < step.velocityIterations; ++i) {\n                for (var j = 0; j < this.m_joints.length; ++j) {\n                    var joint = this.m_joints[j];\n                    joint.solveVelocityConstraints(step);\n                }\n                for (var j = 0; j < this.m_contacts.length; ++j) {\n                    var contact = this.m_contacts[j];\n                    contact.solveVelocityConstraint(step);\n                }\n            }\n            // Store impulses for warm starting\n            for (var i = 0; i < this.m_contacts.length; ++i) {\n                var contact = this.m_contacts[i];\n                contact.storeConstraintImpulses(step);\n            }\n            // Integrate positions\n            for (var i = 0; i < this.m_bodies.length; ++i) {\n                var body = this.m_bodies[i];\n                var c = Vec2.clone(body.c_position.c);\n                var a = body.c_position.a;\n                var v = Vec2.clone(body.c_velocity.v);\n                var w = body.c_velocity.w;\n                // Check for large velocities\n                var translation = Vec2.mulNumVec2(h, v);\n                if (Vec2.lengthSquared(translation) > Settings.maxTranslationSquared) {\n                    var ratio = Settings.maxTranslation / translation.length();\n                    v.mul(ratio);\n                }\n                var rotation = h * w;\n                if (rotation * rotation > Settings.maxRotationSquared) {\n                    var ratio = Settings.maxRotation / math$1.abs(rotation);\n                    w *= ratio;\n                }\n                // Integrate\n                c.addMul(h, v);\n                a += h * w;\n                body.c_position.c.setVec2(c);\n                body.c_position.a = a;\n                body.c_velocity.v.setVec2(v);\n                body.c_velocity.w = w;\n            }\n            // Solve position constraints\n            var positionSolved = false;\n            for (var i = 0; i < step.positionIterations; ++i) {\n                var minSeparation = 0.0;\n                for (var j = 0; j < this.m_contacts.length; ++j) {\n                    var contact = this.m_contacts[j];\n                    var separation = contact.solvePositionConstraint(step);\n                    minSeparation = math$1.min(minSeparation, separation);\n                }\n                // We can't expect minSpeparation >= -Settings.linearSlop because we don't\n                // push the separation above -Settings.linearSlop.\n                var contactsOkay = minSeparation >= -3.0 * Settings.linearSlop;\n                var jointsOkay = true;\n                for (var j = 0; j < this.m_joints.length; ++j) {\n                    var joint = this.m_joints[j];\n                    var jointOkay = joint.solvePositionConstraints(step);\n                    jointsOkay = jointsOkay && jointOkay;\n                }\n                if (contactsOkay && jointsOkay) {\n                    // Exit early if the position errors are small.\n                    positionSolved = true;\n                    break;\n                }\n            }\n            // Copy state buffers back to the bodies\n            for (var i = 0; i < this.m_bodies.length; ++i) {\n                var body = this.m_bodies[i];\n                body.m_sweep.c.setVec2(body.c_position.c);\n                body.m_sweep.a = body.c_position.a;\n                body.m_linearVelocity.setVec2(body.c_velocity.v);\n                body.m_angularVelocity = body.c_velocity.w;\n                body.synchronizeTransform();\n            }\n            this.postSolveIsland();\n            if (allowSleep) {\n                var minSleepTime = Infinity;\n                var linTolSqr = Settings.linearSleepToleranceSqr;\n                var angTolSqr = Settings.angularSleepToleranceSqr;\n                for (var i = 0; i < this.m_bodies.length; ++i) {\n                    var body = this.m_bodies[i];\n                    if (body.isStatic()) {\n                        continue;\n                    }\n                    if ((body.m_autoSleepFlag == false)\n                        || (body.m_angularVelocity * body.m_angularVelocity > angTolSqr)\n                        || (Vec2.lengthSquared(body.m_linearVelocity) > linTolSqr)) {\n                        body.m_sleepTime = 0.0;\n                        minSleepTime = 0.0;\n                    }\n                    else {\n                        body.m_sleepTime += h;\n                        minSleepTime = math$1.min(minSleepTime, body.m_sleepTime);\n                    }\n                }\n                if (minSleepTime >= Settings.timeToSleep && positionSolved) {\n                    for (var i = 0; i < this.m_bodies.length; ++i) {\n                        var body = this.m_bodies[i];\n                        body.setAwake(false);\n                    }\n                }\n            }\n        };\n        /** @internal */\n        Solver.prototype.printBodies = function (tag) {\n            for (var i = 0; i < this.m_bodies.length; ++i) {\n                var b = this.m_bodies[i];\n                common.debug(tag, b.c_position.a, b.c_position.c.x, b.c_position.c.y, b.c_velocity.w, b.c_velocity.v.x, b.c_velocity.v.y);\n            }\n        };\n        /**\n         * Find TOI contacts and solve them.\n         */\n        Solver.prototype.solveWorldTOI = function (step) {\n            var world = this.m_world;\n            if (world.m_stepComplete) {\n                for (var b = world.m_bodyList; b; b = b.m_next) {\n                    b.m_islandFlag = false;\n                    b.m_sweep.alpha0 = 0.0;\n                }\n                for (var c = world.m_contactList; c; c = c.m_next) {\n                    // Invalidate TOI\n                    c.m_toiFlag = false;\n                    c.m_islandFlag = false;\n                    c.m_toiCount = 0;\n                    c.m_toi = 1.0;\n                }\n            }\n            // Find TOI events and solve them.\n            while (true) {\n                // Find the first TOI.\n                var minContact = null; // Contact\n                var minAlpha = 1.0;\n                for (var c = world.m_contactList; c; c = c.m_next) {\n                    // Is this contact disabled?\n                    if (c.isEnabled() == false) {\n                        continue;\n                    }\n                    // Prevent excessive sub-stepping.\n                    if (c.m_toiCount > Settings.maxSubSteps) {\n                        continue;\n                    }\n                    var alpha = 1.0;\n                    if (c.m_toiFlag) {\n                        // This contact has a valid cached TOI.\n                        alpha = c.m_toi;\n                    }\n                    else {\n                        var fA_1 = c.getFixtureA();\n                        var fB_1 = c.getFixtureB();\n                        // Is there a sensor?\n                        if (fA_1.isSensor() || fB_1.isSensor()) {\n                            continue;\n                        }\n                        var bA_1 = fA_1.getBody();\n                        var bB_1 = fB_1.getBody();\n                        var activeA = bA_1.isAwake() && !bA_1.isStatic();\n                        var activeB = bB_1.isAwake() && !bB_1.isStatic();\n                        // Is at least one body active (awake and dynamic or kinematic)?\n                        if (activeA == false && activeB == false) {\n                            continue;\n                        }\n                        var collideA = bA_1.isBullet() || !bA_1.isDynamic();\n                        var collideB = bB_1.isBullet() || !bB_1.isDynamic();\n                        // Are these two non-bullet dynamic bodies?\n                        if (collideA == false && collideB == false) {\n                            continue;\n                        }\n                        // Compute the TOI for this contact.\n                        // Put the sweeps onto the same time interval.\n                        var alpha0 = bA_1.m_sweep.alpha0;\n                        if (bA_1.m_sweep.alpha0 < bB_1.m_sweep.alpha0) {\n                            alpha0 = bB_1.m_sweep.alpha0;\n                            bA_1.m_sweep.advance(alpha0);\n                        }\n                        else if (bB_1.m_sweep.alpha0 < bA_1.m_sweep.alpha0) {\n                            alpha0 = bA_1.m_sweep.alpha0;\n                            bB_1.m_sweep.advance(alpha0);\n                        }\n                        var indexA = c.getChildIndexA();\n                        var indexB = c.getChildIndexB();\n                        bA_1.m_sweep;\n                        bB_1.m_sweep;\n                        // Compute the time of impact in interval [0, minTOI]\n                        var input = new TOIInput(); // TODO: reuse\n                        input.proxyA.set(fA_1.getShape(), indexA);\n                        input.proxyB.set(fB_1.getShape(), indexB);\n                        input.sweepA.set(bA_1.m_sweep);\n                        input.sweepB.set(bB_1.m_sweep);\n                        input.tMax = 1.0;\n                        var output = new TOIOutput(); // TODO: reuse\n                        TimeOfImpact(output, input);\n                        // Beta is the fraction of the remaining portion of the [time?].\n                        var beta = output.t;\n                        if (output.state == TOIOutputState.e_touching) {\n                            alpha = math$1.min(alpha0 + (1.0 - alpha0) * beta, 1.0);\n                        }\n                        else {\n                            alpha = 1.0;\n                        }\n                        c.m_toi = alpha;\n                        c.m_toiFlag = true;\n                    }\n                    if (alpha < minAlpha) {\n                        // This is the minimum TOI found so far.\n                        minContact = c;\n                        minAlpha = alpha;\n                    }\n                }\n                if (minContact == null || 1.0 - 10.0 * math$1.EPSILON < minAlpha) {\n                    // No more TOI events. Done!\n                    world.m_stepComplete = true;\n                    break;\n                }\n                // Advance the bodies to the TOI.\n                var fA = minContact.getFixtureA();\n                var fB = minContact.getFixtureB();\n                var bA = fA.getBody();\n                var bB = fB.getBody();\n                var backup1 = bA.m_sweep.clone();\n                var backup2 = bB.m_sweep.clone();\n                bA.advance(minAlpha);\n                bB.advance(minAlpha);\n                // The TOI contact likely has some new contact points.\n                minContact.update(world);\n                minContact.m_toiFlag = false;\n                ++minContact.m_toiCount;\n                // Is the contact solid?\n                if (minContact.isEnabled() == false || minContact.isTouching() == false) {\n                    // Restore the sweeps.\n                    minContact.setEnabled(false);\n                    bA.m_sweep.set(backup1);\n                    bB.m_sweep.set(backup2);\n                    bA.synchronizeTransform();\n                    bB.synchronizeTransform();\n                    continue;\n                }\n                bA.setAwake(true);\n                bB.setAwake(true);\n                // Build the island\n                this.clear();\n                this.addBody(bA);\n                this.addBody(bB);\n                this.addContact(minContact);\n                bA.m_islandFlag = true;\n                bB.m_islandFlag = true;\n                minContact.m_islandFlag = true;\n                // Get contacts on bodyA and bodyB.\n                var bodies = [bA, bB];\n                for (var i = 0; i < bodies.length; ++i) {\n                    var body = bodies[i];\n                    if (body.isDynamic()) {\n                        for (var ce = body.m_contactList; ce; ce = ce.next) {\n                            // if (this.m_bodyCount == this.m_bodyCapacity) { break; }\n                            // if (this.m_contactCount == this.m_contactCapacity) { break; }\n                            var contact = ce.contact;\n                            // Has this contact already been added to the island?\n                            if (contact.m_islandFlag) {\n                                continue;\n                            }\n                            // Only add if either is static, kinematic or bullet.\n                            var other = ce.other;\n                            if (other.isDynamic() && !body.isBullet() && !other.isBullet()) {\n                                continue;\n                            }\n                            // Skip sensors.\n                            var sensorA = contact.m_fixtureA.m_isSensor;\n                            var sensorB = contact.m_fixtureB.m_isSensor;\n                            if (sensorA || sensorB) {\n                                continue;\n                            }\n                            // Tentatively advance the body to the TOI.\n                            var backup = other.m_sweep.clone();\n                            if (other.m_islandFlag == false) {\n                                other.advance(minAlpha);\n                            }\n                            // Update the contact points\n                            contact.update(world);\n                            // Was the contact disabled by the user?\n                            // Are there contact points?\n                            if (contact.isEnabled() == false || contact.isTouching() == false) {\n                                other.m_sweep.set(backup);\n                                other.synchronizeTransform();\n                                continue;\n                            }\n                            // Add the contact to the island\n                            contact.m_islandFlag = true;\n                            this.addContact(contact);\n                            // Has the other body already been added to the island?\n                            if (other.m_islandFlag) {\n                                continue;\n                            }\n                            // Add the other body to the island.\n                            other.m_islandFlag = true;\n                            if (!other.isStatic()) {\n                                other.setAwake(true);\n                            }\n                            this.addBody(other);\n                        }\n                    }\n                }\n                s_subStep.reset((1.0 - minAlpha) * step.dt);\n                s_subStep.dtRatio = 1.0;\n                s_subStep.positionIterations = 20;\n                s_subStep.velocityIterations = step.velocityIterations;\n                s_subStep.warmStarting = false;\n                this.solveIslandTOI(s_subStep, bA, bB);\n                // Reset island flags and synchronize broad-phase proxies.\n                for (var i = 0; i < this.m_bodies.length; ++i) {\n                    var body = this.m_bodies[i];\n                    body.m_islandFlag = false;\n                    if (!body.isDynamic()) {\n                        continue;\n                    }\n                    body.synchronizeFixtures();\n                    // Invalidate all contact TOIs on this displaced body.\n                    for (var ce = body.m_contactList; ce; ce = ce.next) {\n                        ce.contact.m_toiFlag = false;\n                        ce.contact.m_islandFlag = false;\n                    }\n                }\n                // Commit fixture proxy movements to the broad-phase so that new contacts\n                // are created.\n                // Also, some contacts can be destroyed.\n                world.findNewContacts();\n                if (world.m_subStepping) {\n                    world.m_stepComplete = false;\n                    break;\n                }\n            }\n            var b, c; \n        };\n        Solver.prototype.solveIslandTOI = function (subStep, toiA, toiB) {\n            this.m_world;\n            // Initialize the body state.\n            for (var i = 0; i < this.m_bodies.length; ++i) {\n                var body = this.m_bodies[i];\n                body.c_position.c.setVec2(body.m_sweep.c);\n                body.c_position.a = body.m_sweep.a;\n                body.c_velocity.v.setVec2(body.m_linearVelocity);\n                body.c_velocity.w = body.m_angularVelocity;\n            }\n            for (var i = 0; i < this.m_contacts.length; ++i) {\n                var contact = this.m_contacts[i];\n                contact.initConstraint(subStep);\n            }\n            // Solve position constraints.\n            for (var i = 0; i < subStep.positionIterations; ++i) {\n                var minSeparation = 0.0;\n                for (var j = 0; j < this.m_contacts.length; ++j) {\n                    var contact = this.m_contacts[j];\n                    var separation = contact.solvePositionConstraintTOI(subStep, toiA, toiB);\n                    minSeparation = math$1.min(minSeparation, separation);\n                }\n                // We can't expect minSpeparation >= -Settings.linearSlop because we don't\n                // push the separation above -Settings.linearSlop.\n                var contactsOkay = minSeparation >= -1.5 * Settings.linearSlop;\n                if (contactsOkay) {\n                    break;\n                }\n            }\n            var i, c; \n            // Leap of faith to new safe state.\n            toiA.m_sweep.c0.setVec2(toiA.c_position.c);\n            toiA.m_sweep.a0 = toiA.c_position.a;\n            toiB.m_sweep.c0.setVec2(toiB.c_position.c);\n            toiB.m_sweep.a0 = toiB.c_position.a;\n            // No warm starting is needed for TOI events because warm\n            // starting impulses were applied in the discrete solver.\n            for (var i = 0; i < this.m_contacts.length; ++i) {\n                var contact = this.m_contacts[i];\n                contact.initVelocityConstraint(subStep);\n            }\n            // Solve velocity constraints.\n            for (var i = 0; i < subStep.velocityIterations; ++i) {\n                for (var j = 0; j < this.m_contacts.length; ++j) {\n                    var contact = this.m_contacts[j];\n                    contact.solveVelocityConstraint(subStep);\n                }\n            }\n            // Don't store the TOI contact forces for warm starting\n            // because they can be quite large.\n            var h = subStep.dt;\n            // Integrate positions\n            for (var i = 0; i < this.m_bodies.length; ++i) {\n                var body = this.m_bodies[i];\n                var c = Vec2.clone(body.c_position.c);\n                var a = body.c_position.a;\n                var v = Vec2.clone(body.c_velocity.v);\n                var w = body.c_velocity.w;\n                // Check for large velocities\n                var translation = Vec2.mulNumVec2(h, v);\n                if (Vec2.dot(translation, translation) > Settings.maxTranslationSquared) {\n                    var ratio = Settings.maxTranslation / translation.length();\n                    v.mul(ratio);\n                }\n                var rotation = h * w;\n                if (rotation * rotation > Settings.maxRotationSquared) {\n                    var ratio = Settings.maxRotation / math$1.abs(rotation);\n                    w *= ratio;\n                }\n                // Integrate\n                c.addMul(h, v);\n                a += h * w;\n                body.c_position.c = c;\n                body.c_position.a = a;\n                body.c_velocity.v = v;\n                body.c_velocity.w = w;\n                // Sync bodies\n                body.m_sweep.c = c;\n                body.m_sweep.a = a;\n                body.m_linearVelocity = v;\n                body.m_angularVelocity = w;\n                body.synchronizeTransform();\n            }\n            this.postSolveIsland();\n        };\n        /** @internal */\n        Solver.prototype.postSolveIsland = function () {\n            for (var c = 0; c < this.m_contacts.length; ++c) {\n                var contact = this.m_contacts[c];\n                this.m_world.postSolve(contact, contact.m_impulse);\n            }\n        };\n        return Solver;\n    }());\n\n    /*\n     * Planck.js\n     * The MIT License\n     * Copyright (c) 2021 Erin Catto, Ali Shakiba\n     *\n     * Permission is hereby granted, free of charge, to any person obtaining a copy\n     * of this software and associated documentation files (the \"Software\"), to deal\n     * in the Software without restriction, including without limitation the rights\n     * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n     * copies of the Software, and to permit persons to whom the Software is\n     * furnished to do so, subject to the following conditions:\n     *\n     * The above copyright notice and this permission notice shall be included in all\n     * copies or substantial portions of the Software.\n     *\n     * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n     * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n     * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n     * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n     * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n     * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n     * SOFTWARE.\n     */\n    var WorldDefDefault = {\n        gravity: Vec2.zero(),\n        allowSleep: true,\n        warmStarting: true,\n        continuousPhysics: true,\n        subStepping: false,\n        blockSolve: true,\n        velocityIterations: 8,\n        positionIterations: 3\n    };\n    var World = /** @class */ (function () {\n        /**\n         * @param def World definition or gravity vector.\n         */\n        function World(def) {\n            var _this = this;\n            /** @internal */\n            this.s_step = new TimeStep(); // reuse\n            /**\n             * @internal\n             * Callback for broad-phase.\n             */\n            this.createContact = function (proxyA, proxyB) {\n                var fixtureA = proxyA.fixture;\n                var fixtureB = proxyB.fixture;\n                var indexA = proxyA.childIndex;\n                var indexB = proxyB.childIndex;\n                var bodyA = fixtureA.getBody();\n                var bodyB = fixtureB.getBody();\n                // Are the fixtures on the same body?\n                if (bodyA == bodyB) {\n                    return;\n                }\n                // TODO_ERIN use a hash table to remove a potential bottleneck when both\n                // bodies have a lot of contacts.\n                // Does a contact already exist?\n                var edge = bodyB.getContactList(); // ContactEdge\n                while (edge) {\n                    if (edge.other == bodyA) {\n                        var fA = edge.contact.getFixtureA();\n                        var fB = edge.contact.getFixtureB();\n                        var iA = edge.contact.getChildIndexA();\n                        var iB = edge.contact.getChildIndexB();\n                        if (fA == fixtureA && fB == fixtureB && iA == indexA && iB == indexB) {\n                            // A contact already exists.\n                            return;\n                        }\n                        if (fA == fixtureB && fB == fixtureA && iA == indexB && iB == indexA) {\n                            // A contact already exists.\n                            return;\n                        }\n                    }\n                    edge = edge.next;\n                }\n                if (bodyB.shouldCollide(bodyA) == false) {\n                    return;\n                }\n                if (fixtureB.shouldCollide(fixtureA) == false) {\n                    return;\n                }\n                // Call the factory.\n                var contact = Contact.create(fixtureA, indexA, fixtureB, indexB);\n                if (contact == null) {\n                    return;\n                }\n                // Insert into the world.\n                contact.m_prev = null;\n                if (_this.m_contactList != null) {\n                    contact.m_next = _this.m_contactList;\n                    _this.m_contactList.m_prev = contact;\n                }\n                _this.m_contactList = contact;\n                ++_this.m_contactCount;\n            };\n            if (!(this instanceof World)) {\n                return new World(def);\n            }\n            if (def && Vec2.isValid(def)) {\n                def = { gravity: def };\n            }\n            def = options(def, WorldDefDefault);\n            this.m_solver = new Solver(this);\n            this.m_broadPhase = new BroadPhase();\n            this.m_contactList = null;\n            this.m_contactCount = 0;\n            this.m_bodyList = null;\n            this.m_bodyCount = 0;\n            this.m_jointList = null;\n            this.m_jointCount = 0;\n            this.m_stepComplete = true;\n            this.m_allowSleep = def.allowSleep;\n            this.m_gravity = Vec2.clone(def.gravity);\n            this.m_clearForces = true;\n            this.m_newFixture = false;\n            this.m_locked = false;\n            // These are for debugging the solver.\n            this.m_warmStarting = def.warmStarting;\n            this.m_continuousPhysics = def.continuousPhysics;\n            this.m_subStepping = def.subStepping;\n            this.m_blockSolve = def.blockSolve;\n            this.m_velocityIterations = def.velocityIterations;\n            this.m_positionIterations = def.positionIterations;\n            this.m_t = 0;\n        }\n        /** @internal */\n        World.prototype._serialize = function () {\n            var bodies = [];\n            var joints = [];\n            for (var b = this.getBodyList(); b; b = b.getNext()) {\n                bodies.push(b);\n            }\n            for (var j = this.getJointList(); j; j = j.getNext()) {\n                // @ts-ignore\n                if (typeof j._serialize === 'function') {\n                    joints.push(j);\n                }\n            }\n            return {\n                gravity: this.m_gravity,\n                bodies: bodies,\n                joints: joints,\n            };\n        };\n        /** @internal */\n        World._deserialize = function (data, context, restore) {\n            if (!data) {\n                return new World();\n            }\n            var world = new World(data.gravity);\n            if (data.bodies) {\n                for (var i = data.bodies.length - 1; i >= 0; i -= 1) {\n                    world._addBody(restore(Body, data.bodies[i], world));\n                }\n            }\n            if (data.joints) {\n                for (var i = data.joints.length - 1; i >= 0; i--) {\n                    world.createJoint(restore(Joint, data.joints[i], world));\n                }\n            }\n            return world;\n        };\n        /**\n         * Get the world body list. With the returned body, use Body.getNext to get the\n         * next body in the world list. A null body indicates the end of the list.\n         *\n         * @return the head of the world body list.\n         */\n        World.prototype.getBodyList = function () {\n            return this.m_bodyList;\n        };\n        /**\n         * Get the world joint list. With the returned joint, use Joint.getNext to get\n         * the next joint in the world list. A null joint indicates the end of the list.\n         *\n         * @return the head of the world joint list.\n         */\n        World.prototype.getJointList = function () {\n            return this.m_jointList;\n        };\n        /**\n         * Get the world contact list. With the returned contact, use Contact.getNext to\n         * get the next contact in the world list. A null contact indicates the end of\n         * the list.\n         *\n         * Warning: contacts are created and destroyed in the middle of a time step.\n         * Use ContactListener to avoid missing contacts.\n         *\n         * @return the head of the world contact list.\n         */\n        World.prototype.getContactList = function () {\n            return this.m_contactList;\n        };\n        World.prototype.getBodyCount = function () {\n            return this.m_bodyCount;\n        };\n        World.prototype.getJointCount = function () {\n            return this.m_jointCount;\n        };\n        /**\n         * Get the number of contacts (each may have 0 or more contact points).\n         */\n        World.prototype.getContactCount = function () {\n            return this.m_contactCount;\n        };\n        /**\n         * Change the global gravity vector.\n         */\n        World.prototype.setGravity = function (gravity) {\n            this.m_gravity = gravity;\n        };\n        /**\n         * Get the global gravity vector.\n         */\n        World.prototype.getGravity = function () {\n            return this.m_gravity;\n        };\n        /**\n         * Is the world locked (in the middle of a time step).\n         */\n        World.prototype.isLocked = function () {\n            return this.m_locked;\n        };\n        /**\n         * Enable/disable sleep.\n         */\n        World.prototype.setAllowSleeping = function (flag) {\n            if (flag == this.m_allowSleep) {\n                return;\n            }\n            this.m_allowSleep = flag;\n            if (this.m_allowSleep == false) {\n                for (var b = this.m_bodyList; b; b = b.m_next) {\n                    b.setAwake(true);\n                }\n            }\n        };\n        World.prototype.getAllowSleeping = function () {\n            return this.m_allowSleep;\n        };\n        /**\n         * Enable/disable warm starting. For testing.\n         */\n        World.prototype.setWarmStarting = function (flag) {\n            this.m_warmStarting = flag;\n        };\n        World.prototype.getWarmStarting = function () {\n            return this.m_warmStarting;\n        };\n        /**\n         * Enable/disable continuous physics. For testing.\n         */\n        World.prototype.setContinuousPhysics = function (flag) {\n            this.m_continuousPhysics = flag;\n        };\n        World.prototype.getContinuousPhysics = function () {\n            return this.m_continuousPhysics;\n        };\n        /**\n         * Enable/disable single stepped continuous physics. For testing.\n         */\n        World.prototype.setSubStepping = function (flag) {\n            this.m_subStepping = flag;\n        };\n        World.prototype.getSubStepping = function () {\n            return this.m_subStepping;\n        };\n        /**\n         * Set flag to control automatic clearing of forces after each time step.\n         */\n        World.prototype.setAutoClearForces = function (flag) {\n            this.m_clearForces = flag;\n        };\n        /**\n         * Get the flag that controls automatic clearing of forces after each time step.\n         */\n        World.prototype.getAutoClearForces = function () {\n            return this.m_clearForces;\n        };\n        /**\n         * Manually clear the force buffer on all bodies. By default, forces are cleared\n         * automatically after each call to step. The default behavior is modified by\n         * calling setAutoClearForces. The purpose of this function is to support\n         * sub-stepping. Sub-stepping is often used to maintain a fixed sized time step\n         * under a variable frame-rate. When you perform sub-stepping you will disable\n         * auto clearing of forces and instead call clearForces after all sub-steps are\n         * complete in one pass of your game loop.\n         *\n         * See {@link World.setAutoClearForces}\n         */\n        World.prototype.clearForces = function () {\n            for (var body = this.m_bodyList; body; body = body.getNext()) {\n                body.m_force.setZero();\n                body.m_torque = 0.0;\n            }\n        };\n        /**\n         * Query the world for all fixtures that potentially overlap the provided AABB.\n         *\n         * @param aabb The query box.\n         * @param callback Called for each fixture found in the query AABB. It may return `false` to terminate the query.\n         */\n        World.prototype.queryAABB = function (aabb, callback) {\n            var broadPhase = this.m_broadPhase;\n            this.m_broadPhase.query(aabb, function (proxyId) {\n                var proxy = broadPhase.getUserData(proxyId);\n                return callback(proxy.fixture);\n            });\n        };\n        /**\n         * Ray-cast the world for all fixtures in the path of the ray. Your callback\n         * controls whether you get the closest point, any point, or n-points. The\n         * ray-cast ignores shapes that contain the starting point.\n         *\n         * @param point1 The ray starting point\n         * @param point2 The ray ending point\n         * @param callback A user implemented callback function.\n         */\n        World.prototype.rayCast = function (point1, point2, callback) {\n            var broadPhase = this.m_broadPhase;\n            this.m_broadPhase.rayCast({\n                maxFraction: 1.0,\n                p1: point1,\n                p2: point2\n            }, function (input, proxyId) {\n                var proxy = broadPhase.getUserData(proxyId);\n                var fixture = proxy.fixture;\n                var index = proxy.childIndex;\n                // @ts-ignore\n                var output = {}; // TODO GC\n                var hit = fixture.rayCast(output, input, index);\n                if (hit) {\n                    var fraction = output.fraction;\n                    var point = Vec2.add(Vec2.mulNumVec2((1.0 - fraction), input.p1), Vec2.mulNumVec2(fraction, input.p2));\n                    return callback(fixture, point, output.normal, fraction);\n                }\n                return input.maxFraction;\n            });\n        };\n        /**\n         * Get the number of broad-phase proxies.\n         */\n        World.prototype.getProxyCount = function () {\n            return this.m_broadPhase.getProxyCount();\n        };\n        /**\n         * Get the height of broad-phase dynamic tree.\n         */\n        World.prototype.getTreeHeight = function () {\n            return this.m_broadPhase.getTreeHeight();\n        };\n        /**\n         * Get the balance of broad-phase dynamic tree.\n         */\n        World.prototype.getTreeBalance = function () {\n            return this.m_broadPhase.getTreeBalance();\n        };\n        /**\n         * Get the quality metric of broad-phase dynamic tree. The smaller the better.\n         * The minimum is 1.\n         */\n        World.prototype.getTreeQuality = function () {\n            return this.m_broadPhase.getTreeQuality();\n        };\n        /**\n         * Shift the world origin. Useful for large worlds. The body shift formula is:\n         * position -= newOrigin\n         *\n         * @param newOrigin The new origin with respect to the old origin\n         */\n        World.prototype.shiftOrigin = function (newOrigin) {\n            if (this.m_locked) {\n                return;\n            }\n            for (var b = this.m_bodyList; b; b = b.m_next) {\n                b.m_xf.p.sub(newOrigin);\n                b.m_sweep.c0.sub(newOrigin);\n                b.m_sweep.c.sub(newOrigin);\n            }\n            for (var j = this.m_jointList; j; j = j.m_next) {\n                j.shiftOrigin(newOrigin);\n            }\n            this.m_broadPhase.shiftOrigin(newOrigin);\n        };\n        /**\n         * @internal Used for deserialize.\n         */\n        World.prototype._addBody = function (body) {\n            if (this.isLocked()) {\n                return;\n            }\n            // Add to world doubly linked list.\n            body.m_prev = null;\n            body.m_next = this.m_bodyList;\n            if (this.m_bodyList) {\n                this.m_bodyList.m_prev = body;\n            }\n            this.m_bodyList = body;\n            ++this.m_bodyCount;\n        };\n        // tslint:disable-next-line:typedef\n        World.prototype.createBody = function (arg1, arg2) {\n            if (this.isLocked()) {\n                return null;\n            }\n            var def = {};\n            if (!arg1) ;\n            else if (Vec2.isValid(arg1)) {\n                def = { position: arg1, angle: arg2 };\n            }\n            else if (typeof arg1 === 'object') {\n                def = arg1;\n            }\n            var body = new Body(this, def);\n            this._addBody(body);\n            return body;\n        };\n        // tslint:disable-next-line:typedef\n        World.prototype.createDynamicBody = function (arg1, arg2) {\n            var def = {};\n            if (!arg1) ;\n            else if (Vec2.isValid(arg1)) {\n                def = { position: arg1, angle: arg2 };\n            }\n            else if (typeof arg1 === 'object') {\n                def = arg1;\n            }\n            def.type = 'dynamic';\n            return this.createBody(def);\n        };\n        // tslint:disable-next-line:typedef\n        World.prototype.createKinematicBody = function (arg1, arg2) {\n            var def = {};\n            if (!arg1) ;\n            else if (Vec2.isValid(arg1)) {\n                def = { position: arg1, angle: arg2 };\n            }\n            else if (typeof arg1 === 'object') {\n                def = arg1;\n            }\n            def.type = 'kinematic';\n            return this.createBody(def);\n        };\n        /**\n         * Destroy a rigid body given a definition. No reference to the definition is\n         * retained.\n         *\n         * Warning: This automatically deletes all associated shapes and joints.\n         *\n         * Warning: This function is locked during callbacks.\n         */\n        World.prototype.destroyBody = function (b) {\n            if (this.isLocked()) {\n                return;\n            }\n            if (b.m_destroyed) {\n                return false;\n            }\n            // Delete the attached joints.\n            var je = b.m_jointList;\n            while (je) {\n                var je0 = je;\n                je = je.next;\n                this.publish('remove-joint', je0.joint);\n                this.destroyJoint(je0.joint);\n                b.m_jointList = je;\n            }\n            b.m_jointList = null;\n            // Delete the attached contacts.\n            var ce = b.m_contactList;\n            while (ce) {\n                var ce0 = ce;\n                ce = ce.next;\n                this.destroyContact(ce0.contact);\n                b.m_contactList = ce;\n            }\n            b.m_contactList = null;\n            // Delete the attached fixtures. This destroys broad-phase proxies.\n            var f = b.m_fixtureList;\n            while (f) {\n                var f0 = f;\n                f = f.m_next;\n                this.publish('remove-fixture', f0);\n                f0.destroyProxies(this.m_broadPhase);\n                b.m_fixtureList = f;\n            }\n            b.m_fixtureList = null;\n            // Remove world body list.\n            if (b.m_prev) {\n                b.m_prev.m_next = b.m_next;\n            }\n            if (b.m_next) {\n                b.m_next.m_prev = b.m_prev;\n            }\n            if (b == this.m_bodyList) {\n                this.m_bodyList = b.m_next;\n            }\n            b.m_destroyed = true;\n            --this.m_bodyCount;\n            this.publish('remove-body', b);\n            return true;\n        };\n        /**\n         * Create a joint to constrain bodies together. No reference to the definition\n         * is retained. This may cause the connected bodies to cease colliding.\n         *\n         * Warning: This function is locked during callbacks.\n         */\n        World.prototype.createJoint = function (joint) {\n            if (this.isLocked()) {\n                return null;\n            }\n            // Connect to the world list.\n            joint.m_prev = null;\n            joint.m_next = this.m_jointList;\n            if (this.m_jointList) {\n                this.m_jointList.m_prev = joint;\n            }\n            this.m_jointList = joint;\n            ++this.m_jointCount;\n            // Connect to the bodies' doubly linked lists.\n            joint.m_edgeA.joint = joint;\n            joint.m_edgeA.other = joint.m_bodyB;\n            joint.m_edgeA.prev = null;\n            joint.m_edgeA.next = joint.m_bodyA.m_jointList;\n            if (joint.m_bodyA.m_jointList)\n                joint.m_bodyA.m_jointList.prev = joint.m_edgeA;\n            joint.m_bodyA.m_jointList = joint.m_edgeA;\n            joint.m_edgeB.joint = joint;\n            joint.m_edgeB.other = joint.m_bodyA;\n            joint.m_edgeB.prev = null;\n            joint.m_edgeB.next = joint.m_bodyB.m_jointList;\n            if (joint.m_bodyB.m_jointList)\n                joint.m_bodyB.m_jointList.prev = joint.m_edgeB;\n            joint.m_bodyB.m_jointList = joint.m_edgeB;\n            // If the joint prevents collisions, then flag any contacts for filtering.\n            if (joint.m_collideConnected == false) {\n                for (var edge = joint.m_bodyB.getContactList(); edge; edge = edge.next) {\n                    if (edge.other == joint.m_bodyA) {\n                        // Flag the contact for filtering at the next time step (where either\n                        // body is awake).\n                        edge.contact.flagForFiltering();\n                    }\n                }\n            }\n            // Note: creating a joint doesn't wake the bodies.\n            return joint;\n        };\n        /**\n         * Destroy a joint. This may cause the connected bodies to begin colliding.\n         * Warning: This function is locked during callbacks.\n         */\n        World.prototype.destroyJoint = function (joint) {\n            if (this.isLocked()) {\n                return;\n            }\n            // Remove from the doubly linked list.\n            if (joint.m_prev) {\n                joint.m_prev.m_next = joint.m_next;\n            }\n            if (joint.m_next) {\n                joint.m_next.m_prev = joint.m_prev;\n            }\n            if (joint == this.m_jointList) {\n                this.m_jointList = joint.m_next;\n            }\n            // Disconnect from bodies.\n            var bodyA = joint.m_bodyA;\n            var bodyB = joint.m_bodyB;\n            // Wake up connected bodies.\n            bodyA.setAwake(true);\n            bodyB.setAwake(true);\n            // Remove from body 1.\n            if (joint.m_edgeA.prev) {\n                joint.m_edgeA.prev.next = joint.m_edgeA.next;\n            }\n            if (joint.m_edgeA.next) {\n                joint.m_edgeA.next.prev = joint.m_edgeA.prev;\n            }\n            if (joint.m_edgeA == bodyA.m_jointList) {\n                bodyA.m_jointList = joint.m_edgeA.next;\n            }\n            joint.m_edgeA.prev = null;\n            joint.m_edgeA.next = null;\n            // Remove from body 2\n            if (joint.m_edgeB.prev) {\n                joint.m_edgeB.prev.next = joint.m_edgeB.next;\n            }\n            if (joint.m_edgeB.next) {\n                joint.m_edgeB.next.prev = joint.m_edgeB.prev;\n            }\n            if (joint.m_edgeB == bodyB.m_jointList) {\n                bodyB.m_jointList = joint.m_edgeB.next;\n            }\n            joint.m_edgeB.prev = null;\n            joint.m_edgeB.next = null;\n            --this.m_jointCount;\n            // If the joint prevents collisions, then flag any contacts for filtering.\n            if (joint.m_collideConnected == false) {\n                var edge = bodyB.getContactList();\n                while (edge) {\n                    if (edge.other == bodyA) {\n                        // Flag the contact for filtering at the next time step (where either\n                        // body is awake).\n                        edge.contact.flagForFiltering();\n                    }\n                    edge = edge.next;\n                }\n            }\n            this.publish('remove-joint', joint);\n        };\n        /**\n         * Take a time step. This performs collision detection, integration, and\n         * constraint solution.\n         *\n         * Broad-phase, narrow-phase, solve and solve time of impacts.\n         *\n         * @param timeStep Time step, this should not vary.\n         */\n        World.prototype.step = function (timeStep, velocityIterations, positionIterations) {\n            this.publish('pre-step', timeStep);\n            if ((velocityIterations | 0) !== velocityIterations) {\n                // TODO: remove this in future\n                velocityIterations = 0;\n            }\n            velocityIterations = velocityIterations || this.m_velocityIterations;\n            positionIterations = positionIterations || this.m_positionIterations;\n            // If new fixtures were added, we need to find the new contacts.\n            if (this.m_newFixture) {\n                this.findNewContacts();\n                this.m_newFixture = false;\n            }\n            this.m_locked = true;\n            this.s_step.reset(timeStep);\n            this.s_step.velocityIterations = velocityIterations;\n            this.s_step.positionIterations = positionIterations;\n            this.s_step.warmStarting = this.m_warmStarting;\n            this.s_step.blockSolve = this.m_blockSolve;\n            // Update contacts. This is where some contacts are destroyed.\n            this.updateContacts();\n            // Integrate velocities, solve velocity constraints, and integrate positions.\n            if (this.m_stepComplete && timeStep > 0.0) {\n                this.m_solver.solveWorld(this.s_step);\n                // Synchronize fixtures, check for out of range bodies.\n                for (var b = this.m_bodyList; b; b = b.getNext()) {\n                    // If a body was not in an island then it did not move.\n                    if (b.m_islandFlag == false) {\n                        continue;\n                    }\n                    if (b.isStatic()) {\n                        continue;\n                    }\n                    // Update fixtures (for broad-phase).\n                    b.synchronizeFixtures();\n                }\n                // Look for new contacts.\n                this.findNewContacts();\n            }\n            // Handle TOI events.\n            if (this.m_continuousPhysics && timeStep > 0.0) {\n                this.m_solver.solveWorldTOI(this.s_step);\n            }\n            if (this.m_clearForces) {\n                this.clearForces();\n            }\n            this.m_locked = false;\n            this.publish('post-step', timeStep);\n        };\n        /**\n         * @internal\n         * Call this method to find new contacts.\n         */\n        World.prototype.findNewContacts = function () {\n            this.m_broadPhase.updatePairs(this.createContact);\n        };\n        /**\n         * @internal\n         * Removes old non-overlapping contacts, applies filters and updates contacts.\n         */\n        World.prototype.updateContacts = function () {\n            // Update awake contacts.\n            var c;\n            var next_c = this.m_contactList;\n            while (c = next_c) {\n                next_c = c.getNext();\n                var fixtureA = c.getFixtureA();\n                var fixtureB = c.getFixtureB();\n                var indexA = c.getChildIndexA();\n                var indexB = c.getChildIndexB();\n                var bodyA = fixtureA.getBody();\n                var bodyB = fixtureB.getBody();\n                // Is this contact flagged for filtering?\n                if (c.m_filterFlag) {\n                    if (bodyB.shouldCollide(bodyA) == false) {\n                        this.destroyContact(c);\n                        continue;\n                    }\n                    if (fixtureB.shouldCollide(fixtureA) == false) {\n                        this.destroyContact(c);\n                        continue;\n                    }\n                    // Clear the filtering flag.\n                    c.m_filterFlag = false;\n                }\n                var activeA = bodyA.isAwake() && !bodyA.isStatic();\n                var activeB = bodyB.isAwake() && !bodyB.isStatic();\n                // At least one body must be awake and it must be dynamic or kinematic.\n                if (activeA == false && activeB == false) {\n                    continue;\n                }\n                var proxyIdA = fixtureA.m_proxies[indexA].proxyId;\n                var proxyIdB = fixtureB.m_proxies[indexB].proxyId;\n                var overlap = this.m_broadPhase.testOverlap(proxyIdA, proxyIdB);\n                // Here we destroy contacts that cease to overlap in the broad-phase.\n                if (overlap == false) {\n                    this.destroyContact(c);\n                    continue;\n                }\n                // The contact persists.\n                c.update(this);\n            }\n        };\n        /**\n         * @internal\n         */\n        World.prototype.destroyContact = function (contact) {\n            Contact.destroy(contact, this);\n            // Remove from the world.\n            if (contact.m_prev) {\n                contact.m_prev.m_next = contact.m_next;\n            }\n            if (contact.m_next) {\n                contact.m_next.m_prev = contact.m_prev;\n            }\n            if (contact == this.m_contactList) {\n                this.m_contactList = contact.m_next;\n            }\n            --this.m_contactCount;\n        };\n        /**\n         * Register an event listener.\n         */\n        // tslint:disable-next-line:typedef\n        World.prototype.on = function (name, listener) {\n            if (typeof name !== 'string' || typeof listener !== 'function') {\n                return this;\n            }\n            if (!this._listeners) {\n                this._listeners = {};\n            }\n            if (!this._listeners[name]) {\n                this._listeners[name] = [];\n            }\n            this._listeners[name].push(listener);\n            return this;\n        };\n        /**\n         * Remove an event listener.\n         */\n        // tslint:disable-next-line:typedef\n        World.prototype.off = function (name, listener) {\n            if (typeof name !== 'string' || typeof listener !== 'function') {\n                return this;\n            }\n            var listeners = this._listeners && this._listeners[name];\n            if (!listeners || !listeners.length) {\n                return this;\n            }\n            var index = listeners.indexOf(listener);\n            if (index >= 0) {\n                listeners.splice(index, 1);\n            }\n            return this;\n        };\n        World.prototype.publish = function (name, arg1, arg2, arg3) {\n            var listeners = this._listeners && this._listeners[name];\n            if (!listeners || !listeners.length) {\n                return 0;\n            }\n            for (var l = 0; l < listeners.length; l++) {\n                listeners[l].call(this, arg1, arg2, arg3);\n            }\n            return listeners.length;\n        };\n        /**\n         * @internal\n         */\n        World.prototype.beginContact = function (contact) {\n            this.publish('begin-contact', contact);\n        };\n        /**\n         * @internal\n         */\n        World.prototype.endContact = function (contact) {\n            this.publish('end-contact', contact);\n        };\n        /**\n         * @internal\n         */\n        World.prototype.preSolve = function (contact, oldManifold) {\n            this.publish('pre-solve', contact, oldManifold);\n        };\n        /**\n         * @internal\n         */\n        World.prototype.postSolve = function (contact, impulse) {\n            this.publish('post-solve', contact, impulse);\n        };\n        return World;\n    }());\n\n    /*\n     * Planck.js\n     * The MIT License\n     * Copyright (c) 2021 Erin Catto, Ali Shakiba\n     *\n     * Permission is hereby granted, free of charge, to any person obtaining a copy\n     * of this software and associated documentation files (the \"Software\"), to deal\n     * in the Software without restriction, including without limitation the rights\n     * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n     * copies of the Software, and to permit persons to whom the Software is\n     * furnished to do so, subject to the following conditions:\n     *\n     * The above copyright notice and this permission notice shall be included in all\n     * copies or substantial portions of the Software.\n     *\n     * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n     * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n     * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n     * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n     * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n     * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n     * SOFTWARE.\n     */\n    var Vec3 = /** @class */ (function () {\n        // tslint:disable-next-line:typedef\n        function Vec3(x, y, z) {\n            if (!(this instanceof Vec3)) {\n                return new Vec3(x, y, z);\n            }\n            if (typeof x === 'undefined') {\n                this.x = 0;\n                this.y = 0;\n                this.z = 0;\n            }\n            else if (typeof x === 'object') {\n                this.x = x.x;\n                this.y = x.y;\n                this.z = x.z;\n            }\n            else {\n                this.x = x;\n                this.y = y;\n                this.z = z;\n            }\n        }\n        /** @internal */\n        Vec3.prototype._serialize = function () {\n            return {\n                x: this.x,\n                y: this.y,\n                z: this.z\n            };\n        };\n        /** @internal */\n        Vec3._deserialize = function (data) {\n            var obj = Object.create(Vec3.prototype);\n            obj.x = data.x;\n            obj.y = data.y;\n            obj.z = data.z;\n            return obj;\n        };\n        /** @internal */\n        Vec3.neo = function (x, y, z) {\n            var obj = Object.create(Vec3.prototype);\n            obj.x = x;\n            obj.y = y;\n            obj.z = z;\n            return obj;\n        };\n        Vec3.zero = function () {\n            var obj = Object.create(Vec3.prototype);\n            obj.x = 0;\n            obj.y = 0;\n            obj.z = 0;\n            return obj;\n        };\n        Vec3.clone = function (v) {\n            return Vec3.neo(v.x, v.y, v.z);\n        };\n        /** @internal */\n        Vec3.prototype.toString = function () {\n            return JSON.stringify(this);\n        };\n        /**\n         * Does this vector contain finite coordinates?\n         */\n        Vec3.isValid = function (obj) {\n            if (obj === null || typeof obj === 'undefined') {\n                return false;\n            }\n            return math$1.isFinite(obj.x) && math$1.isFinite(obj.y) && math$1.isFinite(obj.z);\n        };\n        Vec3.assert = function (o) {\n            return;\n        };\n        Vec3.prototype.setZero = function () {\n            this.x = 0.0;\n            this.y = 0.0;\n            this.z = 0.0;\n            return this;\n        };\n        Vec3.prototype.set = function (x, y, z) {\n            this.x = x;\n            this.y = y;\n            this.z = z;\n            return this;\n        };\n        Vec3.prototype.add = function (w) {\n            this.x += w.x;\n            this.y += w.y;\n            this.z += w.z;\n            return this;\n        };\n        Vec3.prototype.sub = function (w) {\n            this.x -= w.x;\n            this.y -= w.y;\n            this.z -= w.z;\n            return this;\n        };\n        Vec3.prototype.mul = function (m) {\n            this.x *= m;\n            this.y *= m;\n            this.z *= m;\n            return this;\n        };\n        Vec3.areEqual = function (v, w) {\n            return v === w ||\n                typeof v === 'object' && v !== null &&\n                    typeof w === 'object' && w !== null &&\n                    v.x === w.x && v.y === w.y && v.z === w.z;\n        };\n        /**\n         * Perform the dot product on two vectors.\n         */\n        Vec3.dot = function (v, w) {\n            return v.x * w.x + v.y * w.y + v.z * w.z;\n        };\n        /**\n         * Perform the cross product on two vectors. In 2D this produces a scalar.\n         */\n        Vec3.cross = function (v, w) {\n            return new Vec3(v.y * w.z - v.z * w.y, v.z * w.x - v.x * w.z, v.x * w.y - v.y * w.x);\n        };\n        Vec3.add = function (v, w) {\n            return new Vec3(v.x + w.x, v.y + w.y, v.z + w.z);\n        };\n        Vec3.sub = function (v, w) {\n            return new Vec3(v.x - w.x, v.y - w.y, v.z - w.z);\n        };\n        Vec3.mul = function (v, m) {\n            return new Vec3(m * v.x, m * v.y, m * v.z);\n        };\n        Vec3.prototype.neg = function () {\n            this.x = -this.x;\n            this.y = -this.y;\n            this.z = -this.z;\n            return this;\n        };\n        Vec3.neg = function (v) {\n            return new Vec3(-v.x, -v.y, -v.z);\n        };\n        return Vec3;\n    }());\n\n    /*\n     * Planck.js\n     * The MIT License\n     * Copyright (c) 2021 Erin Catto, Ali Shakiba\n     *\n     * Permission is hereby granted, free of charge, to any person obtaining a copy\n     * of this software and associated documentation files (the \"Software\"), to deal\n     * in the Software without restriction, including without limitation the rights\n     * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n     * copies of the Software, and to permit persons to whom the Software is\n     * furnished to do so, subject to the following conditions:\n     *\n     * The above copyright notice and this permission notice shall be included in all\n     * copies or substantial portions of the Software.\n     *\n     * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n     * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n     * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n     * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n     * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n     * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n     * SOFTWARE.\n     */\n    /**\n     * A line segment (edge) shape. These can be connected in chains or loops to\n     * other edge shapes. The connectivity information is used to ensure correct\n     * contact normals.\n     */\n    var EdgeShape = /** @class */ (function (_super) {\n        __extends(EdgeShape, _super);\n        function EdgeShape(v1, v2) {\n            var _this = this;\n            // @ts-ignore\n            if (!(_this instanceof EdgeShape)) {\n                return new EdgeShape(v1, v2);\n            }\n            _this = _super.call(this) || this;\n            _this.m_type = EdgeShape.TYPE;\n            _this.m_radius = Settings.polygonRadius;\n            _this.m_vertex1 = v1 ? Vec2.clone(v1) : Vec2.zero();\n            _this.m_vertex2 = v2 ? Vec2.clone(v2) : Vec2.zero();\n            _this.m_vertex0 = Vec2.zero();\n            _this.m_vertex3 = Vec2.zero();\n            _this.m_hasVertex0 = false;\n            _this.m_hasVertex3 = false;\n            return _this;\n        }\n        /** @internal */\n        EdgeShape.prototype._serialize = function () {\n            return {\n                type: this.m_type,\n                vertex1: this.m_vertex1,\n                vertex2: this.m_vertex2,\n                vertex0: this.m_vertex0,\n                vertex3: this.m_vertex3,\n                hasVertex0: this.m_hasVertex0,\n                hasVertex3: this.m_hasVertex3,\n            };\n        };\n        /** @internal */\n        EdgeShape._deserialize = function (data) {\n            var shape = new EdgeShape(data.vertex1, data.vertex2);\n            if (shape.m_hasVertex0) {\n                shape.setPrevVertex(data.vertex0);\n            }\n            if (shape.m_hasVertex3) {\n                shape.setNextVertex(data.vertex3);\n            }\n            return shape;\n        };\n        /** @internal @deprecated */\n        EdgeShape.prototype.setNext = function (v) {\n            return this.setNextVertex(v);\n        };\n        /**\n         * Optional next vertex, used for smooth collision.\n         */\n        EdgeShape.prototype.setNextVertex = function (v) {\n            if (v) {\n                this.m_vertex3.setVec2(v);\n                this.m_hasVertex3 = true;\n            }\n            else {\n                this.m_vertex3.setZero();\n                this.m_hasVertex3 = false;\n            }\n            return this;\n        };\n        /**\n         * Optional next vertex, used for smooth collision.\n         */\n        EdgeShape.prototype.getNextVertex = function () {\n            return this.m_vertex3;\n        };\n        /** @internal @deprecated */\n        EdgeShape.prototype.setPrev = function (v) {\n            return this.setPrevVertex(v);\n        };\n        /**\n         * Optional prev vertex, used for smooth collision.\n         */\n        EdgeShape.prototype.setPrevVertex = function (v) {\n            if (v) {\n                this.m_vertex0.setVec2(v);\n                this.m_hasVertex0 = true;\n            }\n            else {\n                this.m_vertex0.setZero();\n                this.m_hasVertex0 = false;\n            }\n            return this;\n        };\n        /**\n         * Optional prev vertex, used for smooth collision.\n         */\n        EdgeShape.prototype.getPrevVertex = function () {\n            return this.m_vertex0;\n        };\n        /**\n         * Set this as an isolated edge.\n         */\n        EdgeShape.prototype._set = function (v1, v2) {\n            this.m_vertex1.setVec2(v1);\n            this.m_vertex2.setVec2(v2);\n            this.m_hasVertex0 = false;\n            this.m_hasVertex3 = false;\n            return this;\n        };\n        /**\n         * @internal\n         * @deprecated Shapes should be treated as immutable.\n         *\n         * clone the concrete shape.\n         */\n        EdgeShape.prototype._clone = function () {\n            var clone = new EdgeShape();\n            clone.m_type = this.m_type;\n            clone.m_radius = this.m_radius;\n            clone.m_vertex1.setVec2(this.m_vertex1);\n            clone.m_vertex2.setVec2(this.m_vertex2);\n            clone.m_vertex0.setVec2(this.m_vertex0);\n            clone.m_vertex3.setVec2(this.m_vertex3);\n            clone.m_hasVertex0 = this.m_hasVertex0;\n            clone.m_hasVertex3 = this.m_hasVertex3;\n            return clone;\n        };\n        /**\n         * Get the number of child primitives.\n         */\n        EdgeShape.prototype.getChildCount = function () {\n            return 1;\n        };\n        /**\n         * Test a point for containment in this shape. This only works for convex\n         * shapes.\n         *\n         * @param xf The shape world transform.\n         * @param p A point in world coordinates.\n         */\n        EdgeShape.prototype.testPoint = function (xf, p) {\n            return false;\n        };\n        /**\n         * Cast a ray against a child shape.\n         *\n         * @param output The ray-cast results.\n         * @param input The ray-cast input parameters.\n         * @param xf The transform to be applied to the shape.\n         * @param childIndex The child shape index\n         */\n        EdgeShape.prototype.rayCast = function (output, input, xf, childIndex) {\n            // p = p1 + t * d\n            // v = v1 + s * e\n            // p1 + t * d = v1 + s * e\n            // s * e - t * d = p1 - v1\n            // NOT_USED(childIndex);\n            // Put the ray into the edge's frame of reference.\n            var p1 = Rot.mulTVec2(xf.q, Vec2.sub(input.p1, xf.p));\n            var p2 = Rot.mulTVec2(xf.q, Vec2.sub(input.p2, xf.p));\n            var d = Vec2.sub(p2, p1);\n            var v1 = this.m_vertex1;\n            var v2 = this.m_vertex2;\n            var e = Vec2.sub(v2, v1);\n            var normal = Vec2.neo(e.y, -e.x);\n            normal.normalize();\n            // q = p1 + t * d\n            // dot(normal, q - v1) = 0\n            // dot(normal, p1 - v1) + t * dot(normal, d) = 0\n            var numerator = Vec2.dot(normal, Vec2.sub(v1, p1));\n            var denominator = Vec2.dot(normal, d);\n            if (denominator == 0.0) {\n                return false;\n            }\n            var t = numerator / denominator;\n            if (t < 0.0 || input.maxFraction < t) {\n                return false;\n            }\n            var q = Vec2.add(p1, Vec2.mulNumVec2(t, d));\n            // q = v1 + s * r\n            // s = dot(q - v1, r) / dot(r, r)\n            var r = Vec2.sub(v2, v1);\n            var rr = Vec2.dot(r, r);\n            if (rr == 0.0) {\n                return false;\n            }\n            var s = Vec2.dot(Vec2.sub(q, v1), r) / rr;\n            if (s < 0.0 || 1.0 < s) {\n                return false;\n            }\n            output.fraction = t;\n            if (numerator > 0.0) {\n                output.normal = Rot.mulVec2(xf.q, normal).neg();\n            }\n            else {\n                output.normal = Rot.mulVec2(xf.q, normal);\n            }\n            return true;\n        };\n        /**\n         * Given a transform, compute the associated axis aligned bounding box for a\n         * child shape.\n         *\n         * @param aabb Returns the axis aligned box.\n         * @param xf The world transform of the shape.\n         * @param childIndex The child shape\n         */\n        EdgeShape.prototype.computeAABB = function (aabb, xf, childIndex) {\n            var v1 = Transform.mulVec2(xf, this.m_vertex1);\n            var v2 = Transform.mulVec2(xf, this.m_vertex2);\n            aabb.combinePoints(v1, v2);\n            aabb.extend(this.m_radius);\n        };\n        /**\n         * Compute the mass properties of this shape using its dimensions and density.\n         * The inertia tensor is computed about the local origin.\n         *\n         * @param massData Returns the mass data for this shape.\n         * @param density The density in kilograms per meter squared.\n         */\n        EdgeShape.prototype.computeMass = function (massData, density) {\n            massData.mass = 0.0;\n            massData.center.setCombine(0.5, this.m_vertex1, 0.5, this.m_vertex2);\n            massData.I = 0.0;\n        };\n        EdgeShape.prototype.computeDistanceProxy = function (proxy) {\n            proxy.m_vertices.push(this.m_vertex1);\n            proxy.m_vertices.push(this.m_vertex2);\n            proxy.m_count = 2;\n            proxy.m_radius = this.m_radius;\n        };\n        EdgeShape.TYPE = 'edge';\n        return EdgeShape;\n    }(Shape));\n\n    /*\n     * Planck.js\n     * The MIT License\n     * Copyright (c) 2021 Erin Catto, Ali Shakiba\n     *\n     * Permission is hereby granted, free of charge, to any person obtaining a copy\n     * of this software and associated documentation files (the \"Software\"), to deal\n     * in the Software without restriction, including without limitation the rights\n     * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n     * copies of the Software, and to permit persons to whom the Software is\n     * furnished to do so, subject to the following conditions:\n     *\n     * The above copyright notice and this permission notice shall be included in all\n     * copies or substantial portions of the Software.\n     *\n     * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n     * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n     * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n     * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n     * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n     * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n     * SOFTWARE.\n     */\n    /**\n     * A chain shape is a free form sequence of line segments. The chain has\n     * two-sided collision, so you can use inside and outside collision. Therefore,\n     * you may use any winding order. Connectivity information is used to create\n     * smooth collisions.\n     *\n     * WARNING: The chain will not collide properly if there are self-intersections.\n     */\n    var ChainShape = /** @class */ (function (_super) {\n        __extends(ChainShape, _super);\n        function ChainShape(vertices, loop) {\n            var _this = this;\n            // @ts-ignore\n            if (!(_this instanceof ChainShape)) {\n                return new ChainShape(vertices, loop);\n            }\n            _this = _super.call(this) || this;\n            _this.m_type = ChainShape.TYPE;\n            _this.m_radius = Settings.polygonRadius;\n            _this.m_vertices = [];\n            _this.m_count = 0;\n            _this.m_prevVertex = null;\n            _this.m_nextVertex = null;\n            _this.m_hasPrevVertex = false;\n            _this.m_hasNextVertex = false;\n            _this.m_isLoop = !!loop;\n            if (vertices && vertices.length) {\n                if (loop) {\n                    _this._createLoop(vertices);\n                }\n                else {\n                    _this._createChain(vertices);\n                }\n            }\n            return _this;\n        }\n        /** @internal */\n        ChainShape.prototype._serialize = function () {\n            var data = {\n                type: this.m_type,\n                vertices: this.m_vertices,\n                isLoop: this.m_isLoop,\n                hasPrevVertex: this.m_hasPrevVertex,\n                hasNextVertex: this.m_hasNextVertex,\n                prevVertex: null,\n                nextVertex: null,\n            };\n            if (this.m_prevVertex) {\n                data.prevVertex = this.m_prevVertex;\n            }\n            if (this.m_nextVertex) {\n                data.nextVertex = this.m_nextVertex;\n            }\n            return data;\n        };\n        /** @internal */\n        ChainShape._deserialize = function (data, fixture, restore) {\n            var vertices = [];\n            if (data.vertices) {\n                for (var i = 0; i < data.vertices.length; i++) {\n                    vertices.push(restore(Vec2, data.vertices[i]));\n                }\n            }\n            var shape = new ChainShape(vertices, data.isLoop);\n            if (data.prevVertex) {\n                shape.setPrevVertex(data.prevVertex);\n            }\n            if (data.nextVertex) {\n                shape.setNextVertex(data.nextVertex);\n            }\n            return shape;\n        };\n        // clear() {\n        //   this.m_vertices.length = 0;\n        //   this.m_count = 0;\n        // }\n        /**\n         * @internal\n         * Create a loop. This automatically adjusts connectivity.\n         *\n         * @param vertices an array of vertices, these are copied\n         * @param count the vertex count\n         */\n        ChainShape.prototype._createLoop = function (vertices) {\n            for (var i = 1; i < vertices.length; ++i) {\n                vertices[i - 1];\n                vertices[i];\n            }\n            this.m_vertices = [];\n            this.m_count = vertices.length + 1;\n            for (var i = 0; i < vertices.length; ++i) {\n                this.m_vertices[i] = Vec2.clone(vertices[i]);\n            }\n            this.m_vertices[vertices.length] = Vec2.clone(vertices[0]);\n            this.m_prevVertex = this.m_vertices[this.m_count - 2];\n            this.m_nextVertex = this.m_vertices[1];\n            this.m_hasPrevVertex = true;\n            this.m_hasNextVertex = true;\n            return this;\n        };\n        /**\n         * @internal\n         * Create a chain with isolated end vertices.\n         *\n         * @param vertices an array of vertices, these are copied\n         * @param count the vertex count\n         */\n        ChainShape.prototype._createChain = function (vertices) {\n            for (var i = 1; i < vertices.length; ++i) {\n                // If the code crashes here, it means your vertices are too close together.\n                vertices[i - 1];\n                vertices[i];\n            }\n            this.m_count = vertices.length;\n            for (var i = 0; i < vertices.length; ++i) {\n                this.m_vertices[i] = Vec2.clone(vertices[i]);\n            }\n            this.m_hasPrevVertex = false;\n            this.m_hasNextVertex = false;\n            this.m_prevVertex = null;\n            this.m_nextVertex = null;\n            return this;\n        };\n        /** @internal */\n        ChainShape.prototype._reset = function () {\n            if (this.m_isLoop) {\n                this._createLoop(this.m_vertices);\n            }\n            else {\n                this._createChain(this.m_vertices);\n            }\n        };\n        /**\n         * Establish connectivity to a vertex that precedes the first vertex. Don't call\n         * this for loops.\n         */\n        ChainShape.prototype.setPrevVertex = function (prevVertex) {\n            this.m_prevVertex = prevVertex;\n            this.m_hasPrevVertex = true;\n        };\n        ChainShape.prototype.getPrevVertex = function () {\n            return this.m_prevVertex;\n        };\n        /**\n         * Establish connectivity to a vertex that follows the last vertex. Don't call\n         * this for loops.\n         */\n        ChainShape.prototype.setNextVertex = function (nextVertex) {\n            this.m_nextVertex = nextVertex;\n            this.m_hasNextVertex = true;\n        };\n        ChainShape.prototype.getNextVertex = function () {\n            return this.m_nextVertex;\n        };\n        /**\n         * @internal\n         * @deprecated Shapes should be treated as immutable.\n         *\n         * clone the concrete shape.\n         */\n        ChainShape.prototype._clone = function () {\n            var clone = new ChainShape();\n            clone._createChain(this.m_vertices);\n            clone.m_type = this.m_type;\n            clone.m_radius = this.m_radius;\n            clone.m_prevVertex = this.m_prevVertex;\n            clone.m_nextVertex = this.m_nextVertex;\n            clone.m_hasPrevVertex = this.m_hasPrevVertex;\n            clone.m_hasNextVertex = this.m_hasNextVertex;\n            return clone;\n        };\n        /**\n         * Get the number of child primitives.\n         */\n        ChainShape.prototype.getChildCount = function () {\n            // edge count = vertex count - 1\n            return this.m_count - 1;\n        };\n        // Get a child edge.\n        ChainShape.prototype.getChildEdge = function (edge, childIndex) {\n            edge.m_type = EdgeShape.TYPE;\n            edge.m_radius = this.m_radius;\n            edge.m_vertex1 = this.m_vertices[childIndex];\n            edge.m_vertex2 = this.m_vertices[childIndex + 1];\n            if (childIndex > 0) {\n                edge.m_vertex0 = this.m_vertices[childIndex - 1];\n                edge.m_hasVertex0 = true;\n            }\n            else {\n                edge.m_vertex0 = this.m_prevVertex;\n                edge.m_hasVertex0 = this.m_hasPrevVertex;\n            }\n            if (childIndex < this.m_count - 2) {\n                edge.m_vertex3 = this.m_vertices[childIndex + 2];\n                edge.m_hasVertex3 = true;\n            }\n            else {\n                edge.m_vertex3 = this.m_nextVertex;\n                edge.m_hasVertex3 = this.m_hasNextVertex;\n            }\n        };\n        ChainShape.prototype.getVertex = function (index) {\n            if (index < this.m_count) {\n                return this.m_vertices[index];\n            }\n            else {\n                return this.m_vertices[0];\n            }\n        };\n        ChainShape.prototype.isLoop = function () {\n            return this.m_isLoop;\n        };\n        /**\n         * Test a point for containment in this shape. This only works for convex\n         * shapes.\n         *\n         * This always return false.\n         *\n         * @param xf The shape world transform.\n         * @param p A point in world coordinates.\n         */\n        ChainShape.prototype.testPoint = function (xf, p) {\n            return false;\n        };\n        /**\n         * Cast a ray against a child shape.\n         *\n         * @param output The ray-cast results.\n         * @param input The ray-cast input parameters.\n         * @param xf The transform to be applied to the shape.\n         * @param childIndex The child shape index\n         */\n        ChainShape.prototype.rayCast = function (output, input, xf, childIndex) {\n            var edgeShape = new EdgeShape(this.getVertex(childIndex), this.getVertex(childIndex + 1));\n            return edgeShape.rayCast(output, input, xf, 0);\n        };\n        /**\n         * Given a transform, compute the associated axis aligned bounding box for a\n         * child shape.\n         *\n         * @param aabb Returns the axis aligned box.\n         * @param xf The world transform of the shape.\n         * @param childIndex The child shape\n         */\n        ChainShape.prototype.computeAABB = function (aabb, xf, childIndex) {\n            var v1 = Transform.mulVec2(xf, this.getVertex(childIndex));\n            var v2 = Transform.mulVec2(xf, this.getVertex(childIndex + 1));\n            aabb.combinePoints(v1, v2);\n        };\n        /**\n         * Compute the mass properties of this shape using its dimensions and density.\n         * The inertia tensor is computed about the local origin.\n         *\n         * Chains have zero mass.\n         *\n         * @param massData Returns the mass data for this shape.\n         * @param density The density in kilograms per meter squared.\n         */\n        ChainShape.prototype.computeMass = function (massData, density) {\n            massData.mass = 0.0;\n            massData.center = Vec2.zero();\n            massData.I = 0.0;\n        };\n        ChainShape.prototype.computeDistanceProxy = function (proxy, childIndex) {\n            proxy.m_buffer[0] = this.getVertex(childIndex);\n            proxy.m_buffer[1] = this.getVertex(childIndex + 1);\n            proxy.m_vertices = proxy.m_buffer;\n            proxy.m_count = 2;\n            proxy.m_radius = this.m_radius;\n        };\n        ChainShape.TYPE = 'chain';\n        return ChainShape;\n    }(Shape));\n\n    /*\n     * Planck.js\n     * The MIT License\n     * Copyright (c) 2021 Erin Catto, Ali Shakiba\n     *\n     * Permission is hereby granted, free of charge, to any person obtaining a copy\n     * of this software and associated documentation files (the \"Software\"), to deal\n     * in the Software without restriction, including without limitation the rights\n     * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n     * copies of the Software, and to permit persons to whom the Software is\n     * furnished to do so, subject to the following conditions:\n     *\n     * The above copyright notice and this permission notice shall be included in all\n     * copies or substantial portions of the Software.\n     *\n     * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n     * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n     * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n     * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n     * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n     * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n     * SOFTWARE.\n     */\n    /**\n     * A convex polygon. It is assumed that the interior of the polygon is to the\n     * left of each edge. Polygons have a maximum number of vertices equal to\n     * Settings.maxPolygonVertices. In most cases you should not need many vertices\n     * for a convex polygon. extends Shape\n     */\n    var PolygonShape = /** @class */ (function (_super) {\n        __extends(PolygonShape, _super);\n        // @ts-ignore\n        function PolygonShape(vertices) {\n            var _this = this;\n            // @ts-ignore\n            if (!(_this instanceof PolygonShape)) {\n                return new PolygonShape(vertices);\n            }\n            _this = _super.call(this) || this;\n            _this.m_type = PolygonShape.TYPE;\n            _this.m_radius = Settings.polygonRadius;\n            _this.m_centroid = Vec2.zero();\n            _this.m_vertices = [];\n            _this.m_normals = [];\n            _this.m_count = 0;\n            if (vertices && vertices.length) {\n                _this._set(vertices);\n            }\n            return _this;\n        }\n        /** @internal */\n        PolygonShape.prototype._serialize = function () {\n            return {\n                type: this.m_type,\n                vertices: this.m_vertices,\n            };\n        };\n        /** @internal */\n        PolygonShape._deserialize = function (data, fixture, restore) {\n            var vertices = [];\n            if (data.vertices) {\n                for (var i = 0; i < data.vertices.length; i++) {\n                    vertices.push(restore(Vec2, data.vertices[i]));\n                }\n            }\n            var shape = new PolygonShape(vertices);\n            return shape;\n        };\n        PolygonShape.prototype.getVertex = function (index) {\n            return this.m_vertices[index];\n        };\n        /**\n         * @internal\n         * @deprecated Shapes should be treated as immutable.\n         *\n         * clone the concrete shape.\n         */\n        PolygonShape.prototype._clone = function () {\n            var clone = new PolygonShape();\n            clone.m_type = this.m_type;\n            clone.m_radius = this.m_radius;\n            clone.m_count = this.m_count;\n            clone.m_centroid.setVec2(this.m_centroid);\n            for (var i = 0; i < this.m_count; i++) {\n                clone.m_vertices.push(this.m_vertices[i].clone());\n            }\n            for (var i = 0; i < this.m_normals.length; i++) {\n                clone.m_normals.push(this.m_normals[i].clone());\n            }\n            return clone;\n        };\n        /**\n         * Get the number of child primitives.\n         */\n        PolygonShape.prototype.getChildCount = function () {\n            return 1;\n        };\n        /** @internal */\n        PolygonShape.prototype._reset = function () {\n            this._set(this.m_vertices);\n        };\n        /**\n         * @internal\n         *\n         * Create a convex hull from the given array of local points. The count must be\n         * in the range [3, Settings.maxPolygonVertices].\n         *\n         * Warning: the points may be re-ordered, even if they form a convex polygon\n         * Warning: collinear points are handled but not removed. Collinear points may\n         * lead to poor stacking behavior.\n         */\n        PolygonShape.prototype._set = function (vertices) {\n            if (vertices.length < 3) {\n                this._setAsBox(1.0, 1.0);\n                return;\n            }\n            var n = math$1.min(vertices.length, Settings.maxPolygonVertices);\n            // Perform welding and copy vertices into local buffer.\n            var ps = []; // [Settings.maxPolygonVertices];\n            for (var i = 0; i < n; ++i) {\n                var v = vertices[i];\n                var unique = true;\n                for (var j = 0; j < ps.length; ++j) {\n                    if (Vec2.distanceSquared(v, ps[j]) < 0.25 * Settings.linearSlopSquared) {\n                        unique = false;\n                        break;\n                    }\n                }\n                if (unique) {\n                    ps.push(v);\n                }\n            }\n            n = ps.length;\n            if (n < 3) {\n                this._setAsBox(1.0, 1.0);\n                return;\n            }\n            // Create the convex hull using the Gift wrapping algorithm\n            // http://en.wikipedia.org/wiki/Gift_wrapping_algorithm\n            // Find the right most point on the hull (in case of multiple points bottom most is used)\n            var i0 = 0;\n            var x0 = ps[0].x;\n            for (var i = 1; i < n; ++i) {\n                var x = ps[i].x;\n                if (x > x0 || (x === x0 && ps[i].y < ps[i0].y)) {\n                    i0 = i;\n                    x0 = x;\n                }\n            }\n            var hull = []; // [Settings.maxPolygonVertices];\n            var m = 0;\n            var ih = i0;\n            while (true) {\n                hull[m] = ih;\n                var ie = 0;\n                for (var j = 1; j < n; ++j) {\n                    if (ie === ih) {\n                        ie = j;\n                        continue;\n                    }\n                    var r = Vec2.sub(ps[ie], ps[hull[m]]);\n                    var v = Vec2.sub(ps[j], ps[hull[m]]);\n                    var c = Vec2.crossVec2Vec2(r, v);\n                    // c < 0 means counter-clockwise wrapping, c > 0 means clockwise wrapping\n                    if (c < 0.0) {\n                        ie = j;\n                    }\n                    // Collinearity check\n                    if (c === 0.0 && v.lengthSquared() > r.lengthSquared()) {\n                        ie = j;\n                    }\n                }\n                ++m;\n                ih = ie;\n                if (ie === i0) {\n                    break;\n                }\n            }\n            if (m < 3) {\n                this._setAsBox(1.0, 1.0);\n                return;\n            }\n            this.m_count = m;\n            // Copy vertices.\n            this.m_vertices = [];\n            for (var i = 0; i < m; ++i) {\n                this.m_vertices[i] = ps[hull[i]];\n            }\n            // Compute normals. Ensure the edges have non-zero length.\n            for (var i = 0; i < m; ++i) {\n                var i1 = i;\n                var i2 = i + 1 < m ? i + 1 : 0;\n                var edge = Vec2.sub(this.m_vertices[i2], this.m_vertices[i1]);\n                this.m_normals[i] = Vec2.crossVec2Num(edge, 1.0);\n                this.m_normals[i].normalize();\n            }\n            // Compute the polygon centroid.\n            this.m_centroid = ComputeCentroid(this.m_vertices, m);\n        };\n        /** @internal */\n        PolygonShape.prototype._setAsBox = function (hx, hy, center, angle) {\n            // start with right-bottom, counter-clockwise, as in Gift wrapping algorithm in PolygonShape._set()\n            this.m_vertices[0] = Vec2.neo(hx, -hy);\n            this.m_vertices[1] = Vec2.neo(hx, hy);\n            this.m_vertices[2] = Vec2.neo(-hx, hy);\n            this.m_vertices[3] = Vec2.neo(-hx, -hy);\n            this.m_normals[0] = Vec2.neo(1.0, 0.0);\n            this.m_normals[1] = Vec2.neo(0.0, 1.0);\n            this.m_normals[2] = Vec2.neo(-1.0, 0.0);\n            this.m_normals[3] = Vec2.neo(0.0, -1.0);\n            this.m_count = 4;\n            if (Vec2.isValid(center)) {\n                angle = angle || 0;\n                this.m_centroid.setVec2(center);\n                var xf = Transform.identity();\n                xf.p.setVec2(center);\n                xf.q.setAngle(angle);\n                // Transform vertices and normals.\n                for (var i = 0; i < this.m_count; ++i) {\n                    this.m_vertices[i] = Transform.mulVec2(xf, this.m_vertices[i]);\n                    this.m_normals[i] = Rot.mulVec2(xf.q, this.m_normals[i]);\n                }\n            }\n        };\n        /**\n         * Test a point for containment in this shape. This only works for convex\n         * shapes.\n         *\n         * @param xf The shape world transform.\n         * @param p A point in world coordinates.\n         */\n        PolygonShape.prototype.testPoint = function (xf, p) {\n            var pLocal = Rot.mulTVec2(xf.q, Vec2.sub(p, xf.p));\n            for (var i = 0; i < this.m_count; ++i) {\n                var dot = Vec2.dot(this.m_normals[i], Vec2.sub(pLocal, this.m_vertices[i]));\n                if (dot > 0.0) {\n                    return false;\n                }\n            }\n            return true;\n        };\n        /**\n         * Cast a ray against a child shape.\n         *\n         * @param output The ray-cast results.\n         * @param input The ray-cast input parameters.\n         * @param xf The transform to be applied to the shape.\n         * @param childIndex The child shape index\n         */\n        PolygonShape.prototype.rayCast = function (output, input, xf, childIndex) {\n            // Put the ray into the polygon's frame of reference.\n            var p1 = Rot.mulTVec2(xf.q, Vec2.sub(input.p1, xf.p));\n            var p2 = Rot.mulTVec2(xf.q, Vec2.sub(input.p2, xf.p));\n            var d = Vec2.sub(p2, p1);\n            var lower = 0.0;\n            var upper = input.maxFraction;\n            var index = -1;\n            for (var i = 0; i < this.m_count; ++i) {\n                // p = p1 + a * d\n                // dot(normal, p - v) = 0\n                // dot(normal, p1 - v) + a * dot(normal, d) = 0\n                var numerator = Vec2.dot(this.m_normals[i], Vec2.sub(this.m_vertices[i], p1));\n                var denominator = Vec2.dot(this.m_normals[i], d);\n                if (denominator == 0.0) {\n                    if (numerator < 0.0) {\n                        return false;\n                    }\n                }\n                else {\n                    // Note: we want this predicate without division:\n                    // lower < numerator / denominator, where denominator < 0\n                    // Since denominator < 0, we have to flip the inequality:\n                    // lower < numerator / denominator <==> denominator * lower > numerator.\n                    if (denominator < 0.0 && numerator < lower * denominator) {\n                        // Increase lower.\n                        // The segment enters this half-space.\n                        lower = numerator / denominator;\n                        index = i;\n                    }\n                    else if (denominator > 0.0 && numerator < upper * denominator) {\n                        // Decrease upper.\n                        // The segment exits this half-space.\n                        upper = numerator / denominator;\n                    }\n                }\n                // The use of epsilon here causes the assert on lower to trip\n                // in some cases. Apparently the use of epsilon was to make edge\n                // shapes work, but now those are handled separately.\n                // if (upper < lower - Math.EPSILON)\n                if (upper < lower) {\n                    return false;\n                }\n            }\n            if (index >= 0) {\n                output.fraction = lower;\n                output.normal = Rot.mulVec2(xf.q, this.m_normals[index]);\n                return true;\n            }\n            return false;\n        };\n        /**\n         * Given a transform, compute the associated axis aligned bounding box for a\n         * child shape.\n         *\n         * @param aabb Returns the axis aligned box.\n         * @param xf The world transform of the shape.\n         * @param childIndex The child shape\n         */\n        PolygonShape.prototype.computeAABB = function (aabb, xf, childIndex) {\n            var minX = Infinity;\n            var minY = Infinity;\n            var maxX = -Infinity;\n            var maxY = -Infinity;\n            for (var i = 0; i < this.m_count; ++i) {\n                var v = Transform.mulVec2(xf, this.m_vertices[i]);\n                minX = math$1.min(minX, v.x);\n                maxX = math$1.max(maxX, v.x);\n                minY = math$1.min(minY, v.y);\n                maxY = math$1.max(maxY, v.y);\n            }\n            aabb.lowerBound.setNum(minX, minY);\n            aabb.upperBound.setNum(maxX, maxY);\n            aabb.extend(this.m_radius);\n        };\n        /**\n         * Compute the mass properties of this shape using its dimensions and density.\n         * The inertia tensor is computed about the local origin.\n         *\n         * @param massData Returns the mass data for this shape.\n         * @param density The density in kilograms per meter squared.\n         */\n        PolygonShape.prototype.computeMass = function (massData, density) {\n            var center = Vec2.zero();\n            var area = 0.0;\n            var I = 0.0;\n            // s is the reference point for forming triangles.\n            // It's location doesn't change the result (except for rounding error).\n            var s = Vec2.zero();\n            // This code would put the reference point inside the polygon.\n            for (var i = 0; i < this.m_count; ++i) {\n                s.add(this.m_vertices[i]);\n            }\n            s.mul(1.0 / this.m_count);\n            var k_inv3 = 1.0 / 3.0;\n            for (var i = 0; i < this.m_count; ++i) {\n                // Triangle vertices.\n                var e1 = Vec2.sub(this.m_vertices[i], s);\n                var e2 = i + 1 < this.m_count ? Vec2.sub(this.m_vertices[i + 1], s) : Vec2.sub(this.m_vertices[0], s);\n                var D = Vec2.crossVec2Vec2(e1, e2);\n                var triangleArea = 0.5 * D;\n                area += triangleArea;\n                // Area weighted centroid\n                center.addCombine(triangleArea * k_inv3, e1, triangleArea * k_inv3, e2);\n                var ex1 = e1.x;\n                var ey1 = e1.y;\n                var ex2 = e2.x;\n                var ey2 = e2.y;\n                var intx2 = ex1 * ex1 + ex2 * ex1 + ex2 * ex2;\n                var inty2 = ey1 * ey1 + ey2 * ey1 + ey2 * ey2;\n                I += (0.25 * k_inv3 * D) * (intx2 + inty2);\n            }\n            // Total mass\n            massData.mass = density * area;\n            center.mul(1.0 / area);\n            massData.center.setCombine(1, center, 1, s);\n            // Inertia tensor relative to the local origin (point s).\n            massData.I = density * I;\n            // Shift to center of mass then to original body origin.\n            massData.I += massData.mass * (Vec2.dot(massData.center, massData.center) - Vec2.dot(center, center));\n        };\n        /**\n         * Validate convexity. This is a very time consuming operation.\n         * @returns true if valid\n         */\n        PolygonShape.prototype.validate = function () {\n            for (var i = 0; i < this.m_count; ++i) {\n                var i1 = i;\n                var i2 = i < this.m_count - 1 ? i1 + 1 : 0;\n                var p = this.m_vertices[i1];\n                var e = Vec2.sub(this.m_vertices[i2], p);\n                for (var j = 0; j < this.m_count; ++j) {\n                    if (j == i1 || j == i2) {\n                        continue;\n                    }\n                    var v = Vec2.sub(this.m_vertices[j], p);\n                    var c = Vec2.crossVec2Vec2(e, v);\n                    if (c < 0.0) {\n                        return false;\n                    }\n                }\n            }\n            return true;\n        };\n        PolygonShape.prototype.computeDistanceProxy = function (proxy) {\n            proxy.m_vertices = this.m_vertices;\n            proxy.m_count = this.m_count;\n            proxy.m_radius = this.m_radius;\n        };\n        PolygonShape.TYPE = 'polygon';\n        return PolygonShape;\n    }(Shape));\n    function ComputeCentroid(vs, count) {\n        var c = Vec2.zero();\n        var area = 0.0;\n        // pRef is the reference point for forming triangles.\n        // It's location doesn't change the result (except for rounding error).\n        var pRef = Vec2.zero();\n        var i; \n        var inv3 = 1.0 / 3.0;\n        for (var i = 0; i < count; ++i) {\n            // Triangle vertices.\n            var p1 = pRef;\n            var p2 = vs[i];\n            var p3 = i + 1 < count ? vs[i + 1] : vs[0];\n            var e1 = Vec2.sub(p2, p1);\n            var e2 = Vec2.sub(p3, p1);\n            var D = Vec2.crossVec2Vec2(e1, e2);\n            var triangleArea = 0.5 * D;\n            area += triangleArea;\n            // Area weighted centroid\n            c.addMul(triangleArea * inv3, p1);\n            c.addMul(triangleArea * inv3, p2);\n            c.addMul(triangleArea * inv3, p3);\n        }\n        c.mul(1.0 / area);\n        return c;\n    }\n\n    /*\n     * Planck.js\n     * The MIT License\n     * Copyright (c) 2021 Erin Catto, Ali Shakiba\n     *\n     * Permission is hereby granted, free of charge, to any person obtaining a copy\n     * of this software and associated documentation files (the \"Software\"), to deal\n     * in the Software without restriction, including without limitation the rights\n     * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n     * copies of the Software, and to permit persons to whom the Software is\n     * furnished to do so, subject to the following conditions:\n     *\n     * The above copyright notice and this permission notice shall be included in all\n     * copies or substantial portions of the Software.\n     *\n     * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n     * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n     * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n     * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n     * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n     * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n     * SOFTWARE.\n     */\n    /**\n     * A rectangle polygon which extend PolygonShape.\n     */\n    var BoxShape = /** @class */ (function (_super) {\n        __extends(BoxShape, _super);\n        function BoxShape(hx, hy, center, angle) {\n            var _this = this;\n            // @ts-ignore\n            if (!(_this instanceof BoxShape)) {\n                return new BoxShape(hx, hy, center, angle);\n            }\n            _this = _super.call(this) || this;\n            _this._setAsBox(hx, hy, center, angle);\n            return _this;\n        }\n        BoxShape.TYPE = 'polygon';\n        return BoxShape;\n    }(PolygonShape));\n\n    /*\n     * Planck.js\n     * The MIT License\n     * Copyright (c) 2021 Erin Catto, Ali Shakiba\n     *\n     * Permission is hereby granted, free of charge, to any person obtaining a copy\n     * of this software and associated documentation files (the \"Software\"), to deal\n     * in the Software without restriction, including without limitation the rights\n     * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n     * copies of the Software, and to permit persons to whom the Software is\n     * furnished to do so, subject to the following conditions:\n     *\n     * The above copyright notice and this permission notice shall be included in all\n     * copies or substantial portions of the Software.\n     *\n     * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n     * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n     * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n     * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n     * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n     * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n     * SOFTWARE.\n     */\n    var CircleShape = /** @class */ (function (_super) {\n        __extends(CircleShape, _super);\n        // tslint:disable-next-line:typedef\n        function CircleShape(a, b) {\n            var _this = this;\n            // @ts-ignore\n            if (!(_this instanceof CircleShape)) {\n                return new CircleShape(a, b);\n            }\n            _this = _super.call(this) || this;\n            _this.m_type = CircleShape.TYPE;\n            _this.m_p = Vec2.zero();\n            _this.m_radius = 1;\n            if (typeof a === 'object' && Vec2.isValid(a)) {\n                _this.m_p.setVec2(a);\n                if (typeof b === 'number') {\n                    _this.m_radius = b;\n                }\n            }\n            else if (typeof a === 'number') {\n                _this.m_radius = a;\n            }\n            return _this;\n        }\n        /** @internal */\n        CircleShape.prototype._serialize = function () {\n            return {\n                type: this.m_type,\n                p: this.m_p,\n                radius: this.m_radius,\n            };\n        };\n        /** @internal */\n        CircleShape._deserialize = function (data) {\n            return new CircleShape(data.p, data.radius);\n        };\n        // TODO: already defined in Shape\n        CircleShape.prototype.getRadius = function () {\n            return this.m_radius;\n        };\n        CircleShape.prototype.getCenter = function () {\n            return this.m_p;\n        };\n        CircleShape.prototype.getVertex = function (index) {\n            return this.m_p;\n        };\n        /**\n         * @internal\n         * @deprecated Shapes should be treated as immutable.\n         *\n         * clone the concrete shape.\n         */\n        CircleShape.prototype._clone = function () {\n            var clone = new CircleShape();\n            clone.m_type = this.m_type;\n            clone.m_radius = this.m_radius;\n            clone.m_p = this.m_p.clone();\n            return clone;\n        };\n        /**\n         * Get the number of child primitives.\n         */\n        CircleShape.prototype.getChildCount = function () {\n            return 1;\n        };\n        /**\n         * Test a point for containment in this shape. This only works for convex\n         * shapes.\n         *\n         * @param xf The shape world transform.\n         * @param p A point in world coordinates.\n         */\n        CircleShape.prototype.testPoint = function (xf, p) {\n            var center = Vec2.add(xf.p, Rot.mulVec2(xf.q, this.m_p));\n            var d = Vec2.sub(p, center);\n            return Vec2.dot(d, d) <= this.m_radius * this.m_radius;\n        };\n        /**\n         * Cast a ray against a child shape.\n         *\n         * @param output The ray-cast results.\n         * @param input The ray-cast input parameters.\n         * @param xf The transform to be applied to the shape.\n         * @param childIndex The child shape index\n         */\n        CircleShape.prototype.rayCast = function (output, input, xf, childIndex) {\n            // Collision Detection in Interactive 3D Environments by Gino van den Bergen\n            // From Section 3.1.2\n            // x = s + a * r\n            // norm(x) = radius\n            var position = Vec2.add(xf.p, Rot.mulVec2(xf.q, this.m_p));\n            var s = Vec2.sub(input.p1, position);\n            var b = Vec2.dot(s, s) - this.m_radius * this.m_radius;\n            // Solve quadratic equation.\n            var r = Vec2.sub(input.p2, input.p1);\n            var c = Vec2.dot(s, r);\n            var rr = Vec2.dot(r, r);\n            var sigma = c * c - rr * b;\n            // Check for negative discriminant and short segment.\n            if (sigma < 0.0 || rr < math$1.EPSILON) {\n                return false;\n            }\n            // Find the point of intersection of the line with the circle.\n            var a = -(c + math$1.sqrt(sigma));\n            // Is the intersection point on the segment?\n            if (0.0 <= a && a <= input.maxFraction * rr) {\n                a /= rr;\n                output.fraction = a;\n                output.normal = Vec2.add(s, Vec2.mulNumVec2(a, r));\n                output.normal.normalize();\n                return true;\n            }\n            return false;\n        };\n        /**\n         * Given a transform, compute the associated axis aligned bounding box for a\n         * child shape.\n         *\n         * @param aabb Returns the axis aligned box.\n         * @param xf The world transform of the shape.\n         * @param childIndex The child shape\n         */\n        CircleShape.prototype.computeAABB = function (aabb, xf, childIndex) {\n            var p = Vec2.add(xf.p, Rot.mulVec2(xf.q, this.m_p));\n            aabb.lowerBound.setNum(p.x - this.m_radius, p.y - this.m_radius);\n            aabb.upperBound.setNum(p.x + this.m_radius, p.y + this.m_radius);\n        };\n        /**\n         * Compute the mass properties of this shape using its dimensions and density.\n         * The inertia tensor is computed about the local origin.\n         *\n         * @param massData Returns the mass data for this shape.\n         * @param density The density in kilograms per meter squared.\n         */\n        CircleShape.prototype.computeMass = function (massData, density) {\n            massData.mass = density * math$1.PI * this.m_radius * this.m_radius;\n            massData.center = this.m_p;\n            // inertia about the local origin\n            massData.I = massData.mass\n                * (0.5 * this.m_radius * this.m_radius + Vec2.dot(this.m_p, this.m_p));\n        };\n        CircleShape.prototype.computeDistanceProxy = function (proxy) {\n            proxy.m_vertices.push(this.m_p);\n            proxy.m_count = 1;\n            proxy.m_radius = this.m_radius;\n        };\n        CircleShape.TYPE = 'circle';\n        return CircleShape;\n    }(Shape));\n\n    /*\n     * Planck.js\n     * The MIT License\n     * Copyright (c) 2021 Erin Catto, Ali Shakiba\n     *\n     * Permission is hereby granted, free of charge, to any person obtaining a copy\n     * of this software and associated documentation files (the \"Software\"), to deal\n     * in the Software without restriction, including without limitation the rights\n     * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n     * copies of the Software, and to permit persons to whom the Software is\n     * furnished to do so, subject to the following conditions:\n     *\n     * The above copyright notice and this permission notice shall be included in all\n     * copies or substantial portions of the Software.\n     *\n     * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n     * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n     * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n     * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n     * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n     * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n     * SOFTWARE.\n     */\n    var DEFAULTS$a = {\n        frequencyHz: 0.0,\n        dampingRatio: 0.0\n    };\n    /**\n     * A distance joint constrains two points on two bodies to remain at a fixed\n     * distance from each other. You can view this as a massless, rigid rod.\n     *\n     * @param anchorA Anchor A in global coordination.\n     * @param anchorB Anchor B in global coordination.\n     */\n    var DistanceJoint = /** @class */ (function (_super) {\n        __extends(DistanceJoint, _super);\n        function DistanceJoint(def, bodyA, bodyB, anchorA, anchorB) {\n            var _this = this;\n            // @ts-ignore\n            if (!(_this instanceof DistanceJoint)) {\n                return new DistanceJoint(def, bodyA, bodyB, anchorA, anchorB);\n            }\n            // order of constructor arguments is changed in v0.2\n            if (bodyB && anchorA && ('m_type' in anchorA) && ('x' in bodyB) && ('y' in bodyB)) {\n                var temp = bodyB;\n                bodyB = anchorA;\n                anchorA = temp;\n            }\n            def = options(def, DEFAULTS$a);\n            _this = _super.call(this, def, bodyA, bodyB) || this;\n            bodyA = _this.m_bodyA;\n            bodyB = _this.m_bodyB;\n            _this.m_type = DistanceJoint.TYPE;\n            // Solver shared\n            _this.m_localAnchorA = Vec2.clone(anchorA ? bodyA.getLocalPoint(anchorA) : def.localAnchorA || Vec2.zero());\n            _this.m_localAnchorB = Vec2.clone(anchorB ? bodyB.getLocalPoint(anchorB) : def.localAnchorB || Vec2.zero());\n            _this.m_length = math$1.isFinite(def.length) ? def.length :\n                Vec2.distance(bodyA.getWorldPoint(_this.m_localAnchorA), bodyB.getWorldPoint(_this.m_localAnchorB));\n            _this.m_frequencyHz = def.frequencyHz;\n            _this.m_dampingRatio = def.dampingRatio;\n            _this.m_impulse = 0.0;\n            _this.m_gamma = 0.0;\n            _this.m_bias = 0.0;\n            return _this;\n            // 1-D constrained system\n            // m (v2 - v1) = lambda\n            // v2 + (beta/h) * x1 + gamma * lambda = 0, gamma has units of inverse mass.\n            // x2 = x1 + h * v2\n            // 1-D mass-damper-spring system\n            // m (v2 - v1) + h * d * v2 + h * k *\n            // C = norm(p2 - p1) - L\n            // u = (p2 - p1) / norm(p2 - p1)\n            // Cdot = dot(u, v2 + cross(w2, r2) - v1 - cross(w1, r1))\n            // J = [-u -cross(r1, u) u cross(r2, u)]\n            // K = J * invM * JT\n            // = invMass1 + invI1 * cross(r1, u)^2 + invMass2 + invI2 * cross(r2, u)^2\n        }\n        /** @internal */\n        DistanceJoint.prototype._serialize = function () {\n            return {\n                type: this.m_type,\n                bodyA: this.m_bodyA,\n                bodyB: this.m_bodyB,\n                collideConnected: this.m_collideConnected,\n                frequencyHz: this.m_frequencyHz,\n                dampingRatio: this.m_dampingRatio,\n                localAnchorA: this.m_localAnchorA,\n                localAnchorB: this.m_localAnchorB,\n                length: this.m_length,\n                impulse: this.m_impulse,\n                gamma: this.m_gamma,\n                bias: this.m_bias,\n            };\n        };\n        /** @internal */\n        DistanceJoint._deserialize = function (data, world, restore) {\n            data = __assign({}, data);\n            data.bodyA = restore(Body, data.bodyA, world);\n            data.bodyB = restore(Body, data.bodyB, world);\n            var joint = new DistanceJoint(data);\n            return joint;\n        };\n        /** @internal */\n        DistanceJoint.prototype._setAnchors = function (def) {\n            if (def.anchorA) {\n                this.m_localAnchorA.setVec2(this.m_bodyA.getLocalPoint(def.anchorA));\n            }\n            else if (def.localAnchorA) {\n                this.m_localAnchorA.setVec2(def.localAnchorA);\n            }\n            if (def.anchorB) {\n                this.m_localAnchorB.setVec2(this.m_bodyB.getLocalPoint(def.anchorB));\n            }\n            else if (def.localAnchorB) {\n                this.m_localAnchorB.setVec2(def.localAnchorB);\n            }\n            if (def.length > 0) {\n                this.m_length = +def.length;\n            }\n            else if (def.length < 0) ;\n            else if (def.anchorA || def.anchorA || def.anchorA || def.anchorA) {\n                this.m_length = Vec2.distance(this.m_bodyA.getWorldPoint(this.m_localAnchorA), this.m_bodyB.getWorldPoint(this.m_localAnchorB));\n            }\n        };\n        /**\n         * The local anchor point relative to bodyA's origin.\n         */\n        DistanceJoint.prototype.getLocalAnchorA = function () {\n            return this.m_localAnchorA;\n        };\n        /**\n         * The local anchor point relative to bodyB's origin.\n         */\n        DistanceJoint.prototype.getLocalAnchorB = function () {\n            return this.m_localAnchorB;\n        };\n        /**\n         * Set the natural length. Manipulating the length can lead to non-physical\n         * behavior when the frequency is zero.\n         */\n        DistanceJoint.prototype.setLength = function (length) {\n            this.m_length = length;\n        };\n        /**\n         * Get the natural length.\n         */\n        DistanceJoint.prototype.getLength = function () {\n            return this.m_length;\n        };\n        DistanceJoint.prototype.setFrequency = function (hz) {\n            this.m_frequencyHz = hz;\n        };\n        DistanceJoint.prototype.getFrequency = function () {\n            return this.m_frequencyHz;\n        };\n        DistanceJoint.prototype.setDampingRatio = function (ratio) {\n            this.m_dampingRatio = ratio;\n        };\n        DistanceJoint.prototype.getDampingRatio = function () {\n            return this.m_dampingRatio;\n        };\n        /**\n         * Get the anchor point on bodyA in world coordinates.\n         */\n        DistanceJoint.prototype.getAnchorA = function () {\n            return this.m_bodyA.getWorldPoint(this.m_localAnchorA);\n        };\n        /**\n         * Get the anchor point on bodyB in world coordinates.\n         */\n        DistanceJoint.prototype.getAnchorB = function () {\n            return this.m_bodyB.getWorldPoint(this.m_localAnchorB);\n        };\n        /**\n         * Get the reaction force on bodyB at the joint anchor in Newtons.\n         */\n        DistanceJoint.prototype.getReactionForce = function (inv_dt) {\n            return Vec2.mulNumVec2(this.m_impulse, this.m_u).mul(inv_dt);\n        };\n        /**\n         * Get the reaction torque on bodyB in N*m.\n         */\n        DistanceJoint.prototype.getReactionTorque = function (inv_dt) {\n            return 0.0;\n        };\n        DistanceJoint.prototype.initVelocityConstraints = function (step) {\n            this.m_localCenterA = this.m_bodyA.m_sweep.localCenter;\n            this.m_localCenterB = this.m_bodyB.m_sweep.localCenter;\n            this.m_invMassA = this.m_bodyA.m_invMass;\n            this.m_invMassB = this.m_bodyB.m_invMass;\n            this.m_invIA = this.m_bodyA.m_invI;\n            this.m_invIB = this.m_bodyB.m_invI;\n            var cA = this.m_bodyA.c_position.c;\n            var aA = this.m_bodyA.c_position.a;\n            var vA = this.m_bodyA.c_velocity.v;\n            var wA = this.m_bodyA.c_velocity.w;\n            var cB = this.m_bodyB.c_position.c;\n            var aB = this.m_bodyB.c_position.a;\n            var vB = this.m_bodyB.c_velocity.v;\n            var wB = this.m_bodyB.c_velocity.w;\n            var qA = Rot.neo(aA);\n            var qB = Rot.neo(aB);\n            this.m_rA = Rot.mulVec2(qA, Vec2.sub(this.m_localAnchorA, this.m_localCenterA));\n            this.m_rB = Rot.mulVec2(qB, Vec2.sub(this.m_localAnchorB, this.m_localCenterB));\n            this.m_u = Vec2.sub(Vec2.add(cB, this.m_rB), Vec2.add(cA, this.m_rA));\n            // Handle singularity.\n            var length = this.m_u.length();\n            if (length > Settings.linearSlop) {\n                this.m_u.mul(1.0 / length);\n            }\n            else {\n                this.m_u.setNum(0.0, 0.0);\n            }\n            var crAu = Vec2.crossVec2Vec2(this.m_rA, this.m_u);\n            var crBu = Vec2.crossVec2Vec2(this.m_rB, this.m_u);\n            var invMass = this.m_invMassA + this.m_invIA * crAu * crAu + this.m_invMassB\n                + this.m_invIB * crBu * crBu;\n            // Compute the effective mass matrix.\n            this.m_mass = invMass != 0.0 ? 1.0 / invMass : 0.0;\n            if (this.m_frequencyHz > 0.0) {\n                var C = length - this.m_length;\n                // Frequency\n                var omega = 2.0 * math$1.PI * this.m_frequencyHz;\n                // Damping coefficient\n                var d = 2.0 * this.m_mass * this.m_dampingRatio * omega;\n                // Spring stiffness\n                var k = this.m_mass * omega * omega;\n                // magic formulas\n                var h = step.dt;\n                this.m_gamma = h * (d + h * k);\n                this.m_gamma = this.m_gamma != 0.0 ? 1.0 / this.m_gamma : 0.0;\n                this.m_bias = C * h * k * this.m_gamma;\n                invMass += this.m_gamma;\n                this.m_mass = invMass != 0.0 ? 1.0 / invMass : 0.0;\n            }\n            else {\n                this.m_gamma = 0.0;\n                this.m_bias = 0.0;\n            }\n            if (step.warmStarting) {\n                // Scale the impulse to support a variable time step.\n                this.m_impulse *= step.dtRatio;\n                var P = Vec2.mulNumVec2(this.m_impulse, this.m_u);\n                vA.subMul(this.m_invMassA, P);\n                wA -= this.m_invIA * Vec2.crossVec2Vec2(this.m_rA, P);\n                vB.addMul(this.m_invMassB, P);\n                wB += this.m_invIB * Vec2.crossVec2Vec2(this.m_rB, P);\n            }\n            else {\n                this.m_impulse = 0.0;\n            }\n            this.m_bodyA.c_velocity.v.setVec2(vA);\n            this.m_bodyA.c_velocity.w = wA;\n            this.m_bodyB.c_velocity.v.setVec2(vB);\n            this.m_bodyB.c_velocity.w = wB;\n        };\n        DistanceJoint.prototype.solveVelocityConstraints = function (step) {\n            var vA = this.m_bodyA.c_velocity.v;\n            var wA = this.m_bodyA.c_velocity.w;\n            var vB = this.m_bodyB.c_velocity.v;\n            var wB = this.m_bodyB.c_velocity.w;\n            // Cdot = dot(u, v + cross(w, r))\n            var vpA = Vec2.add(vA, Vec2.crossNumVec2(wA, this.m_rA));\n            var vpB = Vec2.add(vB, Vec2.crossNumVec2(wB, this.m_rB));\n            var Cdot = Vec2.dot(this.m_u, vpB) - Vec2.dot(this.m_u, vpA);\n            var impulse = -this.m_mass\n                * (Cdot + this.m_bias + this.m_gamma * this.m_impulse);\n            this.m_impulse += impulse;\n            var P = Vec2.mulNumVec2(impulse, this.m_u);\n            vA.subMul(this.m_invMassA, P);\n            wA -= this.m_invIA * Vec2.crossVec2Vec2(this.m_rA, P);\n            vB.addMul(this.m_invMassB, P);\n            wB += this.m_invIB * Vec2.crossVec2Vec2(this.m_rB, P);\n            this.m_bodyA.c_velocity.v.setVec2(vA);\n            this.m_bodyA.c_velocity.w = wA;\n            this.m_bodyB.c_velocity.v.setVec2(vB);\n            this.m_bodyB.c_velocity.w = wB;\n        };\n        /**\n         * This returns true if the position errors are within tolerance.\n         */\n        DistanceJoint.prototype.solvePositionConstraints = function (step) {\n            if (this.m_frequencyHz > 0.0) {\n                // There is no position correction for soft distance constraints.\n                return true;\n            }\n            var cA = this.m_bodyA.c_position.c;\n            var aA = this.m_bodyA.c_position.a;\n            var cB = this.m_bodyB.c_position.c;\n            var aB = this.m_bodyB.c_position.a;\n            var qA = Rot.neo(aA);\n            var qB = Rot.neo(aB);\n            var rA = Rot.mulSub(qA, this.m_localAnchorA, this.m_localCenterA);\n            var rB = Rot.mulSub(qB, this.m_localAnchorB, this.m_localCenterB);\n            var u = Vec2.sub(Vec2.add(cB, rB), Vec2.add(cA, rA));\n            var length = u.normalize();\n            var C = length - this.m_length;\n            C = math$1\n                .clamp(C, -Settings.maxLinearCorrection, Settings.maxLinearCorrection);\n            var impulse = -this.m_mass * C;\n            var P = Vec2.mulNumVec2(impulse, u);\n            cA.subMul(this.m_invMassA, P);\n            aA -= this.m_invIA * Vec2.crossVec2Vec2(rA, P);\n            cB.addMul(this.m_invMassB, P);\n            aB += this.m_invIB * Vec2.crossVec2Vec2(rB, P);\n            this.m_bodyA.c_position.c.setVec2(cA);\n            this.m_bodyA.c_position.a = aA;\n            this.m_bodyB.c_position.c.setVec2(cB);\n            this.m_bodyB.c_position.a = aB;\n            return math$1.abs(C) < Settings.linearSlop;\n        };\n        DistanceJoint.TYPE = 'distance-joint';\n        return DistanceJoint;\n    }(Joint));\n\n    /*\n     * Planck.js\n     * The MIT License\n     * Copyright (c) 2021 Erin Catto, Ali Shakiba\n     *\n     * Permission is hereby granted, free of charge, to any person obtaining a copy\n     * of this software and associated documentation files (the \"Software\"), to deal\n     * in the Software without restriction, including without limitation the rights\n     * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n     * copies of the Software, and to permit persons to whom the Software is\n     * furnished to do so, subject to the following conditions:\n     *\n     * The above copyright notice and this permission notice shall be included in all\n     * copies or substantial portions of the Software.\n     *\n     * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n     * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n     * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n     * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n     * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n     * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n     * SOFTWARE.\n     */\n    var DEFAULTS$9 = {\n        maxForce: 0.0,\n        maxTorque: 0.0,\n    };\n    /**\n     * Friction joint. This is used for top-down friction. It provides 2D\n     * translational friction and angular friction.\n     *\n     * @param anchor Anchor in global coordination.\n     */\n    var FrictionJoint = /** @class */ (function (_super) {\n        __extends(FrictionJoint, _super);\n        function FrictionJoint(def, bodyA, bodyB, anchor) {\n            var _this = this;\n            // @ts-ignore\n            if (!(_this instanceof FrictionJoint)) {\n                return new FrictionJoint(def, bodyA, bodyB, anchor);\n            }\n            def = options(def, DEFAULTS$9);\n            _this = _super.call(this, def, bodyA, bodyB) || this;\n            bodyA = _this.m_bodyA;\n            bodyB = _this.m_bodyB;\n            _this.m_type = FrictionJoint.TYPE;\n            _this.m_localAnchorA = Vec2.clone(anchor ? bodyA.getLocalPoint(anchor) : def.localAnchorA || Vec2.zero());\n            _this.m_localAnchorB = Vec2.clone(anchor ? bodyB.getLocalPoint(anchor) : def.localAnchorB || Vec2.zero());\n            // Solver shared\n            _this.m_linearImpulse = Vec2.zero();\n            _this.m_angularImpulse = 0.0;\n            _this.m_maxForce = def.maxForce;\n            _this.m_maxTorque = def.maxTorque;\n            return _this;\n            // Point-to-point constraint\n            // Cdot = v2 - v1\n            // = v2 + cross(w2, r2) - v1 - cross(w1, r1)\n            // J = [-I -r1_skew I r2_skew ]\n            // Identity used:\n            // w k % (rx i + ry j) = w * (-ry i + rx j)\n            // Angle constraint\n            // Cdot = w2 - w1\n            // J = [0 0 -1 0 0 1]\n            // K = invI1 + invI2\n        }\n        /** @internal */\n        FrictionJoint.prototype._serialize = function () {\n            return {\n                type: this.m_type,\n                bodyA: this.m_bodyA,\n                bodyB: this.m_bodyB,\n                collideConnected: this.m_collideConnected,\n                maxForce: this.m_maxForce,\n                maxTorque: this.m_maxTorque,\n                localAnchorA: this.m_localAnchorA,\n                localAnchorB: this.m_localAnchorB,\n            };\n        };\n        /** @internal */\n        FrictionJoint._deserialize = function (data, world, restore) {\n            data = __assign({}, data);\n            data.bodyA = restore(Body, data.bodyA, world);\n            data.bodyB = restore(Body, data.bodyB, world);\n            var joint = new FrictionJoint(data);\n            return joint;\n        };\n        /** @internal */\n        FrictionJoint.prototype._setAnchors = function (def) {\n            if (def.anchorA) {\n                this.m_localAnchorA.setVec2(this.m_bodyA.getLocalPoint(def.anchorA));\n            }\n            else if (def.localAnchorA) {\n                this.m_localAnchorA.setVec2(def.localAnchorA);\n            }\n            if (def.anchorB) {\n                this.m_localAnchorB.setVec2(this.m_bodyB.getLocalPoint(def.anchorB));\n            }\n            else if (def.localAnchorB) {\n                this.m_localAnchorB.setVec2(def.localAnchorB);\n            }\n        };\n        /**\n         * The local anchor point relative to bodyA's origin.\n         */\n        FrictionJoint.prototype.getLocalAnchorA = function () {\n            return this.m_localAnchorA;\n        };\n        /**\n         * The local anchor point relative to bodyB's origin.\n         */\n        FrictionJoint.prototype.getLocalAnchorB = function () {\n            return this.m_localAnchorB;\n        };\n        /**\n         * Set the maximum friction force in N.\n         */\n        FrictionJoint.prototype.setMaxForce = function (force) {\n            this.m_maxForce = force;\n        };\n        /**\n         * Get the maximum friction force in N.\n         */\n        FrictionJoint.prototype.getMaxForce = function () {\n            return this.m_maxForce;\n        };\n        /**\n         * Set the maximum friction torque in N*m.\n         */\n        FrictionJoint.prototype.setMaxTorque = function (torque) {\n            this.m_maxTorque = torque;\n        };\n        /**\n         * Get the maximum friction torque in N*m.\n         */\n        FrictionJoint.prototype.getMaxTorque = function () {\n            return this.m_maxTorque;\n        };\n        /**\n         * Get the anchor point on bodyA in world coordinates.\n         */\n        FrictionJoint.prototype.getAnchorA = function () {\n            return this.m_bodyA.getWorldPoint(this.m_localAnchorA);\n        };\n        /**\n         * Get the anchor point on bodyB in world coordinates.\n         */\n        FrictionJoint.prototype.getAnchorB = function () {\n            return this.m_bodyB.getWorldPoint(this.m_localAnchorB);\n        };\n        /**\n         * Get the reaction force on bodyB at the joint anchor in Newtons.\n         */\n        FrictionJoint.prototype.getReactionForce = function (inv_dt) {\n            return Vec2.mulNumVec2(inv_dt, this.m_linearImpulse);\n        };\n        /**\n         * Get the reaction torque on bodyB in N*m.\n         */\n        FrictionJoint.prototype.getReactionTorque = function (inv_dt) {\n            return inv_dt * this.m_angularImpulse;\n        };\n        FrictionJoint.prototype.initVelocityConstraints = function (step) {\n            this.m_localCenterA = this.m_bodyA.m_sweep.localCenter;\n            this.m_localCenterB = this.m_bodyB.m_sweep.localCenter;\n            this.m_invMassA = this.m_bodyA.m_invMass;\n            this.m_invMassB = this.m_bodyB.m_invMass;\n            this.m_invIA = this.m_bodyA.m_invI;\n            this.m_invIB = this.m_bodyB.m_invI;\n            var aA = this.m_bodyA.c_position.a;\n            var vA = this.m_bodyA.c_velocity.v;\n            var wA = this.m_bodyA.c_velocity.w;\n            var aB = this.m_bodyB.c_position.a;\n            var vB = this.m_bodyB.c_velocity.v;\n            var wB = this.m_bodyB.c_velocity.w;\n            var qA = Rot.neo(aA);\n            var qB = Rot.neo(aB);\n            // Compute the effective mass matrix.\n            this.m_rA = Rot.mulVec2(qA, Vec2.sub(this.m_localAnchorA, this.m_localCenterA));\n            this.m_rB = Rot.mulVec2(qB, Vec2.sub(this.m_localAnchorB, this.m_localCenterB));\n            // J = [-I -r1_skew I r2_skew]\n            // [ 0 -1 0 1]\n            // r_skew = [-ry; rx]\n            // Matlab\n            // K = [ mA+r1y^2*iA+mB+r2y^2*iB, -r1y*iA*r1x-r2y*iB*r2x, -r1y*iA-r2y*iB]\n            // [ -r1y*iA*r1x-r2y*iB*r2x, mA+r1x^2*iA+mB+r2x^2*iB, r1x*iA+r2x*iB]\n            // [ -r1y*iA-r2y*iB, r1x*iA+r2x*iB, iA+iB]\n            var mA = this.m_invMassA;\n            var mB = this.m_invMassB;\n            var iA = this.m_invIA;\n            var iB = this.m_invIB;\n            var K = new Mat22();\n            K.ex.x = mA + mB + iA * this.m_rA.y * this.m_rA.y + iB * this.m_rB.y\n                * this.m_rB.y;\n            K.ex.y = -iA * this.m_rA.x * this.m_rA.y - iB * this.m_rB.x * this.m_rB.y;\n            K.ey.x = K.ex.y;\n            K.ey.y = mA + mB + iA * this.m_rA.x * this.m_rA.x + iB * this.m_rB.x\n                * this.m_rB.x;\n            this.m_linearMass = K.getInverse();\n            this.m_angularMass = iA + iB;\n            if (this.m_angularMass > 0.0) {\n                this.m_angularMass = 1.0 / this.m_angularMass;\n            }\n            if (step.warmStarting) {\n                // Scale impulses to support a variable time step.\n                this.m_linearImpulse.mul(step.dtRatio);\n                this.m_angularImpulse *= step.dtRatio;\n                var P = Vec2.neo(this.m_linearImpulse.x, this.m_linearImpulse.y);\n                vA.subMul(mA, P);\n                wA -= iA * (Vec2.crossVec2Vec2(this.m_rA, P) + this.m_angularImpulse);\n                vB.addMul(mB, P);\n                wB += iB * (Vec2.crossVec2Vec2(this.m_rB, P) + this.m_angularImpulse);\n            }\n            else {\n                this.m_linearImpulse.setZero();\n                this.m_angularImpulse = 0.0;\n            }\n            this.m_bodyA.c_velocity.v = vA;\n            this.m_bodyA.c_velocity.w = wA;\n            this.m_bodyB.c_velocity.v = vB;\n            this.m_bodyB.c_velocity.w = wB;\n        };\n        FrictionJoint.prototype.solveVelocityConstraints = function (step) {\n            var vA = this.m_bodyA.c_velocity.v;\n            var wA = this.m_bodyA.c_velocity.w;\n            var vB = this.m_bodyB.c_velocity.v;\n            var wB = this.m_bodyB.c_velocity.w;\n            var mA = this.m_invMassA;\n            var mB = this.m_invMassB;\n            var iA = this.m_invIA;\n            var iB = this.m_invIB;\n            var h = step.dt; // float\n            // Solve angular friction\n            {\n                var Cdot = wB - wA; // float\n                var impulse = -this.m_angularMass * Cdot; // float\n                var oldImpulse = this.m_angularImpulse; // float\n                var maxImpulse = h * this.m_maxTorque; // float\n                this.m_angularImpulse = math$1.clamp(this.m_angularImpulse + impulse, -maxImpulse, maxImpulse);\n                impulse = this.m_angularImpulse - oldImpulse;\n                wA -= iA * impulse;\n                wB += iB * impulse;\n            }\n            // Solve linear friction\n            {\n                var Cdot = Vec2.sub(Vec2.add(vB, Vec2.crossNumVec2(wB, this.m_rB)), Vec2.add(vA, Vec2.crossNumVec2(wA, this.m_rA))); // Vec2\n                var impulse = Vec2.neg(Mat22.mulVec2(this.m_linearMass, Cdot)); // Vec2\n                var oldImpulse = this.m_linearImpulse; // Vec2\n                this.m_linearImpulse.add(impulse);\n                var maxImpulse = h * this.m_maxForce; // float\n                if (this.m_linearImpulse.lengthSquared() > maxImpulse * maxImpulse) {\n                    this.m_linearImpulse.normalize();\n                    this.m_linearImpulse.mul(maxImpulse);\n                }\n                impulse = Vec2.sub(this.m_linearImpulse, oldImpulse);\n                vA.subMul(mA, impulse);\n                wA -= iA * Vec2.crossVec2Vec2(this.m_rA, impulse);\n                vB.addMul(mB, impulse);\n                wB += iB * Vec2.crossVec2Vec2(this.m_rB, impulse);\n            }\n            this.m_bodyA.c_velocity.v = vA;\n            this.m_bodyA.c_velocity.w = wA;\n            this.m_bodyB.c_velocity.v = vB;\n            this.m_bodyB.c_velocity.w = wB;\n        };\n        /**\n         * This returns true if the position errors are within tolerance.\n         */\n        FrictionJoint.prototype.solvePositionConstraints = function (step) {\n            return true;\n        };\n        FrictionJoint.TYPE = 'friction-joint';\n        return FrictionJoint;\n    }(Joint));\n\n    /*\n     * Planck.js\n     * The MIT License\n     * Copyright (c) 2021 Erin Catto, Ali Shakiba\n     *\n     * Permission is hereby granted, free of charge, to any person obtaining a copy\n     * of this software and associated documentation files (the \"Software\"), to deal\n     * in the Software without restriction, including without limitation the rights\n     * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n     * copies of the Software, and to permit persons to whom the Software is\n     * furnished to do so, subject to the following conditions:\n     *\n     * The above copyright notice and this permission notice shall be included in all\n     * copies or substantial portions of the Software.\n     *\n     * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n     * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n     * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n     * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n     * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n     * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n     * SOFTWARE.\n     */\n    /**\n     * A 3-by-3 matrix. Stored in column-major order.\n     */\n    var Mat33 = /** @class */ (function () {\n        function Mat33(a, b, c) {\n            if (typeof a === 'object' && a !== null) {\n                this.ex = Vec3.clone(a);\n                this.ey = Vec3.clone(b);\n                this.ez = Vec3.clone(c);\n            }\n            else {\n                this.ex = Vec3.zero();\n                this.ey = Vec3.zero();\n                this.ez = Vec3.zero();\n            }\n        }\n        /** @internal */\n        Mat33.prototype.toString = function () {\n            return JSON.stringify(this);\n        };\n        Mat33.isValid = function (obj) {\n            if (obj === null || typeof obj === 'undefined') {\n                return false;\n            }\n            return Vec3.isValid(obj.ex) && Vec3.isValid(obj.ey) && Vec3.isValid(obj.ez);\n        };\n        Mat33.assert = function (o) {\n            return;\n        };\n        /**\n         * Set this matrix to all zeros.\n         */\n        Mat33.prototype.setZero = function () {\n            this.ex.setZero();\n            this.ey.setZero();\n            this.ez.setZero();\n            return this;\n        };\n        /**\n         * Solve A * x = b, where b is a column vector. This is more efficient than\n         * computing the inverse in one-shot cases.\n         */\n        Mat33.prototype.solve33 = function (v) {\n            var det = Vec3.dot(this.ex, Vec3.cross(this.ey, this.ez));\n            if (det !== 0.0) {\n                det = 1.0 / det;\n            }\n            var r = new Vec3();\n            r.x = det * Vec3.dot(v, Vec3.cross(this.ey, this.ez));\n            r.y = det * Vec3.dot(this.ex, Vec3.cross(v, this.ez));\n            r.z = det * Vec3.dot(this.ex, Vec3.cross(this.ey, v));\n            return r;\n        };\n        /**\n         * Solve A * x = b, where b is a column vector. This is more efficient than\n         * computing the inverse in one-shot cases. Solve only the upper 2-by-2 matrix\n         * equation.\n         */\n        Mat33.prototype.solve22 = function (v) {\n            var a11 = this.ex.x;\n            var a12 = this.ey.x;\n            var a21 = this.ex.y;\n            var a22 = this.ey.y;\n            var det = a11 * a22 - a12 * a21;\n            if (det !== 0.0) {\n                det = 1.0 / det;\n            }\n            var r = Vec2.zero();\n            r.x = det * (a22 * v.x - a12 * v.y);\n            r.y = det * (a11 * v.y - a21 * v.x);\n            return r;\n        };\n        /**\n         * Get the inverse of this matrix as a 2-by-2. Returns the zero matrix if\n         * singular.\n         */\n        Mat33.prototype.getInverse22 = function (M) {\n            var a = this.ex.x;\n            var b = this.ey.x;\n            var c = this.ex.y;\n            var d = this.ey.y;\n            var det = a * d - b * c;\n            if (det !== 0.0) {\n                det = 1.0 / det;\n            }\n            M.ex.x = det * d;\n            M.ey.x = -det * b;\n            M.ex.z = 0.0;\n            M.ex.y = -det * c;\n            M.ey.y = det * a;\n            M.ey.z = 0.0;\n            M.ez.x = 0.0;\n            M.ez.y = 0.0;\n            M.ez.z = 0.0;\n        };\n        /**\n         * Get the symmetric inverse of this matrix as a 3-by-3. Returns the zero matrix\n         * if singular.\n         */\n        Mat33.prototype.getSymInverse33 = function (M) {\n            var det = Vec3.dot(this.ex, Vec3.cross(this.ey, this.ez));\n            if (det !== 0.0) {\n                det = 1.0 / det;\n            }\n            var a11 = this.ex.x;\n            var a12 = this.ey.x;\n            var a13 = this.ez.x;\n            var a22 = this.ey.y;\n            var a23 = this.ez.y;\n            var a33 = this.ez.z;\n            M.ex.x = det * (a22 * a33 - a23 * a23);\n            M.ex.y = det * (a13 * a23 - a12 * a33);\n            M.ex.z = det * (a12 * a23 - a13 * a22);\n            M.ey.x = M.ex.y;\n            M.ey.y = det * (a11 * a33 - a13 * a13);\n            M.ey.z = det * (a13 * a12 - a11 * a23);\n            M.ez.x = M.ex.z;\n            M.ez.y = M.ey.z;\n            M.ez.z = det * (a11 * a22 - a12 * a12);\n        };\n        // tslint:disable-next-line:typedef\n        Mat33.mul = function (a, b) {\n            if (b && 'z' in b && 'y' in b && 'x' in b) {\n                var x = a.ex.x * b.x + a.ey.x * b.y + a.ez.x * b.z;\n                var y = a.ex.y * b.x + a.ey.y * b.y + a.ez.y * b.z;\n                var z = a.ex.z * b.x + a.ey.z * b.y + a.ez.z * b.z;\n                return new Vec3(x, y, z);\n            }\n            else if (b && 'y' in b && 'x' in b) {\n                var x = a.ex.x * b.x + a.ey.x * b.y;\n                var y = a.ex.y * b.x + a.ey.y * b.y;\n                return Vec2.neo(x, y);\n            }\n        };\n        Mat33.mulVec3 = function (a, b) {\n            var x = a.ex.x * b.x + a.ey.x * b.y + a.ez.x * b.z;\n            var y = a.ex.y * b.x + a.ey.y * b.y + a.ez.y * b.z;\n            var z = a.ex.z * b.x + a.ey.z * b.y + a.ez.z * b.z;\n            return new Vec3(x, y, z);\n        };\n        Mat33.mulVec2 = function (a, b) {\n            var x = a.ex.x * b.x + a.ey.x * b.y;\n            var y = a.ex.y * b.x + a.ey.y * b.y;\n            return Vec2.neo(x, y);\n        };\n        Mat33.add = function (a, b) {\n            return new Mat33(Vec3.add(a.ex, b.ex), Vec3.add(a.ey, b.ey), Vec3.add(a.ez, b.ez));\n        };\n        return Mat33;\n    }());\n\n    /*\n     * Planck.js\n     * The MIT License\n     * Copyright (c) 2021 Erin Catto, Ali Shakiba\n     *\n     * Permission is hereby granted, free of charge, to any person obtaining a copy\n     * of this software and associated documentation files (the \"Software\"), to deal\n     * in the Software without restriction, including without limitation the rights\n     * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n     * copies of the Software, and to permit persons to whom the Software is\n     * furnished to do so, subject to the following conditions:\n     *\n     * The above copyright notice and this permission notice shall be included in all\n     * copies or substantial portions of the Software.\n     *\n     * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n     * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n     * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n     * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n     * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n     * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n     * SOFTWARE.\n     */\n    var inactiveLimit$2 = 0;\n    var atLowerLimit$1 = 1;\n    var atUpperLimit$2 = 2;\n    var equalLimits$1 = 3;\n    var DEFAULTS$8 = {\n        lowerAngle: 0.0,\n        upperAngle: 0.0,\n        maxMotorTorque: 0.0,\n        motorSpeed: 0.0,\n        enableLimit: false,\n        enableMotor: false\n    };\n    /**\n     * A revolute joint constrains two bodies to share a common point while they are\n     * free to rotate about the point. The relative rotation about the shared point\n     * is the joint angle. You can limit the relative rotation with a joint limit\n     * that specifies a lower and upper angle. You can use a motor to drive the\n     * relative rotation about the shared point. A maximum motor torque is provided\n     * so that infinite forces are not generated.\n     */\n    var RevoluteJoint = /** @class */ (function (_super) {\n        __extends(RevoluteJoint, _super);\n        // @ts-ignore\n        function RevoluteJoint(def, bodyA, bodyB, anchor) {\n            var _this = this;\n            // @ts-ignore\n            if (!(_this instanceof RevoluteJoint)) {\n                return new RevoluteJoint(def, bodyA, bodyB, anchor);\n            }\n            def = options(def, DEFAULTS$8);\n            _this = _super.call(this, def, bodyA, bodyB) || this;\n            // effective mass for point-to-point constraint.\n            /** @internal */ _this.m_mass = new Mat33();\n            /** @internal */ _this.m_limitState = inactiveLimit$2; // TODO enum\n            bodyA = _this.m_bodyA;\n            bodyB = _this.m_bodyB;\n            _this.m_type = RevoluteJoint.TYPE;\n            _this.m_localAnchorA = Vec2.clone(anchor ? bodyA.getLocalPoint(anchor) : def.localAnchorA || Vec2.zero());\n            _this.m_localAnchorB = Vec2.clone(anchor ? bodyB.getLocalPoint(anchor) : def.localAnchorB || Vec2.zero());\n            _this.m_referenceAngle = math$1.isFinite(def.referenceAngle) ? def.referenceAngle : bodyB.getAngle() - bodyA.getAngle();\n            _this.m_impulse = new Vec3();\n            _this.m_motorImpulse = 0.0;\n            _this.m_lowerAngle = def.lowerAngle;\n            _this.m_upperAngle = def.upperAngle;\n            _this.m_maxMotorTorque = def.maxMotorTorque;\n            _this.m_motorSpeed = def.motorSpeed;\n            _this.m_enableLimit = def.enableLimit;\n            _this.m_enableMotor = def.enableMotor;\n            return _this;\n            // Point-to-point constraint\n            // C = p2 - p1\n            // Cdot = v2 - v1\n            // = v2 + cross(w2, r2) - v1 - cross(w1, r1)\n            // J = [-I -r1_skew I r2_skew ]\n            // Identity used:\n            // w k % (rx i + ry j) = w * (-ry i + rx j)\n            // Motor constraint\n            // Cdot = w2 - w1\n            // J = [0 0 -1 0 0 1]\n            // K = invI1 + invI2\n        }\n        /** @internal */\n        RevoluteJoint.prototype._serialize = function () {\n            return {\n                type: this.m_type,\n                bodyA: this.m_bodyA,\n                bodyB: this.m_bodyB,\n                collideConnected: this.m_collideConnected,\n                lowerAngle: this.m_lowerAngle,\n                upperAngle: this.m_upperAngle,\n                maxMotorTorque: this.m_maxMotorTorque,\n                motorSpeed: this.m_motorSpeed,\n                enableLimit: this.m_enableLimit,\n                enableMotor: this.m_enableMotor,\n                localAnchorA: this.m_localAnchorA,\n                localAnchorB: this.m_localAnchorB,\n                referenceAngle: this.m_referenceAngle,\n            };\n        };\n        /** @internal */\n        RevoluteJoint._deserialize = function (data, world, restore) {\n            data = __assign({}, data);\n            data.bodyA = restore(Body, data.bodyA, world);\n            data.bodyB = restore(Body, data.bodyB, world);\n            var joint = new RevoluteJoint(data);\n            return joint;\n        };\n        /** @internal */\n        RevoluteJoint.prototype._setAnchors = function (def) {\n            if (def.anchorA) {\n                this.m_localAnchorA.setVec2(this.m_bodyA.getLocalPoint(def.anchorA));\n            }\n            else if (def.localAnchorA) {\n                this.m_localAnchorA.setVec2(def.localAnchorA);\n            }\n            if (def.anchorB) {\n                this.m_localAnchorB.setVec2(this.m_bodyB.getLocalPoint(def.anchorB));\n            }\n            else if (def.localAnchorB) {\n                this.m_localAnchorB.setVec2(def.localAnchorB);\n            }\n        };\n        /**\n         * The local anchor point relative to bodyA's origin.\n         */\n        RevoluteJoint.prototype.getLocalAnchorA = function () {\n            return this.m_localAnchorA;\n        };\n        /**\n         * The local anchor point relative to bodyB's origin.\n         */\n        RevoluteJoint.prototype.getLocalAnchorB = function () {\n            return this.m_localAnchorB;\n        };\n        /**\n         * Get the reference angle.\n         */\n        RevoluteJoint.prototype.getReferenceAngle = function () {\n            return this.m_referenceAngle;\n        };\n        /**\n         * Get the current joint angle in radians.\n         */\n        RevoluteJoint.prototype.getJointAngle = function () {\n            var bA = this.m_bodyA;\n            var bB = this.m_bodyB;\n            return bB.m_sweep.a - bA.m_sweep.a - this.m_referenceAngle;\n        };\n        /**\n         * Get the current joint angle speed in radians per second.\n         */\n        RevoluteJoint.prototype.getJointSpeed = function () {\n            var bA = this.m_bodyA;\n            var bB = this.m_bodyB;\n            return bB.m_angularVelocity - bA.m_angularVelocity;\n        };\n        /**\n         * Is the joint motor enabled?\n         */\n        RevoluteJoint.prototype.isMotorEnabled = function () {\n            return this.m_enableMotor;\n        };\n        /**\n         * Enable/disable the joint motor.\n         */\n        RevoluteJoint.prototype.enableMotor = function (flag) {\n            this.m_bodyA.setAwake(true);\n            this.m_bodyB.setAwake(true);\n            this.m_enableMotor = flag;\n        };\n        /**\n         * Get the current motor torque given the inverse time step. Unit is N*m.\n         */\n        RevoluteJoint.prototype.getMotorTorque = function (inv_dt) {\n            return inv_dt * this.m_motorImpulse;\n        };\n        /**\n         * Set the motor speed in radians per second.\n         */\n        RevoluteJoint.prototype.setMotorSpeed = function (speed) {\n            this.m_bodyA.setAwake(true);\n            this.m_bodyB.setAwake(true);\n            this.m_motorSpeed = speed;\n        };\n        /**\n         * Get the motor speed in radians per second.\n         */\n        RevoluteJoint.prototype.getMotorSpeed = function () {\n            return this.m_motorSpeed;\n        };\n        /**\n         * Set the maximum motor torque, usually in N-m.\n         */\n        RevoluteJoint.prototype.setMaxMotorTorque = function (torque) {\n            this.m_bodyA.setAwake(true);\n            this.m_bodyB.setAwake(true);\n            this.m_maxMotorTorque = torque;\n        };\n        RevoluteJoint.prototype.getMaxMotorTorque = function () {\n            return this.m_maxMotorTorque;\n        };\n        /**\n         * Is the joint limit enabled?\n         */\n        RevoluteJoint.prototype.isLimitEnabled = function () {\n            return this.m_enableLimit;\n        };\n        /**\n         * Enable/disable the joint limit.\n         */\n        RevoluteJoint.prototype.enableLimit = function (flag) {\n            if (flag != this.m_enableLimit) {\n                this.m_bodyA.setAwake(true);\n                this.m_bodyB.setAwake(true);\n                this.m_enableLimit = flag;\n                this.m_impulse.z = 0.0;\n            }\n        };\n        /**\n         * Get the lower joint limit in radians.\n         */\n        RevoluteJoint.prototype.getLowerLimit = function () {\n            return this.m_lowerAngle;\n        };\n        /**\n         * Get the upper joint limit in radians.\n         */\n        RevoluteJoint.prototype.getUpperLimit = function () {\n            return this.m_upperAngle;\n        };\n        /**\n         * Set the joint limits in radians.\n         */\n        RevoluteJoint.prototype.setLimits = function (lower, upper) {\n            if (lower != this.m_lowerAngle || upper != this.m_upperAngle) {\n                this.m_bodyA.setAwake(true);\n                this.m_bodyB.setAwake(true);\n                this.m_impulse.z = 0.0;\n                this.m_lowerAngle = lower;\n                this.m_upperAngle = upper;\n            }\n        };\n        /**\n         * Get the anchor point on bodyA in world coordinates.\n         */\n        RevoluteJoint.prototype.getAnchorA = function () {\n            return this.m_bodyA.getWorldPoint(this.m_localAnchorA);\n        };\n        /**\n         * Get the anchor point on bodyB in world coordinates.\n         */\n        RevoluteJoint.prototype.getAnchorB = function () {\n            return this.m_bodyB.getWorldPoint(this.m_localAnchorB);\n        };\n        /**\n         * Get the reaction force given the inverse time step. Unit is N.\n         */\n        RevoluteJoint.prototype.getReactionForce = function (inv_dt) {\n            return Vec2.neo(this.m_impulse.x, this.m_impulse.y).mul(inv_dt);\n        };\n        /**\n         * Get the reaction torque due to the joint limit given the inverse time step.\n         * Unit is N*m.\n         */\n        RevoluteJoint.prototype.getReactionTorque = function (inv_dt) {\n            return inv_dt * this.m_impulse.z;\n        };\n        RevoluteJoint.prototype.initVelocityConstraints = function (step) {\n            this.m_localCenterA = this.m_bodyA.m_sweep.localCenter;\n            this.m_localCenterB = this.m_bodyB.m_sweep.localCenter;\n            this.m_invMassA = this.m_bodyA.m_invMass;\n            this.m_invMassB = this.m_bodyB.m_invMass;\n            this.m_invIA = this.m_bodyA.m_invI;\n            this.m_invIB = this.m_bodyB.m_invI;\n            var aA = this.m_bodyA.c_position.a;\n            var vA = this.m_bodyA.c_velocity.v;\n            var wA = this.m_bodyA.c_velocity.w;\n            var aB = this.m_bodyB.c_position.a;\n            var vB = this.m_bodyB.c_velocity.v;\n            var wB = this.m_bodyB.c_velocity.w;\n            var qA = Rot.neo(aA);\n            var qB = Rot.neo(aB);\n            this.m_rA = Rot.mulVec2(qA, Vec2.sub(this.m_localAnchorA, this.m_localCenterA));\n            this.m_rB = Rot.mulVec2(qB, Vec2.sub(this.m_localAnchorB, this.m_localCenterB));\n            // J = [-I -r1_skew I r2_skew]\n            // [ 0 -1 0 1]\n            // r_skew = [-ry; rx]\n            // Matlab\n            // K = [ mA+r1y^2*iA+mB+r2y^2*iB, -r1y*iA*r1x-r2y*iB*r2x, -r1y*iA-r2y*iB]\n            // [ -r1y*iA*r1x-r2y*iB*r2x, mA+r1x^2*iA+mB+r2x^2*iB, r1x*iA+r2x*iB]\n            // [ -r1y*iA-r2y*iB, r1x*iA+r2x*iB, iA+iB]\n            var mA = this.m_invMassA;\n            var mB = this.m_invMassB; // float\n            var iA = this.m_invIA;\n            var iB = this.m_invIB; // float\n            var fixedRotation = (iA + iB === 0.0); // bool\n            this.m_mass.ex.x = mA + mB + this.m_rA.y * this.m_rA.y * iA + this.m_rB.y\n                * this.m_rB.y * iB;\n            this.m_mass.ey.x = -this.m_rA.y * this.m_rA.x * iA - this.m_rB.y\n                * this.m_rB.x * iB;\n            this.m_mass.ez.x = -this.m_rA.y * iA - this.m_rB.y * iB;\n            this.m_mass.ex.y = this.m_mass.ey.x;\n            this.m_mass.ey.y = mA + mB + this.m_rA.x * this.m_rA.x * iA + this.m_rB.x\n                * this.m_rB.x * iB;\n            this.m_mass.ez.y = this.m_rA.x * iA + this.m_rB.x * iB;\n            this.m_mass.ex.z = this.m_mass.ez.x;\n            this.m_mass.ey.z = this.m_mass.ez.y;\n            this.m_mass.ez.z = iA + iB;\n            this.m_motorMass = iA + iB;\n            if (this.m_motorMass > 0.0) {\n                this.m_motorMass = 1.0 / this.m_motorMass;\n            }\n            if (this.m_enableMotor == false || fixedRotation) {\n                this.m_motorImpulse = 0.0;\n            }\n            if (this.m_enableLimit && fixedRotation == false) {\n                var jointAngle = aB - aA - this.m_referenceAngle; // float\n                if (math$1.abs(this.m_upperAngle - this.m_lowerAngle) < 2.0 * Settings.angularSlop) {\n                    this.m_limitState = equalLimits$1;\n                }\n                else if (jointAngle <= this.m_lowerAngle) {\n                    if (this.m_limitState != atLowerLimit$1) {\n                        this.m_impulse.z = 0.0;\n                    }\n                    this.m_limitState = atLowerLimit$1;\n                }\n                else if (jointAngle >= this.m_upperAngle) {\n                    if (this.m_limitState != atUpperLimit$2) {\n                        this.m_impulse.z = 0.0;\n                    }\n                    this.m_limitState = atUpperLimit$2;\n                }\n                else {\n                    this.m_limitState = inactiveLimit$2;\n                    this.m_impulse.z = 0.0;\n                }\n            }\n            else {\n                this.m_limitState = inactiveLimit$2;\n            }\n            if (step.warmStarting) {\n                // Scale impulses to support a variable time step.\n                this.m_impulse.mul(step.dtRatio);\n                this.m_motorImpulse *= step.dtRatio;\n                var P = Vec2.neo(this.m_impulse.x, this.m_impulse.y);\n                vA.subMul(mA, P);\n                wA -= iA * (Vec2.crossVec2Vec2(this.m_rA, P) + this.m_motorImpulse + this.m_impulse.z);\n                vB.addMul(mB, P);\n                wB += iB * (Vec2.crossVec2Vec2(this.m_rB, P) + this.m_motorImpulse + this.m_impulse.z);\n            }\n            else {\n                this.m_impulse.setZero();\n                this.m_motorImpulse = 0.0;\n            }\n            this.m_bodyA.c_velocity.v = vA;\n            this.m_bodyA.c_velocity.w = wA;\n            this.m_bodyB.c_velocity.v = vB;\n            this.m_bodyB.c_velocity.w = wB;\n        };\n        RevoluteJoint.prototype.solveVelocityConstraints = function (step) {\n            var vA = this.m_bodyA.c_velocity.v;\n            var wA = this.m_bodyA.c_velocity.w;\n            var vB = this.m_bodyB.c_velocity.v;\n            var wB = this.m_bodyB.c_velocity.w;\n            var mA = this.m_invMassA;\n            var mB = this.m_invMassB; // float\n            var iA = this.m_invIA;\n            var iB = this.m_invIB; // float\n            var fixedRotation = (iA + iB === 0.0); // bool\n            // Solve motor constraint.\n            if (this.m_enableMotor && this.m_limitState != equalLimits$1\n                && fixedRotation == false) {\n                var Cdot = wB - wA - this.m_motorSpeed; // float\n                var impulse = -this.m_motorMass * Cdot; // float\n                var oldImpulse = this.m_motorImpulse; // float\n                var maxImpulse = step.dt * this.m_maxMotorTorque; // float\n                this.m_motorImpulse = math$1.clamp(this.m_motorImpulse + impulse, -maxImpulse, maxImpulse);\n                impulse = this.m_motorImpulse - oldImpulse;\n                wA -= iA * impulse;\n                wB += iB * impulse;\n            }\n            // Solve limit constraint.\n            if (this.m_enableLimit && this.m_limitState != inactiveLimit$2\n                && fixedRotation == false) {\n                var Cdot1 = Vec2.zero();\n                Cdot1.addCombine(1, vB, 1, Vec2.crossNumVec2(wB, this.m_rB));\n                Cdot1.subCombine(1, vA, 1, Vec2.crossNumVec2(wA, this.m_rA));\n                var Cdot2 = wB - wA; // float\n                var Cdot = new Vec3(Cdot1.x, Cdot1.y, Cdot2);\n                var impulse = Vec3.neg(this.m_mass.solve33(Cdot)); // Vec3\n                if (this.m_limitState == equalLimits$1) {\n                    this.m_impulse.add(impulse);\n                }\n                else if (this.m_limitState == atLowerLimit$1) {\n                    var newImpulse = this.m_impulse.z + impulse.z; // float\n                    if (newImpulse < 0.0) {\n                        var rhs = Vec2.combine(-1, Cdot1, this.m_impulse.z, Vec2.neo(this.m_mass.ez.x, this.m_mass.ez.y)); // Vec2\n                        var reduced = this.m_mass.solve22(rhs); // Vec2\n                        impulse.x = reduced.x;\n                        impulse.y = reduced.y;\n                        impulse.z = -this.m_impulse.z;\n                        this.m_impulse.x += reduced.x;\n                        this.m_impulse.y += reduced.y;\n                        this.m_impulse.z = 0.0;\n                    }\n                    else {\n                        this.m_impulse.add(impulse);\n                    }\n                }\n                else if (this.m_limitState == atUpperLimit$2) {\n                    var newImpulse = this.m_impulse.z + impulse.z; // float\n                    if (newImpulse > 0.0) {\n                        var rhs = Vec2.combine(-1, Cdot1, this.m_impulse.z, Vec2.neo(this.m_mass.ez.x, this.m_mass.ez.y)); // Vec2\n                        var reduced = this.m_mass.solve22(rhs); // Vec2\n                        impulse.x = reduced.x;\n                        impulse.y = reduced.y;\n                        impulse.z = -this.m_impulse.z;\n                        this.m_impulse.x += reduced.x;\n                        this.m_impulse.y += reduced.y;\n                        this.m_impulse.z = 0.0;\n                    }\n                    else {\n                        this.m_impulse.add(impulse);\n                    }\n                }\n                var P = Vec2.neo(impulse.x, impulse.y);\n                vA.subMul(mA, P);\n                wA -= iA * (Vec2.crossVec2Vec2(this.m_rA, P) + impulse.z);\n                vB.addMul(mB, P);\n                wB += iB * (Vec2.crossVec2Vec2(this.m_rB, P) + impulse.z);\n            }\n            else {\n                // Solve point-to-point constraint\n                var Cdot = Vec2.zero();\n                Cdot.addCombine(1, vB, 1, Vec2.crossNumVec2(wB, this.m_rB));\n                Cdot.subCombine(1, vA, 1, Vec2.crossNumVec2(wA, this.m_rA));\n                var impulse = this.m_mass.solve22(Vec2.neg(Cdot)); // Vec2\n                this.m_impulse.x += impulse.x;\n                this.m_impulse.y += impulse.y;\n                vA.subMul(mA, impulse);\n                wA -= iA * Vec2.crossVec2Vec2(this.m_rA, impulse);\n                vB.addMul(mB, impulse);\n                wB += iB * Vec2.crossVec2Vec2(this.m_rB, impulse);\n            }\n            this.m_bodyA.c_velocity.v = vA;\n            this.m_bodyA.c_velocity.w = wA;\n            this.m_bodyB.c_velocity.v = vB;\n            this.m_bodyB.c_velocity.w = wB;\n        };\n        /**\n         * This returns true if the position errors are within tolerance.\n         */\n        RevoluteJoint.prototype.solvePositionConstraints = function (step) {\n            var cA = this.m_bodyA.c_position.c;\n            var aA = this.m_bodyA.c_position.a;\n            var cB = this.m_bodyB.c_position.c;\n            var aB = this.m_bodyB.c_position.a;\n            var qA = Rot.neo(aA);\n            var qB = Rot.neo(aB);\n            var angularError = 0.0; // float\n            var positionError = 0.0; // float\n            var fixedRotation = (this.m_invIA + this.m_invIB == 0.0); // bool\n            // Solve angular limit constraint.\n            if (this.m_enableLimit && this.m_limitState != inactiveLimit$2\n                && fixedRotation == false) {\n                var angle = aB - aA - this.m_referenceAngle; // float\n                var limitImpulse = 0.0; // float\n                if (this.m_limitState == equalLimits$1) {\n                    // Prevent large angular corrections\n                    var C = math$1.clamp(angle - this.m_lowerAngle, -Settings.maxAngularCorrection, Settings.maxAngularCorrection); // float\n                    limitImpulse = -this.m_motorMass * C;\n                    angularError = math$1.abs(C);\n                }\n                else if (this.m_limitState == atLowerLimit$1) {\n                    var C = angle - this.m_lowerAngle; // float\n                    angularError = -C;\n                    // Prevent large angular corrections and allow some slop.\n                    C = math$1.clamp(C + Settings.angularSlop, -Settings.maxAngularCorrection, 0.0);\n                    limitImpulse = -this.m_motorMass * C;\n                }\n                else if (this.m_limitState == atUpperLimit$2) {\n                    var C = angle - this.m_upperAngle; // float\n                    angularError = C;\n                    // Prevent large angular corrections and allow some slop.\n                    C = math$1.clamp(C - Settings.angularSlop, 0.0, Settings.maxAngularCorrection);\n                    limitImpulse = -this.m_motorMass * C;\n                }\n                aA -= this.m_invIA * limitImpulse;\n                aB += this.m_invIB * limitImpulse;\n            }\n            // Solve point-to-point constraint.\n            {\n                qA.setAngle(aA);\n                qB.setAngle(aB);\n                var rA = Rot.mulVec2(qA, Vec2.sub(this.m_localAnchorA, this.m_localCenterA)); // Vec2\n                var rB = Rot.mulVec2(qB, Vec2.sub(this.m_localAnchorB, this.m_localCenterB)); // Vec2\n                var C = Vec2.zero();\n                C.addCombine(1, cB, 1, rB);\n                C.subCombine(1, cA, 1, rA);\n                positionError = C.length();\n                var mA = this.m_invMassA;\n                var mB = this.m_invMassB; // float\n                var iA = this.m_invIA;\n                var iB = this.m_invIB; // float\n                var K = new Mat22();\n                K.ex.x = mA + mB + iA * rA.y * rA.y + iB * rB.y * rB.y;\n                K.ex.y = -iA * rA.x * rA.y - iB * rB.x * rB.y;\n                K.ey.x = K.ex.y;\n                K.ey.y = mA + mB + iA * rA.x * rA.x + iB * rB.x * rB.x;\n                var impulse = Vec2.neg(K.solve(C)); // Vec2\n                cA.subMul(mA, impulse);\n                aA -= iA * Vec2.crossVec2Vec2(rA, impulse);\n                cB.addMul(mB, impulse);\n                aB += iB * Vec2.crossVec2Vec2(rB, impulse);\n            }\n            this.m_bodyA.c_position.c.setVec2(cA);\n            this.m_bodyA.c_position.a = aA;\n            this.m_bodyB.c_position.c.setVec2(cB);\n            this.m_bodyB.c_position.a = aB;\n            return positionError <= Settings.linearSlop\n                && angularError <= Settings.angularSlop;\n        };\n        RevoluteJoint.TYPE = 'revolute-joint';\n        return RevoluteJoint;\n    }(Joint));\n\n    /*\n     * Planck.js\n     * The MIT License\n     * Copyright (c) 2021 Erin Catto, Ali Shakiba\n     *\n     * Permission is hereby granted, free of charge, to any person obtaining a copy\n     * of this software and associated documentation files (the \"Software\"), to deal\n     * in the Software without restriction, including without limitation the rights\n     * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n     * copies of the Software, and to permit persons to whom the Software is\n     * furnished to do so, subject to the following conditions:\n     *\n     * The above copyright notice and this permission notice shall be included in all\n     * copies or substantial portions of the Software.\n     *\n     * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n     * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n     * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n     * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n     * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n     * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n     * SOFTWARE.\n     */\n    var inactiveLimit$1 = 0;\n    var atLowerLimit = 1;\n    var atUpperLimit$1 = 2;\n    var equalLimits = 3;\n    var DEFAULTS$7 = {\n        enableLimit: false,\n        lowerTranslation: 0.0,\n        upperTranslation: 0.0,\n        enableMotor: false,\n        maxMotorForce: 0.0,\n        motorSpeed: 0.0\n    };\n    /**\n     * A prismatic joint. This joint provides one degree of freedom: translation\n     * along an axis fixed in bodyA. Relative rotation is prevented. You can use a\n     * joint limit to restrict the range of motion and a joint motor to drive the\n     * motion or to model joint friction.\n     */\n    var PrismaticJoint = /** @class */ (function (_super) {\n        __extends(PrismaticJoint, _super);\n        function PrismaticJoint(def, bodyA, bodyB, anchor, axis) {\n            var _this = this;\n            // @ts-ignore\n            if (!(_this instanceof PrismaticJoint)) {\n                return new PrismaticJoint(def, bodyA, bodyB, anchor, axis);\n            }\n            def = options(def, DEFAULTS$7);\n            _this = _super.call(this, def, bodyA, bodyB) || this;\n            bodyA = _this.m_bodyA;\n            bodyB = _this.m_bodyB;\n            _this.m_type = PrismaticJoint.TYPE;\n            _this.m_localAnchorA = Vec2.clone(anchor ? bodyA.getLocalPoint(anchor) : def.localAnchorA || Vec2.zero());\n            _this.m_localAnchorB = Vec2.clone(anchor ? bodyB.getLocalPoint(anchor) : def.localAnchorB || Vec2.zero());\n            _this.m_localXAxisA = Vec2.clone(axis ? bodyA.getLocalVector(axis) : def.localAxisA || Vec2.neo(1.0, 0.0));\n            _this.m_localXAxisA.normalize();\n            _this.m_localYAxisA = Vec2.crossNumVec2(1.0, _this.m_localXAxisA);\n            _this.m_referenceAngle = math$1.isFinite(def.referenceAngle) ? def.referenceAngle : bodyB.getAngle() - bodyA.getAngle();\n            _this.m_impulse = new Vec3();\n            _this.m_motorMass = 0.0;\n            _this.m_motorImpulse = 0.0;\n            _this.m_lowerTranslation = def.lowerTranslation;\n            _this.m_upperTranslation = def.upperTranslation;\n            _this.m_maxMotorForce = def.maxMotorForce;\n            _this.m_motorSpeed = def.motorSpeed;\n            _this.m_enableLimit = def.enableLimit;\n            _this.m_enableMotor = def.enableMotor;\n            _this.m_limitState = inactiveLimit$1;\n            _this.m_axis = Vec2.zero();\n            _this.m_perp = Vec2.zero();\n            _this.m_K = new Mat33();\n            return _this;\n            // Linear constraint (point-to-line)\n            // d = p2 - p1 = x2 + r2 - x1 - r1\n            // C = dot(perp, d)\n            // Cdot = dot(d, cross(w1, perp)) + dot(perp, v2 + cross(w2, r2) - v1 -\n            // cross(w1, r1))\n            // = -dot(perp, v1) - dot(cross(d + r1, perp), w1) + dot(perp, v2) +\n            // dot(cross(r2, perp), v2)\n            // J = [-perp, -cross(d + r1, perp), perp, cross(r2,perp)]\n            //\n            // Angular constraint\n            // C = a2 - a1 + a_initial\n            // Cdot = w2 - w1\n            // J = [0 0 -1 0 0 1]\n            //\n            // K = J * invM * JT\n            //\n            // J = [-a -s1 a s2]\n            // [0 -1 0 1]\n            // a = perp\n            // s1 = cross(d + r1, a) = cross(p2 - x1, a)\n            // s2 = cross(r2, a) = cross(p2 - x2, a)\n            // Motor/Limit linear constraint\n            // C = dot(ax1, d)\n            // Cdot = = -dot(ax1, v1) - dot(cross(d + r1, ax1), w1) + dot(ax1, v2) +\n            // dot(cross(r2, ax1), v2)\n            // J = [-ax1 -cross(d+r1,ax1) ax1 cross(r2,ax1)]\n            // Block Solver\n            // We develop a block solver that includes the joint limit. This makes the\n            // limit stiff (inelastic) even\n            // when the mass has poor distribution (leading to large torques about the\n            // joint anchor points).\n            //\n            // The Jacobian has 3 rows:\n            // J = [-uT -s1 uT s2] // linear\n            // [0 -1 0 1] // angular\n            // [-vT -a1 vT a2] // limit\n            //\n            // u = perp\n            // v = axis\n            // s1 = cross(d + r1, u), s2 = cross(r2, u)\n            // a1 = cross(d + r1, v), a2 = cross(r2, v)\n            // M * (v2 - v1) = JT * df\n            // J * v2 = bias\n            //\n            // v2 = v1 + invM * JT * df\n            // J * (v1 + invM * JT * df) = bias\n            // K * df = bias - J * v1 = -Cdot\n            // K = J * invM * JT\n            // Cdot = J * v1 - bias\n            //\n            // Now solve for f2.\n            // df = f2 - f1\n            // K * (f2 - f1) = -Cdot\n            // f2 = invK * (-Cdot) + f1\n            //\n            // Clamp accumulated limit impulse.\n            // lower: f2(3) = max(f2(3), 0)\n            // upper: f2(3) = min(f2(3), 0)\n            //\n            // Solve for correct f2(1:2)\n            // K(1:2, 1:2) * f2(1:2) = -Cdot(1:2) - K(1:2,3) * f2(3) + K(1:2,1:3) * f1\n            // = -Cdot(1:2) - K(1:2,3) * f2(3) + K(1:2,1:2) * f1(1:2) + K(1:2,3) * f1(3)\n            // K(1:2, 1:2) * f2(1:2) = -Cdot(1:2) - K(1:2,3) * (f2(3) - f1(3)) +\n            // K(1:2,1:2) * f1(1:2)\n            // f2(1:2) = invK(1:2,1:2) * (-Cdot(1:2) - K(1:2,3) * (f2(3) - f1(3))) +\n            // f1(1:2)\n            //\n            // Now compute impulse to be applied:\n            // df = f2 - f1\n        }\n        /** @internal */\n        PrismaticJoint.prototype._serialize = function () {\n            return {\n                type: this.m_type,\n                bodyA: this.m_bodyA,\n                bodyB: this.m_bodyB,\n                collideConnected: this.m_collideConnected,\n                lowerTranslation: this.m_lowerTranslation,\n                upperTranslation: this.m_upperTranslation,\n                maxMotorForce: this.m_maxMotorForce,\n                motorSpeed: this.m_motorSpeed,\n                enableLimit: this.m_enableLimit,\n                enableMotor: this.m_enableMotor,\n                localAnchorA: this.m_localAnchorA,\n                localAnchorB: this.m_localAnchorB,\n                localAxisA: this.m_localXAxisA,\n                referenceAngle: this.m_referenceAngle,\n            };\n        };\n        /** @internal */\n        PrismaticJoint._deserialize = function (data, world, restore) {\n            data = __assign({}, data);\n            data.bodyA = restore(Body, data.bodyA, world);\n            data.bodyB = restore(Body, data.bodyB, world);\n            data.localAxisA = Vec2.clone(data.localAxisA);\n            var joint = new PrismaticJoint(data);\n            return joint;\n        };\n        /** @internal */\n        PrismaticJoint.prototype._setAnchors = function (def) {\n            if (def.anchorA) {\n                this.m_localAnchorA.setVec2(this.m_bodyA.getLocalPoint(def.anchorA));\n            }\n            else if (def.localAnchorA) {\n                this.m_localAnchorA.setVec2(def.localAnchorA);\n            }\n            if (def.anchorB) {\n                this.m_localAnchorB.setVec2(this.m_bodyB.getLocalPoint(def.anchorB));\n            }\n            else if (def.localAnchorB) {\n                this.m_localAnchorB.setVec2(def.localAnchorB);\n            }\n            if (def.localAxisA) {\n                this.m_localXAxisA.setVec2(def.localAxisA);\n                this.m_localYAxisA.setVec2(Vec2.crossNumVec2(1.0, def.localAxisA));\n            }\n        };\n        /**\n         * The local anchor point relative to bodyA's origin.\n         */\n        PrismaticJoint.prototype.getLocalAnchorA = function () {\n            return this.m_localAnchorA;\n        };\n        /**\n         * The local anchor point relative to bodyB's origin.\n         */\n        PrismaticJoint.prototype.getLocalAnchorB = function () {\n            return this.m_localAnchorB;\n        };\n        /**\n         * The local joint axis relative to bodyA.\n         */\n        PrismaticJoint.prototype.getLocalAxisA = function () {\n            return this.m_localXAxisA;\n        };\n        /**\n         * Get the reference angle.\n         */\n        PrismaticJoint.prototype.getReferenceAngle = function () {\n            return this.m_referenceAngle;\n        };\n        /**\n         * Get the current joint translation, usually in meters.\n         */\n        PrismaticJoint.prototype.getJointTranslation = function () {\n            var pA = this.m_bodyA.getWorldPoint(this.m_localAnchorA);\n            var pB = this.m_bodyB.getWorldPoint(this.m_localAnchorB);\n            var d = Vec2.sub(pB, pA);\n            var axis = this.m_bodyA.getWorldVector(this.m_localXAxisA);\n            var translation = Vec2.dot(d, axis);\n            return translation;\n        };\n        /**\n         * Get the current joint translation speed, usually in meters per second.\n         */\n        PrismaticJoint.prototype.getJointSpeed = function () {\n            var bA = this.m_bodyA;\n            var bB = this.m_bodyB;\n            var rA = Rot.mulVec2(bA.m_xf.q, Vec2.sub(this.m_localAnchorA, bA.m_sweep.localCenter)); // Vec2\n            var rB = Rot.mulVec2(bB.m_xf.q, Vec2.sub(this.m_localAnchorB, bB.m_sweep.localCenter)); // Vec2\n            var p1 = Vec2.add(bA.m_sweep.c, rA); // Vec2\n            var p2 = Vec2.add(bB.m_sweep.c, rB); // Vec2\n            var d = Vec2.sub(p2, p1); // Vec2\n            var axis = Rot.mulVec2(bA.m_xf.q, this.m_localXAxisA); // Vec2\n            var vA = bA.m_linearVelocity; // Vec2\n            var vB = bB.m_linearVelocity; // Vec2\n            var wA = bA.m_angularVelocity; // float\n            var wB = bB.m_angularVelocity; // float\n            var speed = Vec2.dot(d, Vec2.crossNumVec2(wA, axis))\n                + Vec2.dot(axis, Vec2.sub(Vec2.addCrossNumVec2(vB, wB, rB), Vec2.addCrossNumVec2(vA, wA, rA))); // float\n            return speed;\n        };\n        /**\n         * Is the joint limit enabled?\n         */\n        PrismaticJoint.prototype.isLimitEnabled = function () {\n            return this.m_enableLimit;\n        };\n        /**\n         * Enable/disable the joint limit.\n         */\n        PrismaticJoint.prototype.enableLimit = function (flag) {\n            if (flag != this.m_enableLimit) {\n                this.m_bodyA.setAwake(true);\n                this.m_bodyB.setAwake(true);\n                this.m_enableLimit = flag;\n                this.m_impulse.z = 0.0;\n            }\n        };\n        /**\n         * Get the lower joint limit, usually in meters.\n         */\n        PrismaticJoint.prototype.getLowerLimit = function () {\n            return this.m_lowerTranslation;\n        };\n        /**\n         * Get the upper joint limit, usually in meters.\n         */\n        PrismaticJoint.prototype.getUpperLimit = function () {\n            return this.m_upperTranslation;\n        };\n        /**\n         * Set the joint limits, usually in meters.\n         */\n        PrismaticJoint.prototype.setLimits = function (lower, upper) {\n            if (lower != this.m_lowerTranslation || upper != this.m_upperTranslation) {\n                this.m_bodyA.setAwake(true);\n                this.m_bodyB.setAwake(true);\n                this.m_lowerTranslation = lower;\n                this.m_upperTranslation = upper;\n                this.m_impulse.z = 0.0;\n            }\n        };\n        /**\n         * Is the joint motor enabled?\n         */\n        PrismaticJoint.prototype.isMotorEnabled = function () {\n            return this.m_enableMotor;\n        };\n        /**\n         * Enable/disable the joint motor.\n         */\n        PrismaticJoint.prototype.enableMotor = function (flag) {\n            this.m_bodyA.setAwake(true);\n            this.m_bodyB.setAwake(true);\n            this.m_enableMotor = flag;\n        };\n        /**\n         * Set the motor speed, usually in meters per second.\n         */\n        PrismaticJoint.prototype.setMotorSpeed = function (speed) {\n            this.m_bodyA.setAwake(true);\n            this.m_bodyB.setAwake(true);\n            this.m_motorSpeed = speed;\n        };\n        /**\n         * Set the maximum motor force, usually in N.\n         */\n        PrismaticJoint.prototype.setMaxMotorForce = function (force) {\n            this.m_bodyA.setAwake(true);\n            this.m_bodyB.setAwake(true);\n            this.m_maxMotorForce = force;\n        };\n        PrismaticJoint.prototype.getMaxMotorForce = function () {\n            return this.m_maxMotorForce;\n        };\n        /**\n         * Get the motor speed, usually in meters per second.\n         */\n        PrismaticJoint.prototype.getMotorSpeed = function () {\n            return this.m_motorSpeed;\n        };\n        /**\n         * Get the current motor force given the inverse time step, usually in N.\n         */\n        PrismaticJoint.prototype.getMotorForce = function (inv_dt) {\n            return inv_dt * this.m_motorImpulse;\n        };\n        /**\n         * Get the anchor point on bodyA in world coordinates.\n         */\n        PrismaticJoint.prototype.getAnchorA = function () {\n            return this.m_bodyA.getWorldPoint(this.m_localAnchorA);\n        };\n        /**\n         * Get the anchor point on bodyB in world coordinates.\n         */\n        PrismaticJoint.prototype.getAnchorB = function () {\n            return this.m_bodyB.getWorldPoint(this.m_localAnchorB);\n        };\n        /**\n         * Get the reaction force on bodyB at the joint anchor in Newtons.\n         */\n        PrismaticJoint.prototype.getReactionForce = function (inv_dt) {\n            return Vec2.combine(this.m_impulse.x, this.m_perp, this.m_motorImpulse + this.m_impulse.z, this.m_axis).mul(inv_dt);\n        };\n        /**\n         * Get the reaction torque on bodyB in N*m.\n         */\n        PrismaticJoint.prototype.getReactionTorque = function (inv_dt) {\n            return inv_dt * this.m_impulse.y;\n        };\n        PrismaticJoint.prototype.initVelocityConstraints = function (step) {\n            this.m_localCenterA = this.m_bodyA.m_sweep.localCenter;\n            this.m_localCenterB = this.m_bodyB.m_sweep.localCenter;\n            this.m_invMassA = this.m_bodyA.m_invMass;\n            this.m_invMassB = this.m_bodyB.m_invMass;\n            this.m_invIA = this.m_bodyA.m_invI;\n            this.m_invIB = this.m_bodyB.m_invI;\n            var cA = this.m_bodyA.c_position.c;\n            var aA = this.m_bodyA.c_position.a;\n            var vA = this.m_bodyA.c_velocity.v;\n            var wA = this.m_bodyA.c_velocity.w;\n            var cB = this.m_bodyB.c_position.c;\n            var aB = this.m_bodyB.c_position.a;\n            var vB = this.m_bodyB.c_velocity.v;\n            var wB = this.m_bodyB.c_velocity.w;\n            var qA = Rot.neo(aA);\n            var qB = Rot.neo(aB);\n            // Compute the effective masses.\n            var rA = Rot.mulVec2(qA, Vec2.sub(this.m_localAnchorA, this.m_localCenterA));\n            var rB = Rot.mulVec2(qB, Vec2.sub(this.m_localAnchorB, this.m_localCenterB));\n            var d = Vec2.zero();\n            d.addCombine(1, cB, 1, rB);\n            d.subCombine(1, cA, 1, rA);\n            var mA = this.m_invMassA;\n            var mB = this.m_invMassB;\n            var iA = this.m_invIA;\n            var iB = this.m_invIB;\n            // Compute motor Jacobian and effective mass.\n            {\n                this.m_axis = Rot.mulVec2(qA, this.m_localXAxisA);\n                this.m_a1 = Vec2.crossVec2Vec2(Vec2.add(d, rA), this.m_axis);\n                this.m_a2 = Vec2.crossVec2Vec2(rB, this.m_axis);\n                this.m_motorMass = mA + mB + iA * this.m_a1 * this.m_a1 + iB * this.m_a2\n                    * this.m_a2;\n                if (this.m_motorMass > 0.0) {\n                    this.m_motorMass = 1.0 / this.m_motorMass;\n                }\n            }\n            // Prismatic constraint.\n            {\n                this.m_perp = Rot.mulVec2(qA, this.m_localYAxisA);\n                this.m_s1 = Vec2.crossVec2Vec2(Vec2.add(d, rA), this.m_perp);\n                this.m_s2 = Vec2.crossVec2Vec2(rB, this.m_perp);\n                Vec2.crossVec2Vec2(rA, this.m_perp);\n                var k11 = mA + mB + iA * this.m_s1 * this.m_s1 + iB * this.m_s2 * this.m_s2;\n                var k12 = iA * this.m_s1 + iB * this.m_s2;\n                var k13 = iA * this.m_s1 * this.m_a1 + iB * this.m_s2 * this.m_a2;\n                var k22 = iA + iB;\n                if (k22 == 0.0) {\n                    // For bodies with fixed rotation.\n                    k22 = 1.0;\n                }\n                var k23 = iA * this.m_a1 + iB * this.m_a2;\n                var k33 = mA + mB + iA * this.m_a1 * this.m_a1 + iB * this.m_a2 * this.m_a2;\n                this.m_K.ex.set(k11, k12, k13);\n                this.m_K.ey.set(k12, k22, k23);\n                this.m_K.ez.set(k13, k23, k33);\n            }\n            // Compute motor and limit terms.\n            if (this.m_enableLimit) {\n                var jointTranslation = Vec2.dot(this.m_axis, d); // float\n                if (math$1.abs(this.m_upperTranslation - this.m_lowerTranslation) < 2.0 * Settings.linearSlop) {\n                    this.m_limitState = equalLimits;\n                }\n                else if (jointTranslation <= this.m_lowerTranslation) {\n                    if (this.m_limitState != atLowerLimit) {\n                        this.m_limitState = atLowerLimit;\n                        this.m_impulse.z = 0.0;\n                    }\n                }\n                else if (jointTranslation >= this.m_upperTranslation) {\n                    if (this.m_limitState != atUpperLimit$1) {\n                        this.m_limitState = atUpperLimit$1;\n                        this.m_impulse.z = 0.0;\n                    }\n                }\n                else {\n                    this.m_limitState = inactiveLimit$1;\n                    this.m_impulse.z = 0.0;\n                }\n            }\n            else {\n                this.m_limitState = inactiveLimit$1;\n                this.m_impulse.z = 0.0;\n            }\n            if (this.m_enableMotor == false) {\n                this.m_motorImpulse = 0.0;\n            }\n            if (step.warmStarting) {\n                // Account for variable time step.\n                this.m_impulse.mul(step.dtRatio);\n                this.m_motorImpulse *= step.dtRatio;\n                var P = Vec2.combine(this.m_impulse.x, this.m_perp, this.m_motorImpulse\n                    + this.m_impulse.z, this.m_axis);\n                var LA = this.m_impulse.x * this.m_s1 + this.m_impulse.y\n                    + (this.m_motorImpulse + this.m_impulse.z) * this.m_a1;\n                var LB = this.m_impulse.x * this.m_s2 + this.m_impulse.y\n                    + (this.m_motorImpulse + this.m_impulse.z) * this.m_a2;\n                vA.subMul(mA, P);\n                wA -= iA * LA;\n                vB.addMul(mB, P);\n                wB += iB * LB;\n            }\n            else {\n                this.m_impulse.setZero();\n                this.m_motorImpulse = 0.0;\n            }\n            this.m_bodyA.c_velocity.v.setVec2(vA);\n            this.m_bodyA.c_velocity.w = wA;\n            this.m_bodyB.c_velocity.v.setVec2(vB);\n            this.m_bodyB.c_velocity.w = wB;\n        };\n        PrismaticJoint.prototype.solveVelocityConstraints = function (step) {\n            var vA = this.m_bodyA.c_velocity.v;\n            var wA = this.m_bodyA.c_velocity.w;\n            var vB = this.m_bodyB.c_velocity.v;\n            var wB = this.m_bodyB.c_velocity.w;\n            var mA = this.m_invMassA;\n            var mB = this.m_invMassB;\n            var iA = this.m_invIA;\n            var iB = this.m_invIB;\n            // Solve linear motor constraint.\n            if (this.m_enableMotor && this.m_limitState != equalLimits) {\n                var Cdot = Vec2.dot(this.m_axis, Vec2.sub(vB, vA)) + this.m_a2 * wB\n                    - this.m_a1 * wA;\n                var impulse = this.m_motorMass * (this.m_motorSpeed - Cdot);\n                var oldImpulse = this.m_motorImpulse;\n                var maxImpulse = step.dt * this.m_maxMotorForce;\n                this.m_motorImpulse = math$1.clamp(this.m_motorImpulse + impulse, -maxImpulse, maxImpulse);\n                impulse = this.m_motorImpulse - oldImpulse;\n                var P = Vec2.mulNumVec2(impulse, this.m_axis);\n                var LA = impulse * this.m_a1;\n                var LB = impulse * this.m_a2;\n                vA.subMul(mA, P);\n                wA -= iA * LA;\n                vB.addMul(mB, P);\n                wB += iB * LB;\n            }\n            var Cdot1 = Vec2.zero();\n            Cdot1.x += Vec2.dot(this.m_perp, vB) + this.m_s2 * wB;\n            Cdot1.x -= Vec2.dot(this.m_perp, vA) + this.m_s1 * wA;\n            Cdot1.y = wB - wA;\n            if (this.m_enableLimit && this.m_limitState != inactiveLimit$1) {\n                // Solve prismatic and limit constraint in block form.\n                var Cdot2 = 0;\n                Cdot2 += Vec2.dot(this.m_axis, vB) + this.m_a2 * wB;\n                Cdot2 -= Vec2.dot(this.m_axis, vA) + this.m_a1 * wA;\n                var Cdot = new Vec3(Cdot1.x, Cdot1.y, Cdot2);\n                var f1 = Vec3.clone(this.m_impulse);\n                var df = this.m_K.solve33(Vec3.neg(Cdot)); // Vec3\n                this.m_impulse.add(df);\n                if (this.m_limitState == atLowerLimit) {\n                    this.m_impulse.z = math$1.max(this.m_impulse.z, 0.0);\n                }\n                else if (this.m_limitState == atUpperLimit$1) {\n                    this.m_impulse.z = math$1.min(this.m_impulse.z, 0.0);\n                }\n                // f2(1:2) = invK(1:2,1:2) * (-Cdot(1:2) - K(1:2,3) * (f2(3) - f1(3))) +\n                // f1(1:2)\n                var b = Vec2.combine(-1, Cdot1, -(this.m_impulse.z - f1.z), Vec2.neo(this.m_K.ez.x, this.m_K.ez.y)); // Vec2\n                var f2r = Vec2.add(this.m_K.solve22(b), Vec2.neo(f1.x, f1.y)); // Vec2\n                this.m_impulse.x = f2r.x;\n                this.m_impulse.y = f2r.y;\n                df = Vec3.sub(this.m_impulse, f1);\n                var P = Vec2.combine(df.x, this.m_perp, df.z, this.m_axis); // Vec2\n                var LA = df.x * this.m_s1 + df.y + df.z * this.m_a1; // float\n                var LB = df.x * this.m_s2 + df.y + df.z * this.m_a2; // float\n                vA.subMul(mA, P);\n                wA -= iA * LA;\n                vB.addMul(mB, P);\n                wB += iB * LB;\n            }\n            else {\n                // Limit is inactive, just solve the prismatic constraint in block form.\n                var df = this.m_K.solve22(Vec2.neg(Cdot1)); // Vec2\n                this.m_impulse.x += df.x;\n                this.m_impulse.y += df.y;\n                var P = Vec2.mulNumVec2(df.x, this.m_perp); // Vec2\n                var LA = df.x * this.m_s1 + df.y; // float\n                var LB = df.x * this.m_s2 + df.y; // float\n                vA.subMul(mA, P);\n                wA -= iA * LA;\n                vB.addMul(mB, P);\n                wB += iB * LB;\n            }\n            this.m_bodyA.c_velocity.v = vA;\n            this.m_bodyA.c_velocity.w = wA;\n            this.m_bodyB.c_velocity.v = vB;\n            this.m_bodyB.c_velocity.w = wB;\n        };\n        /**\n         * This returns true if the position errors are within tolerance.\n         */\n        PrismaticJoint.prototype.solvePositionConstraints = function (step) {\n            var cA = this.m_bodyA.c_position.c;\n            var aA = this.m_bodyA.c_position.a;\n            var cB = this.m_bodyB.c_position.c;\n            var aB = this.m_bodyB.c_position.a;\n            var qA = Rot.neo(aA);\n            var qB = Rot.neo(aB);\n            var mA = this.m_invMassA;\n            var mB = this.m_invMassB;\n            var iA = this.m_invIA;\n            var iB = this.m_invIB;\n            // Compute fresh Jacobians\n            var rA = Rot.mulVec2(qA, Vec2.sub(this.m_localAnchorA, this.m_localCenterA)); // Vec2\n            var rB = Rot.mulVec2(qB, Vec2.sub(this.m_localAnchorB, this.m_localCenterB)); // Vec2\n            var d = Vec2.sub(Vec2.add(cB, rB), Vec2.add(cA, rA)); // Vec2\n            var axis = Rot.mulVec2(qA, this.m_localXAxisA); // Vec2\n            var a1 = Vec2.crossVec2Vec2(Vec2.add(d, rA), axis); // float\n            var a2 = Vec2.crossVec2Vec2(rB, axis); // float\n            var perp = Rot.mulVec2(qA, this.m_localYAxisA); // Vec2\n            var s1 = Vec2.crossVec2Vec2(Vec2.add(d, rA), perp); // float\n            var s2 = Vec2.crossVec2Vec2(rB, perp); // float\n            var impulse = new Vec3();\n            var C1 = Vec2.zero(); // Vec2\n            C1.x = Vec2.dot(perp, d);\n            C1.y = aB - aA - this.m_referenceAngle;\n            var linearError = math$1.abs(C1.x); // float\n            var angularError = math$1.abs(C1.y); // float\n            var linearSlop = Settings.linearSlop;\n            var maxLinearCorrection = Settings.maxLinearCorrection;\n            var active = false; // bool\n            var C2 = 0.0; // float\n            if (this.m_enableLimit) {\n                var translation = Vec2.dot(axis, d); // float\n                if (math$1.abs(this.m_upperTranslation - this.m_lowerTranslation) < 2.0 * linearSlop) {\n                    // Prevent large angular corrections\n                    C2 = math$1.clamp(translation, -maxLinearCorrection, maxLinearCorrection);\n                    linearError = math$1.max(linearError, math$1.abs(translation));\n                    active = true;\n                }\n                else if (translation <= this.m_lowerTranslation) {\n                    // Prevent large linear corrections and allow some slop.\n                    C2 = math$1.clamp(translation - this.m_lowerTranslation + linearSlop, -maxLinearCorrection, 0.0);\n                    linearError = math$1\n                        .max(linearError, this.m_lowerTranslation - translation);\n                    active = true;\n                }\n                else if (translation >= this.m_upperTranslation) {\n                    // Prevent large linear corrections and allow some slop.\n                    C2 = math$1.clamp(translation - this.m_upperTranslation - linearSlop, 0.0, maxLinearCorrection);\n                    linearError = math$1\n                        .max(linearError, translation - this.m_upperTranslation);\n                    active = true;\n                }\n            }\n            if (active) {\n                var k11 = mA + mB + iA * s1 * s1 + iB * s2 * s2; // float\n                var k12 = iA * s1 + iB * s2; // float\n                var k13 = iA * s1 * a1 + iB * s2 * a2; // float\n                var k22 = iA + iB; // float\n                if (k22 == 0.0) {\n                    // For fixed rotation\n                    k22 = 1.0;\n                }\n                var k23 = iA * a1 + iB * a2; // float\n                var k33 = mA + mB + iA * a1 * a1 + iB * a2 * a2; // float\n                var K = new Mat33();\n                K.ex.set(k11, k12, k13);\n                K.ey.set(k12, k22, k23);\n                K.ez.set(k13, k23, k33);\n                var C = new Vec3();\n                C.x = C1.x;\n                C.y = C1.y;\n                C.z = C2;\n                impulse = K.solve33(Vec3.neg(C));\n            }\n            else {\n                var k11 = mA + mB + iA * s1 * s1 + iB * s2 * s2; // float\n                var k12 = iA * s1 + iB * s2; // float\n                var k22 = iA + iB; // float\n                if (k22 == 0.0) {\n                    k22 = 1.0;\n                }\n                var K = new Mat22();\n                K.ex.setNum(k11, k12);\n                K.ey.setNum(k12, k22);\n                var impulse1 = K.solve(Vec2.neg(C1)); // Vec2\n                impulse.x = impulse1.x;\n                impulse.y = impulse1.y;\n                impulse.z = 0.0;\n            }\n            var P = Vec2.combine(impulse.x, perp, impulse.z, axis); // Vec2\n            var LA = impulse.x * s1 + impulse.y + impulse.z * a1; // float\n            var LB = impulse.x * s2 + impulse.y + impulse.z * a2; // float\n            cA.subMul(mA, P);\n            aA -= iA * LA;\n            cB.addMul(mB, P);\n            aB += iB * LB;\n            this.m_bodyA.c_position.c = cA;\n            this.m_bodyA.c_position.a = aA;\n            this.m_bodyB.c_position.c = cB;\n            this.m_bodyB.c_position.a = aB;\n            return linearError <= Settings.linearSlop\n                && angularError <= Settings.angularSlop;\n        };\n        PrismaticJoint.TYPE = 'prismatic-joint';\n        return PrismaticJoint;\n    }(Joint));\n\n    /*\n     * Planck.js\n     * The MIT License\n     * Copyright (c) 2021 Erin Catto, Ali Shakiba\n     *\n     * Permission is hereby granted, free of charge, to any person obtaining a copy\n     * of this software and associated documentation files (the \"Software\"), to deal\n     * in the Software without restriction, including without limitation the rights\n     * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n     * copies of the Software, and to permit persons to whom the Software is\n     * furnished to do so, subject to the following conditions:\n     *\n     * The above copyright notice and this permission notice shall be included in all\n     * copies or substantial portions of the Software.\n     *\n     * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n     * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n     * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n     * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n     * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n     * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n     * SOFTWARE.\n     */\n    var DEFAULTS$6 = {\n        ratio: 1.0\n    };\n    /**\n     * A gear joint is used to connect two joints together. Either joint can be a\n     * revolute or prismatic joint. You specify a gear ratio to bind the motions\n     * together: coordinate1 + ratio * coordinate2 = constant\n     *\n     * The ratio can be negative or positive. If one joint is a revolute joint and\n     * the other joint is a prismatic joint, then the ratio will have units of\n     * length or units of 1/length. Warning: You have to manually destroy the gear\n     * joint if joint1 or joint2 is destroyed.\n     *\n     * This definition requires two existing revolute or prismatic joints (any\n     * combination will work).\n     */\n    var GearJoint = /** @class */ (function (_super) {\n        __extends(GearJoint, _super);\n        function GearJoint(def, bodyA, bodyB, joint1, joint2, ratio) {\n            var _this = this;\n            // @ts-ignore\n            if (!(_this instanceof GearJoint)) {\n                return new GearJoint(def, bodyA, bodyB, joint1, joint2, ratio);\n            }\n            def = options(def, DEFAULTS$6);\n            _this = _super.call(this, def, bodyA, bodyB) || this;\n            bodyA = _this.m_bodyA;\n            bodyB = _this.m_bodyB;\n            _this.m_type = GearJoint.TYPE;\n            _this.m_joint1 = joint1 ? joint1 : def.joint1;\n            _this.m_joint2 = joint2 ? joint2 : def.joint2;\n            _this.m_ratio = math$1.isFinite(ratio) ? ratio : def.ratio;\n            _this.m_type1 = _this.m_joint1.getType();\n            _this.m_type2 = _this.m_joint2.getType();\n            // joint1 connects body A to body C\n            // joint2 connects body B to body D\n            var coordinateA;\n            var coordinateB;\n            // TODO_ERIN there might be some problem with the joint edges in Joint.\n            _this.m_bodyC = _this.m_joint1.getBodyA();\n            _this.m_bodyA = _this.m_joint1.getBodyB();\n            // Get geometry of joint1\n            var xfA = _this.m_bodyA.m_xf;\n            var aA = _this.m_bodyA.m_sweep.a;\n            var xfC = _this.m_bodyC.m_xf;\n            var aC = _this.m_bodyC.m_sweep.a;\n            if (_this.m_type1 === RevoluteJoint.TYPE) {\n                var revolute = _this.m_joint1;\n                _this.m_localAnchorC = revolute.m_localAnchorA;\n                _this.m_localAnchorA = revolute.m_localAnchorB;\n                _this.m_referenceAngleA = revolute.m_referenceAngle;\n                _this.m_localAxisC = Vec2.zero();\n                coordinateA = aA - aC - _this.m_referenceAngleA;\n            }\n            else {\n                var prismatic = _this.m_joint1;\n                _this.m_localAnchorC = prismatic.m_localAnchorA;\n                _this.m_localAnchorA = prismatic.m_localAnchorB;\n                _this.m_referenceAngleA = prismatic.m_referenceAngle;\n                _this.m_localAxisC = prismatic.m_localXAxisA;\n                var pC = _this.m_localAnchorC;\n                var pA = Rot.mulTVec2(xfC.q, Vec2.add(Rot.mulVec2(xfA.q, _this.m_localAnchorA), Vec2.sub(xfA.p, xfC.p)));\n                coordinateA = Vec2.dot(pA, _this.m_localAxisC) - Vec2.dot(pC, _this.m_localAxisC);\n            }\n            _this.m_bodyD = _this.m_joint2.getBodyA();\n            _this.m_bodyB = _this.m_joint2.getBodyB();\n            // Get geometry of joint2\n            var xfB = _this.m_bodyB.m_xf;\n            var aB = _this.m_bodyB.m_sweep.a;\n            var xfD = _this.m_bodyD.m_xf;\n            var aD = _this.m_bodyD.m_sweep.a;\n            if (_this.m_type2 === RevoluteJoint.TYPE) {\n                var revolute = _this.m_joint2;\n                _this.m_localAnchorD = revolute.m_localAnchorA;\n                _this.m_localAnchorB = revolute.m_localAnchorB;\n                _this.m_referenceAngleB = revolute.m_referenceAngle;\n                _this.m_localAxisD = Vec2.zero();\n                coordinateB = aB - aD - _this.m_referenceAngleB;\n            }\n            else {\n                var prismatic = _this.m_joint2;\n                _this.m_localAnchorD = prismatic.m_localAnchorA;\n                _this.m_localAnchorB = prismatic.m_localAnchorB;\n                _this.m_referenceAngleB = prismatic.m_referenceAngle;\n                _this.m_localAxisD = prismatic.m_localXAxisA;\n                var pD = _this.m_localAnchorD;\n                var pB = Rot.mulTVec2(xfD.q, Vec2.add(Rot.mulVec2(xfB.q, _this.m_localAnchorB), Vec2.sub(xfB.p, xfD.p)));\n                coordinateB = Vec2.dot(pB, _this.m_localAxisD) - Vec2.dot(pD, _this.m_localAxisD);\n            }\n            _this.m_constant = coordinateA + _this.m_ratio * coordinateB;\n            _this.m_impulse = 0.0;\n            return _this;\n            // Gear Joint:\n            // C0 = (coordinate1 + ratio * coordinate2)_initial\n            // C = (coordinate1 + ratio * coordinate2) - C0 = 0\n            // J = [J1 ratio * J2]\n            // K = J * invM * JT\n            // = J1 * invM1 * J1T + ratio * ratio * J2 * invM2 * J2T\n            //\n            // Revolute:\n            // coordinate = rotation\n            // Cdot = angularVelocity\n            // J = [0 0 1]\n            // K = J * invM * JT = invI\n            //\n            // Prismatic:\n            // coordinate = dot(p - pg, ug)\n            // Cdot = dot(v + cross(w, r), ug)\n            // J = [ug cross(r, ug)]\n            // K = J * invM * JT = invMass + invI * cross(r, ug)^2\n        }\n        /** @internal */\n        GearJoint.prototype._serialize = function () {\n            return {\n                type: this.m_type,\n                bodyA: this.m_bodyA,\n                bodyB: this.m_bodyB,\n                collideConnected: this.m_collideConnected,\n                joint1: this.m_joint1,\n                joint2: this.m_joint2,\n                ratio: this.m_ratio,\n                // _constant: this.m_constant,\n            };\n        };\n        /** @internal */\n        GearJoint._deserialize = function (data, world, restore) {\n            data = __assign({}, data);\n            data.bodyA = restore(Body, data.bodyA, world);\n            data.bodyB = restore(Body, data.bodyB, world);\n            data.joint1 = restore(Joint, data.joint1, world);\n            data.joint2 = restore(Joint, data.joint2, world);\n            var joint = new GearJoint(data);\n            // if (data._constant) joint.m_constant = data._constant;\n            return joint;\n        };\n        /**\n         * Get the first joint.\n         */\n        GearJoint.prototype.getJoint1 = function () {\n            return this.m_joint1;\n        };\n        /**\n         * Get the second joint.\n         */\n        GearJoint.prototype.getJoint2 = function () {\n            return this.m_joint2;\n        };\n        /**\n         * Set the gear ratio.\n         */\n        GearJoint.prototype.setRatio = function (ratio) {\n            this.m_ratio = ratio;\n        };\n        /**\n         * Get the gear ratio.\n         */\n        GearJoint.prototype.getRatio = function () {\n            return this.m_ratio;\n        };\n        /**\n         * Get the anchor point on bodyA in world coordinates.\n         */\n        GearJoint.prototype.getAnchorA = function () {\n            return this.m_bodyA.getWorldPoint(this.m_localAnchorA);\n        };\n        /**\n         * Get the anchor point on bodyB in world coordinates.\n         */\n        GearJoint.prototype.getAnchorB = function () {\n            return this.m_bodyB.getWorldPoint(this.m_localAnchorB);\n        };\n        /**\n         * Get the reaction force on bodyB at the joint anchor in Newtons.\n         */\n        GearJoint.prototype.getReactionForce = function (inv_dt) {\n            return Vec2.mulNumVec2(this.m_impulse, this.m_JvAC).mul(inv_dt);\n        };\n        /**\n         * Get the reaction torque on bodyB in N*m.\n         */\n        GearJoint.prototype.getReactionTorque = function (inv_dt) {\n            var L = this.m_impulse * this.m_JwA; // float\n            return inv_dt * L;\n        };\n        GearJoint.prototype.initVelocityConstraints = function (step) {\n            this.m_lcA = this.m_bodyA.m_sweep.localCenter;\n            this.m_lcB = this.m_bodyB.m_sweep.localCenter;\n            this.m_lcC = this.m_bodyC.m_sweep.localCenter;\n            this.m_lcD = this.m_bodyD.m_sweep.localCenter;\n            this.m_mA = this.m_bodyA.m_invMass;\n            this.m_mB = this.m_bodyB.m_invMass;\n            this.m_mC = this.m_bodyC.m_invMass;\n            this.m_mD = this.m_bodyD.m_invMass;\n            this.m_iA = this.m_bodyA.m_invI;\n            this.m_iB = this.m_bodyB.m_invI;\n            this.m_iC = this.m_bodyC.m_invI;\n            this.m_iD = this.m_bodyD.m_invI;\n            var aA = this.m_bodyA.c_position.a;\n            var vA = this.m_bodyA.c_velocity.v;\n            var wA = this.m_bodyA.c_velocity.w;\n            var aB = this.m_bodyB.c_position.a;\n            var vB = this.m_bodyB.c_velocity.v;\n            var wB = this.m_bodyB.c_velocity.w;\n            var aC = this.m_bodyC.c_position.a;\n            var vC = this.m_bodyC.c_velocity.v;\n            var wC = this.m_bodyC.c_velocity.w;\n            var aD = this.m_bodyD.c_position.a;\n            var vD = this.m_bodyD.c_velocity.v;\n            var wD = this.m_bodyD.c_velocity.w;\n            var qA = Rot.neo(aA);\n            var qB = Rot.neo(aB);\n            var qC = Rot.neo(aC);\n            var qD = Rot.neo(aD);\n            this.m_mass = 0.0;\n            if (this.m_type1 == RevoluteJoint.TYPE) {\n                this.m_JvAC = Vec2.zero();\n                this.m_JwA = 1.0;\n                this.m_JwC = 1.0;\n                this.m_mass += this.m_iA + this.m_iC;\n            }\n            else {\n                var u = Rot.mulVec2(qC, this.m_localAxisC); // Vec2\n                var rC = Rot.mulSub(qC, this.m_localAnchorC, this.m_lcC); // Vec2\n                var rA = Rot.mulSub(qA, this.m_localAnchorA, this.m_lcA); // Vec2\n                this.m_JvAC = u;\n                this.m_JwC = Vec2.crossVec2Vec2(rC, u);\n                this.m_JwA = Vec2.crossVec2Vec2(rA, u);\n                this.m_mass += this.m_mC + this.m_mA + this.m_iC * this.m_JwC * this.m_JwC + this.m_iA * this.m_JwA * this.m_JwA;\n            }\n            if (this.m_type2 == RevoluteJoint.TYPE) {\n                this.m_JvBD = Vec2.zero();\n                this.m_JwB = this.m_ratio;\n                this.m_JwD = this.m_ratio;\n                this.m_mass += this.m_ratio * this.m_ratio * (this.m_iB + this.m_iD);\n            }\n            else {\n                var u = Rot.mulVec2(qD, this.m_localAxisD); // Vec2\n                var rD = Rot.mulSub(qD, this.m_localAnchorD, this.m_lcD); // Vec2\n                var rB = Rot.mulSub(qB, this.m_localAnchorB, this.m_lcB); // Vec2\n                this.m_JvBD = Vec2.mulNumVec2(this.m_ratio, u);\n                this.m_JwD = this.m_ratio * Vec2.crossVec2Vec2(rD, u);\n                this.m_JwB = this.m_ratio * Vec2.crossVec2Vec2(rB, u);\n                this.m_mass += this.m_ratio * this.m_ratio * (this.m_mD + this.m_mB) + this.m_iD * this.m_JwD * this.m_JwD + this.m_iB * this.m_JwB * this.m_JwB;\n            }\n            // Compute effective mass.\n            this.m_mass = this.m_mass > 0.0 ? 1.0 / this.m_mass : 0.0;\n            if (step.warmStarting) {\n                vA.addMul(this.m_mA * this.m_impulse, this.m_JvAC);\n                wA += this.m_iA * this.m_impulse * this.m_JwA;\n                vB.addMul(this.m_mB * this.m_impulse, this.m_JvBD);\n                wB += this.m_iB * this.m_impulse * this.m_JwB;\n                vC.subMul(this.m_mC * this.m_impulse, this.m_JvAC);\n                wC -= this.m_iC * this.m_impulse * this.m_JwC;\n                vD.subMul(this.m_mD * this.m_impulse, this.m_JvBD);\n                wD -= this.m_iD * this.m_impulse * this.m_JwD;\n            }\n            else {\n                this.m_impulse = 0.0;\n            }\n            this.m_bodyA.c_velocity.v.setVec2(vA);\n            this.m_bodyA.c_velocity.w = wA;\n            this.m_bodyB.c_velocity.v.setVec2(vB);\n            this.m_bodyB.c_velocity.w = wB;\n            this.m_bodyC.c_velocity.v.setVec2(vC);\n            this.m_bodyC.c_velocity.w = wC;\n            this.m_bodyD.c_velocity.v.setVec2(vD);\n            this.m_bodyD.c_velocity.w = wD;\n        };\n        GearJoint.prototype.solveVelocityConstraints = function (step) {\n            var vA = this.m_bodyA.c_velocity.v;\n            var wA = this.m_bodyA.c_velocity.w;\n            var vB = this.m_bodyB.c_velocity.v;\n            var wB = this.m_bodyB.c_velocity.w;\n            var vC = this.m_bodyC.c_velocity.v;\n            var wC = this.m_bodyC.c_velocity.w;\n            var vD = this.m_bodyD.c_velocity.v;\n            var wD = this.m_bodyD.c_velocity.w;\n            var Cdot = Vec2.dot(this.m_JvAC, vA) - Vec2.dot(this.m_JvAC, vC)\n                + Vec2.dot(this.m_JvBD, vB) - Vec2.dot(this.m_JvBD, vD); // float\n            Cdot += (this.m_JwA * wA - this.m_JwC * wC)\n                + (this.m_JwB * wB - this.m_JwD * wD);\n            var impulse = -this.m_mass * Cdot; // float\n            this.m_impulse += impulse;\n            vA.addMul(this.m_mA * impulse, this.m_JvAC);\n            wA += this.m_iA * impulse * this.m_JwA;\n            vB.addMul(this.m_mB * impulse, this.m_JvBD);\n            wB += this.m_iB * impulse * this.m_JwB;\n            vC.subMul(this.m_mC * impulse, this.m_JvAC);\n            wC -= this.m_iC * impulse * this.m_JwC;\n            vD.subMul(this.m_mD * impulse, this.m_JvBD);\n            wD -= this.m_iD * impulse * this.m_JwD;\n            this.m_bodyA.c_velocity.v.setVec2(vA);\n            this.m_bodyA.c_velocity.w = wA;\n            this.m_bodyB.c_velocity.v.setVec2(vB);\n            this.m_bodyB.c_velocity.w = wB;\n            this.m_bodyC.c_velocity.v.setVec2(vC);\n            this.m_bodyC.c_velocity.w = wC;\n            this.m_bodyD.c_velocity.v.setVec2(vD);\n            this.m_bodyD.c_velocity.w = wD;\n        };\n        /**\n         * This returns true if the position errors are within tolerance.\n         */\n        GearJoint.prototype.solvePositionConstraints = function (step) {\n            var cA = this.m_bodyA.c_position.c;\n            var aA = this.m_bodyA.c_position.a;\n            var cB = this.m_bodyB.c_position.c;\n            var aB = this.m_bodyB.c_position.a;\n            var cC = this.m_bodyC.c_position.c;\n            var aC = this.m_bodyC.c_position.a;\n            var cD = this.m_bodyD.c_position.c;\n            var aD = this.m_bodyD.c_position.a;\n            var qA = Rot.neo(aA);\n            var qB = Rot.neo(aB);\n            var qC = Rot.neo(aC);\n            var qD = Rot.neo(aD);\n            var linearError = 0.0;\n            var coordinateA;\n            var coordinateB;\n            var JvAC;\n            var JvBD;\n            var JwA;\n            var JwB;\n            var JwC;\n            var JwD;\n            var mass = 0.0;\n            if (this.m_type1 == RevoluteJoint.TYPE) {\n                JvAC = Vec2.zero();\n                JwA = 1.0;\n                JwC = 1.0;\n                mass += this.m_iA + this.m_iC;\n                coordinateA = aA - aC - this.m_referenceAngleA;\n            }\n            else {\n                var u = Rot.mulVec2(qC, this.m_localAxisC); // Vec2\n                var rC = Rot.mulSub(qC, this.m_localAnchorC, this.m_lcC); // Vec2\n                var rA = Rot.mulSub(qA, this.m_localAnchorA, this.m_lcA); // Vec2\n                JvAC = u;\n                JwC = Vec2.crossVec2Vec2(rC, u);\n                JwA = Vec2.crossVec2Vec2(rA, u);\n                mass += this.m_mC + this.m_mA + this.m_iC * JwC * JwC + this.m_iA * JwA * JwA;\n                var pC = Vec2.sub(this.m_localAnchorC, this.m_lcC); // Vec2\n                var pA = Rot.mulTVec2(qC, Vec2.add(rA, Vec2.sub(cA, cC))); // Vec2\n                coordinateA = Vec2.dot(Vec2.sub(pA, pC), this.m_localAxisC);\n            }\n            if (this.m_type2 == RevoluteJoint.TYPE) {\n                JvBD = Vec2.zero();\n                JwB = this.m_ratio;\n                JwD = this.m_ratio;\n                mass += this.m_ratio * this.m_ratio * (this.m_iB + this.m_iD);\n                coordinateB = aB - aD - this.m_referenceAngleB;\n            }\n            else {\n                var u = Rot.mulVec2(qD, this.m_localAxisD);\n                var rD = Rot.mulSub(qD, this.m_localAnchorD, this.m_lcD);\n                var rB = Rot.mulSub(qB, this.m_localAnchorB, this.m_lcB);\n                JvBD = Vec2.mulNumVec2(this.m_ratio, u);\n                JwD = this.m_ratio * Vec2.crossVec2Vec2(rD, u);\n                JwB = this.m_ratio * Vec2.crossVec2Vec2(rB, u);\n                mass += this.m_ratio * this.m_ratio * (this.m_mD + this.m_mB) + this.m_iD\n                    * JwD * JwD + this.m_iB * JwB * JwB;\n                var pD = Vec2.sub(this.m_localAnchorD, this.m_lcD); // Vec2\n                var pB = Rot.mulTVec2(qD, Vec2.add(rB, Vec2.sub(cB, cD))); // Vec2\n                coordinateB = Vec2.dot(pB, this.m_localAxisD)\n                    - Vec2.dot(pD, this.m_localAxisD);\n            }\n            var C = (coordinateA + this.m_ratio * coordinateB) - this.m_constant; // float\n            var impulse = 0.0; // float\n            if (mass > 0.0) {\n                impulse = -C / mass;\n            }\n            cA.addMul(this.m_mA * impulse, JvAC);\n            aA += this.m_iA * impulse * JwA;\n            cB.addMul(this.m_mB * impulse, JvBD);\n            aB += this.m_iB * impulse * JwB;\n            cC.subMul(this.m_mC * impulse, JvAC);\n            aC -= this.m_iC * impulse * JwC;\n            cD.subMul(this.m_mD * impulse, JvBD);\n            aD -= this.m_iD * impulse * JwD;\n            this.m_bodyA.c_position.c.setVec2(cA);\n            this.m_bodyA.c_position.a = aA;\n            this.m_bodyB.c_position.c.setVec2(cB);\n            this.m_bodyB.c_position.a = aB;\n            this.m_bodyC.c_position.c.setVec2(cC);\n            this.m_bodyC.c_position.a = aC;\n            this.m_bodyD.c_position.c.setVec2(cD);\n            this.m_bodyD.c_position.a = aD;\n            // TODO_ERIN not implemented\n            return linearError < Settings.linearSlop;\n        };\n        GearJoint.TYPE = 'gear-joint';\n        return GearJoint;\n    }(Joint));\n\n    /*\n     * Planck.js\n     * The MIT License\n     * Copyright (c) 2021 Erin Catto, Ali Shakiba\n     *\n     * Permission is hereby granted, free of charge, to any person obtaining a copy\n     * of this software and associated documentation files (the \"Software\"), to deal\n     * in the Software without restriction, including without limitation the rights\n     * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n     * copies of the Software, and to permit persons to whom the Software is\n     * furnished to do so, subject to the following conditions:\n     *\n     * The above copyright notice and this permission notice shall be included in all\n     * copies or substantial portions of the Software.\n     *\n     * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n     * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n     * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n     * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n     * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n     * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n     * SOFTWARE.\n     */\n    var DEFAULTS$5 = {\n        maxForce: 1.0,\n        maxTorque: 1.0,\n        correctionFactor: 0.3\n    };\n    /**\n     * A motor joint is used to control the relative motion between two bodies. A\n     * typical usage is to control the movement of a dynamic body with respect to\n     * the ground.\n     */\n    var MotorJoint = /** @class */ (function (_super) {\n        __extends(MotorJoint, _super);\n        function MotorJoint(def, bodyA, bodyB) {\n            var _this = this;\n            // @ts-ignore\n            if (!(_this instanceof MotorJoint)) {\n                return new MotorJoint(def, bodyA, bodyB);\n            }\n            def = options(def, DEFAULTS$5);\n            _this = _super.call(this, def, bodyA, bodyB) || this;\n            bodyA = _this.m_bodyA;\n            bodyB = _this.m_bodyB;\n            _this.m_type = MotorJoint.TYPE;\n            _this.m_linearOffset = math$1.isFinite(def.linearOffset) ? def.linearOffset : bodyA.getLocalPoint(bodyB.getPosition());\n            _this.m_angularOffset = math$1.isFinite(def.angularOffset) ? def.angularOffset : bodyB.getAngle() - bodyA.getAngle();\n            _this.m_linearImpulse = Vec2.zero();\n            _this.m_angularImpulse = 0.0;\n            _this.m_maxForce = def.maxForce;\n            _this.m_maxTorque = def.maxTorque;\n            _this.m_correctionFactor = def.correctionFactor;\n            return _this;\n            // Point-to-point constraint\n            // Cdot = v2 - v1\n            // = v2 + cross(w2, r2) - v1 - cross(w1, r1)\n            // J = [-I -r1_skew I r2_skew ]\n            // Identity used:\n            // w k % (rx i + ry j) = w * (-ry i + rx j)\n            // Angle constraint\n            // Cdot = w2 - w1\n            // J = [0 0 -1 0 0 1]\n            // K = invI1 + invI2\n        }\n        /** @internal */\n        MotorJoint.prototype._serialize = function () {\n            return {\n                type: this.m_type,\n                bodyA: this.m_bodyA,\n                bodyB: this.m_bodyB,\n                collideConnected: this.m_collideConnected,\n                maxForce: this.m_maxForce,\n                maxTorque: this.m_maxTorque,\n                correctionFactor: this.m_correctionFactor,\n                linearOffset: this.m_linearOffset,\n                angularOffset: this.m_angularOffset,\n            };\n        };\n        /** @internal */\n        MotorJoint._deserialize = function (data, world, restore) {\n            data = __assign({}, data);\n            data.bodyA = restore(Body, data.bodyA, world);\n            data.bodyB = restore(Body, data.bodyB, world);\n            var joint = new MotorJoint(data);\n            return joint;\n        };\n        /** @internal */\n        MotorJoint.prototype._setAnchors = function (def) {\n        };\n        /**\n         * Set the maximum friction force in N.\n         */\n        MotorJoint.prototype.setMaxForce = function (force) {\n            this.m_maxForce = force;\n        };\n        /**\n         * Get the maximum friction force in N.\n         */\n        MotorJoint.prototype.getMaxForce = function () {\n            return this.m_maxForce;\n        };\n        /**\n         * Set the maximum friction torque in N*m.\n         */\n        MotorJoint.prototype.setMaxTorque = function (torque) {\n            this.m_maxTorque = torque;\n        };\n        /**\n         * Get the maximum friction torque in N*m.\n         */\n        MotorJoint.prototype.getMaxTorque = function () {\n            return this.m_maxTorque;\n        };\n        /**\n         * Set the position correction factor in the range [0,1].\n         */\n        MotorJoint.prototype.setCorrectionFactor = function (factor) {\n            this.m_correctionFactor = factor;\n        };\n        /**\n         * Get the position correction factor in the range [0,1].\n         */\n        MotorJoint.prototype.getCorrectionFactor = function () {\n            return this.m_correctionFactor;\n        };\n        /**\n         * Set/get the target linear offset, in frame A, in meters.\n         */\n        MotorJoint.prototype.setLinearOffset = function (linearOffset) {\n            if (linearOffset.x != this.m_linearOffset.x\n                || linearOffset.y != this.m_linearOffset.y) {\n                this.m_bodyA.setAwake(true);\n                this.m_bodyB.setAwake(true);\n                this.m_linearOffset = linearOffset;\n            }\n        };\n        MotorJoint.prototype.getLinearOffset = function () {\n            return this.m_linearOffset;\n        };\n        /**\n         * Set/get the target angular offset, in radians.\n         */\n        MotorJoint.prototype.setAngularOffset = function (angularOffset) {\n            if (angularOffset != this.m_angularOffset) {\n                this.m_bodyA.setAwake(true);\n                this.m_bodyB.setAwake(true);\n                this.m_angularOffset = angularOffset;\n            }\n        };\n        MotorJoint.prototype.getAngularOffset = function () {\n            return this.m_angularOffset;\n        };\n        /**\n         * Get the anchor point on bodyA in world coordinates.\n         */\n        MotorJoint.prototype.getAnchorA = function () {\n            return this.m_bodyA.getPosition();\n        };\n        /**\n         * Get the anchor point on bodyB in world coordinates.\n         */\n        MotorJoint.prototype.getAnchorB = function () {\n            return this.m_bodyB.getPosition();\n        };\n        /**\n         * Get the reaction force on bodyB at the joint anchor in Newtons.\n         */\n        MotorJoint.prototype.getReactionForce = function (inv_dt) {\n            return Vec2.mulNumVec2(inv_dt, this.m_linearImpulse);\n        };\n        /**\n         * Get the reaction torque on bodyB in N*m.\n         */\n        MotorJoint.prototype.getReactionTorque = function (inv_dt) {\n            return inv_dt * this.m_angularImpulse;\n        };\n        MotorJoint.prototype.initVelocityConstraints = function (step) {\n            this.m_localCenterA = this.m_bodyA.m_sweep.localCenter;\n            this.m_localCenterB = this.m_bodyB.m_sweep.localCenter;\n            this.m_invMassA = this.m_bodyA.m_invMass;\n            this.m_invMassB = this.m_bodyB.m_invMass;\n            this.m_invIA = this.m_bodyA.m_invI;\n            this.m_invIB = this.m_bodyB.m_invI;\n            var cA = this.m_bodyA.c_position.c;\n            var aA = this.m_bodyA.c_position.a;\n            var vA = this.m_bodyA.c_velocity.v;\n            var wA = this.m_bodyA.c_velocity.w;\n            var cB = this.m_bodyB.c_position.c;\n            var aB = this.m_bodyB.c_position.a;\n            var vB = this.m_bodyB.c_velocity.v;\n            var wB = this.m_bodyB.c_velocity.w;\n            var qA = Rot.neo(aA);\n            var qB = Rot.neo(aB);\n            // Compute the effective mass matrix.\n            this.m_rA = Rot.mulVec2(qA, Vec2.neg(this.m_localCenterA));\n            this.m_rB = Rot.mulVec2(qB, Vec2.neg(this.m_localCenterB));\n            // J = [-I -r1_skew I r2_skew]\n            // [ 0 -1 0 1]\n            // r_skew = [-ry; rx]\n            // Matlab\n            // K = [ mA+r1y^2*iA+mB+r2y^2*iB, -r1y*iA*r1x-r2y*iB*r2x, -r1y*iA-r2y*iB]\n            // [ -r1y*iA*r1x-r2y*iB*r2x, mA+r1x^2*iA+mB+r2x^2*iB, r1x*iA+r2x*iB]\n            // [ -r1y*iA-r2y*iB, r1x*iA+r2x*iB, iA+iB]\n            var mA = this.m_invMassA;\n            var mB = this.m_invMassB;\n            var iA = this.m_invIA;\n            var iB = this.m_invIB;\n            var K = new Mat22();\n            K.ex.x = mA + mB + iA * this.m_rA.y * this.m_rA.y + iB * this.m_rB.y * this.m_rB.y;\n            K.ex.y = -iA * this.m_rA.x * this.m_rA.y - iB * this.m_rB.x * this.m_rB.y;\n            K.ey.x = K.ex.y;\n            K.ey.y = mA + mB + iA * this.m_rA.x * this.m_rA.x + iB * this.m_rB.x * this.m_rB.x;\n            this.m_linearMass = K.getInverse();\n            this.m_angularMass = iA + iB;\n            if (this.m_angularMass > 0.0) {\n                this.m_angularMass = 1.0 / this.m_angularMass;\n            }\n            this.m_linearError = Vec2.zero();\n            this.m_linearError.addCombine(1, cB, 1, this.m_rB);\n            this.m_linearError.subCombine(1, cA, 1, this.m_rA);\n            this.m_linearError.sub(Rot.mulVec2(qA, this.m_linearOffset));\n            this.m_angularError = aB - aA - this.m_angularOffset;\n            if (step.warmStarting) {\n                // Scale impulses to support a variable time step.\n                this.m_linearImpulse.mul(step.dtRatio);\n                this.m_angularImpulse *= step.dtRatio;\n                var P = Vec2.neo(this.m_linearImpulse.x, this.m_linearImpulse.y);\n                vA.subMul(mA, P);\n                wA -= iA * (Vec2.crossVec2Vec2(this.m_rA, P) + this.m_angularImpulse);\n                vB.addMul(mB, P);\n                wB += iB * (Vec2.crossVec2Vec2(this.m_rB, P) + this.m_angularImpulse);\n            }\n            else {\n                this.m_linearImpulse.setZero();\n                this.m_angularImpulse = 0.0;\n            }\n            this.m_bodyA.c_velocity.v = vA;\n            this.m_bodyA.c_velocity.w = wA;\n            this.m_bodyB.c_velocity.v = vB;\n            this.m_bodyB.c_velocity.w = wB;\n        };\n        MotorJoint.prototype.solveVelocityConstraints = function (step) {\n            var vA = this.m_bodyA.c_velocity.v;\n            var wA = this.m_bodyA.c_velocity.w;\n            var vB = this.m_bodyB.c_velocity.v;\n            var wB = this.m_bodyB.c_velocity.w;\n            var mA = this.m_invMassA;\n            var mB = this.m_invMassB;\n            var iA = this.m_invIA;\n            var iB = this.m_invIB;\n            var h = step.dt;\n            var inv_h = step.inv_dt;\n            // Solve angular friction\n            {\n                var Cdot = wB - wA + inv_h * this.m_correctionFactor * this.m_angularError;\n                var impulse = -this.m_angularMass * Cdot;\n                var oldImpulse = this.m_angularImpulse;\n                var maxImpulse = h * this.m_maxTorque;\n                this.m_angularImpulse = math$1.clamp(this.m_angularImpulse + impulse, -maxImpulse, maxImpulse);\n                impulse = this.m_angularImpulse - oldImpulse;\n                wA -= iA * impulse;\n                wB += iB * impulse;\n            }\n            // Solve linear friction\n            {\n                var Cdot = Vec2.zero();\n                Cdot.addCombine(1, vB, 1, Vec2.crossNumVec2(wB, this.m_rB));\n                Cdot.subCombine(1, vA, 1, Vec2.crossNumVec2(wA, this.m_rA));\n                Cdot.addMul(inv_h * this.m_correctionFactor, this.m_linearError);\n                var impulse = Vec2.neg(Mat22.mulVec2(this.m_linearMass, Cdot));\n                var oldImpulse = Vec2.clone(this.m_linearImpulse);\n                this.m_linearImpulse.add(impulse);\n                var maxImpulse = h * this.m_maxForce;\n                this.m_linearImpulse.clamp(maxImpulse);\n                impulse = Vec2.sub(this.m_linearImpulse, oldImpulse);\n                vA.subMul(mA, impulse);\n                wA -= iA * Vec2.crossVec2Vec2(this.m_rA, impulse);\n                vB.addMul(mB, impulse);\n                wB += iB * Vec2.crossVec2Vec2(this.m_rB, impulse);\n            }\n            this.m_bodyA.c_velocity.v = vA;\n            this.m_bodyA.c_velocity.w = wA;\n            this.m_bodyB.c_velocity.v = vB;\n            this.m_bodyB.c_velocity.w = wB;\n        };\n        /**\n         * This returns true if the position errors are within tolerance.\n         */\n        MotorJoint.prototype.solvePositionConstraints = function (step) {\n            return true;\n        };\n        MotorJoint.TYPE = 'motor-joint';\n        return MotorJoint;\n    }(Joint));\n\n    /*\n     * Planck.js\n     * The MIT License\n     * Copyright (c) 2021 Erin Catto, Ali Shakiba\n     *\n     * Permission is hereby granted, free of charge, to any person obtaining a copy\n     * of this software and associated documentation files (the \"Software\"), to deal\n     * in the Software without restriction, including without limitation the rights\n     * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n     * copies of the Software, and to permit persons to whom the Software is\n     * furnished to do so, subject to the following conditions:\n     *\n     * The above copyright notice and this permission notice shall be included in all\n     * copies or substantial portions of the Software.\n     *\n     * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n     * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n     * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n     * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n     * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n     * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n     * SOFTWARE.\n     */\n    var DEFAULTS$4 = {\n        maxForce: 0.0,\n        frequencyHz: 5.0,\n        dampingRatio: 0.7\n    };\n    /**\n     * A mouse joint is used to make a point on a body track a specified world\n     * point. This a soft constraint with a maximum force. This allows the\n     * constraint to stretch and without applying huge forces.\n     *\n     * NOTE: this joint is not documented in the manual because it was developed to\n     * be used in the testbed. If you want to learn how to use the mouse joint, look\n     * at the testbed.\n     */\n    var MouseJoint = /** @class */ (function (_super) {\n        __extends(MouseJoint, _super);\n        function MouseJoint(def, bodyA, bodyB, target) {\n            var _this = this;\n            // @ts-ignore\n            if (!(_this instanceof MouseJoint)) {\n                return new MouseJoint(def, bodyA, bodyB, target);\n            }\n            def = options(def, DEFAULTS$4);\n            _this = _super.call(this, def, bodyA, bodyB) || this;\n            bodyA = _this.m_bodyA;\n            bodyB = _this.m_bodyB;\n            _this.m_type = MouseJoint.TYPE;\n            _this.m_targetA = target ? Vec2.clone(target) : def.target || Vec2.zero();\n            _this.m_localAnchorB = Transform.mulTVec2(bodyB.getTransform(), _this.m_targetA);\n            _this.m_maxForce = def.maxForce;\n            _this.m_impulse = Vec2.zero();\n            _this.m_frequencyHz = def.frequencyHz;\n            _this.m_dampingRatio = def.dampingRatio;\n            _this.m_beta = 0.0;\n            _this.m_gamma = 0.0;\n            // Solver temp\n            _this.m_rB = Vec2.zero();\n            _this.m_localCenterB = Vec2.zero();\n            _this.m_invMassB = 0.0;\n            _this.m_invIB = 0.0;\n            _this.m_mass = new Mat22();\n            _this.m_C = Vec2.zero();\n            return _this;\n            // p = attached point, m = mouse point\n            // C = p - m\n            // Cdot = v\n            // = v + cross(w, r)\n            // J = [I r_skew]\n            // Identity used:\n            // w k % (rx i + ry j) = w * (-ry i + rx j)\n        }\n        /** @internal */\n        MouseJoint.prototype._serialize = function () {\n            return {\n                type: this.m_type,\n                bodyA: this.m_bodyA,\n                bodyB: this.m_bodyB,\n                collideConnected: this.m_collideConnected,\n                target: this.m_targetA,\n                maxForce: this.m_maxForce,\n                frequencyHz: this.m_frequencyHz,\n                dampingRatio: this.m_dampingRatio,\n                _localAnchorB: this.m_localAnchorB,\n            };\n        };\n        /** @internal */\n        MouseJoint._deserialize = function (data, world, restore) {\n            data = __assign({}, data);\n            data.bodyA = restore(Body, data.bodyA, world);\n            data.bodyB = restore(Body, data.bodyB, world);\n            data.target = Vec2.clone(data.target);\n            var joint = new MouseJoint(data);\n            if (data._localAnchorB) {\n                joint.m_localAnchorB = data._localAnchorB;\n            }\n            return joint;\n        };\n        /**\n         * Use this to update the target point.\n         */\n        MouseJoint.prototype.setTarget = function (target) {\n            if (this.m_bodyB.isAwake() == false) {\n                this.m_bodyB.setAwake(true);\n            }\n            this.m_targetA = Vec2.clone(target);\n        };\n        MouseJoint.prototype.getTarget = function () {\n            return this.m_targetA;\n        };\n        /**\n         * Set the maximum force in Newtons.\n         */\n        MouseJoint.prototype.setMaxForce = function (force) {\n            this.m_maxForce = force;\n        };\n        /**\n         * Get the maximum force in Newtons.\n         */\n        MouseJoint.prototype.getMaxForce = function () {\n            return this.m_maxForce;\n        };\n        /**\n         * Set the frequency in Hertz.\n         */\n        MouseJoint.prototype.setFrequency = function (hz) {\n            this.m_frequencyHz = hz;\n        };\n        /**\n         * Get the frequency in Hertz.\n         */\n        MouseJoint.prototype.getFrequency = function () {\n            return this.m_frequencyHz;\n        };\n        /**\n         * Set the damping ratio (dimensionless).\n         */\n        MouseJoint.prototype.setDampingRatio = function (ratio) {\n            this.m_dampingRatio = ratio;\n        };\n        /**\n         * Get the damping ratio (dimensionless).\n         */\n        MouseJoint.prototype.getDampingRatio = function () {\n            return this.m_dampingRatio;\n        };\n        /**\n         * Get the anchor point on bodyA in world coordinates.\n         */\n        MouseJoint.prototype.getAnchorA = function () {\n            return Vec2.clone(this.m_targetA);\n        };\n        /**\n         * Get the anchor point on bodyB in world coordinates.\n         */\n        MouseJoint.prototype.getAnchorB = function () {\n            return this.m_bodyB.getWorldPoint(this.m_localAnchorB);\n        };\n        /**\n         * Get the reaction force on bodyB at the joint anchor in Newtons.\n         */\n        MouseJoint.prototype.getReactionForce = function (inv_dt) {\n            return Vec2.mulNumVec2(inv_dt, this.m_impulse);\n        };\n        /**\n         * Get the reaction torque on bodyB in N*m.\n         */\n        MouseJoint.prototype.getReactionTorque = function (inv_dt) {\n            return inv_dt * 0.0;\n        };\n        /**\n         * Shift the origin for any points stored in world coordinates.\n         */\n        MouseJoint.prototype.shiftOrigin = function (newOrigin) {\n            this.m_targetA.sub(newOrigin);\n        };\n        MouseJoint.prototype.initVelocityConstraints = function (step) {\n            this.m_localCenterB = this.m_bodyB.m_sweep.localCenter;\n            this.m_invMassB = this.m_bodyB.m_invMass;\n            this.m_invIB = this.m_bodyB.m_invI;\n            var position = this.m_bodyB.c_position;\n            var velocity = this.m_bodyB.c_velocity;\n            var cB = position.c;\n            var aB = position.a;\n            var vB = velocity.v;\n            var wB = velocity.w;\n            var qB = Rot.neo(aB);\n            var mass = this.m_bodyB.getMass();\n            // Frequency\n            var omega = 2.0 * math$1.PI * this.m_frequencyHz;\n            // Damping coefficient\n            var d = 2.0 * mass * this.m_dampingRatio * omega;\n            // Spring stiffness\n            var k = mass * (omega * omega);\n            // magic formulas\n            // gamma has units of inverse mass.\n            // beta has units of inverse time.\n            var h = step.dt;\n            this.m_gamma = h * (d + h * k);\n            if (this.m_gamma != 0.0) {\n                this.m_gamma = 1.0 / this.m_gamma;\n            }\n            this.m_beta = h * k * this.m_gamma;\n            // Compute the effective mass matrix.\n            this.m_rB = Rot.mulVec2(qB, Vec2.sub(this.m_localAnchorB, this.m_localCenterB));\n            // K = [(1/m1 + 1/m2) * eye(2) - skew(r1) * invI1 * skew(r1) - skew(r2) *\n            // invI2 * skew(r2)]\n            // = [1/m1+1/m2 0 ] + invI1 * [r1.y*r1.y -r1.x*r1.y] + invI2 * [r1.y*r1.y\n            // -r1.x*r1.y]\n            // [ 0 1/m1+1/m2] [-r1.x*r1.y r1.x*r1.x] [-r1.x*r1.y r1.x*r1.x]\n            var K = new Mat22();\n            K.ex.x = this.m_invMassB + this.m_invIB * this.m_rB.y * this.m_rB.y\n                + this.m_gamma;\n            K.ex.y = -this.m_invIB * this.m_rB.x * this.m_rB.y;\n            K.ey.x = K.ex.y;\n            K.ey.y = this.m_invMassB + this.m_invIB * this.m_rB.x * this.m_rB.x\n                + this.m_gamma;\n            this.m_mass = K.getInverse();\n            this.m_C.setVec2(cB);\n            this.m_C.addCombine(1, this.m_rB, -1, this.m_targetA);\n            this.m_C.mul(this.m_beta);\n            // Cheat with some damping\n            wB *= 0.98;\n            if (step.warmStarting) {\n                this.m_impulse.mul(step.dtRatio);\n                vB.addMul(this.m_invMassB, this.m_impulse);\n                wB += this.m_invIB * Vec2.crossVec2Vec2(this.m_rB, this.m_impulse);\n            }\n            else {\n                this.m_impulse.setZero();\n            }\n            velocity.v.setVec2(vB);\n            velocity.w = wB;\n        };\n        MouseJoint.prototype.solveVelocityConstraints = function (step) {\n            var velocity = this.m_bodyB.c_velocity;\n            var vB = Vec2.clone(velocity.v);\n            var wB = velocity.w;\n            // Cdot = v + cross(w, r)\n            var Cdot = Vec2.crossNumVec2(wB, this.m_rB);\n            Cdot.add(vB);\n            Cdot.addCombine(1, this.m_C, this.m_gamma, this.m_impulse);\n            Cdot.neg();\n            var impulse = Mat22.mulVec2(this.m_mass, Cdot);\n            var oldImpulse = Vec2.clone(this.m_impulse);\n            this.m_impulse.add(impulse);\n            var maxImpulse = step.dt * this.m_maxForce;\n            this.m_impulse.clamp(maxImpulse);\n            impulse = Vec2.sub(this.m_impulse, oldImpulse);\n            vB.addMul(this.m_invMassB, impulse);\n            wB += this.m_invIB * Vec2.crossVec2Vec2(this.m_rB, impulse);\n            velocity.v.setVec2(vB);\n            velocity.w = wB;\n        };\n        /**\n         * This returns true if the position errors are within tolerance.\n         */\n        MouseJoint.prototype.solvePositionConstraints = function (step) {\n            return true;\n        };\n        MouseJoint.TYPE = 'mouse-joint';\n        return MouseJoint;\n    }(Joint));\n\n    /*\n     * Planck.js\n     * The MIT License\n     * Copyright (c) 2021 Erin Catto, Ali Shakiba\n     *\n     * Permission is hereby granted, free of charge, to any person obtaining a copy\n     * of this software and associated documentation files (the \"Software\"), to deal\n     * in the Software without restriction, including without limitation the rights\n     * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n     * copies of the Software, and to permit persons to whom the Software is\n     * furnished to do so, subject to the following conditions:\n     *\n     * The above copyright notice and this permission notice shall be included in all\n     * copies or substantial portions of the Software.\n     *\n     * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n     * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n     * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n     * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n     * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n     * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n     * SOFTWARE.\n     */\n    var DEFAULTS$3 = {\n        collideConnected: true\n    };\n    /**\n     * The pulley joint is connected to two bodies and two fixed ground points. The\n     * pulley supports a ratio such that: length1 + ratio * length2 <= constant\n     *\n     * Yes, the force transmitted is scaled by the ratio.\n     *\n     * Warning: the pulley joint can get a bit squirrelly by itself. They often work\n     * better when combined with prismatic joints. You should also cover the the\n     * anchor points with static shapes to prevent one side from going to zero\n     * length.\n     */\n    var PulleyJoint = /** @class */ (function (_super) {\n        __extends(PulleyJoint, _super);\n        function PulleyJoint(def, bodyA, bodyB, groundA, groundB, anchorA, anchorB, ratio) {\n            var _this = this;\n            // @ts-ignore\n            if (!(_this instanceof PulleyJoint)) {\n                return new PulleyJoint(def, bodyA, bodyB, groundA, groundB, anchorA, anchorB, ratio);\n            }\n            def = options(def, DEFAULTS$3);\n            _this = _super.call(this, def, bodyA, bodyB) || this;\n            bodyA = _this.m_bodyA;\n            bodyB = _this.m_bodyB;\n            _this.m_type = PulleyJoint.TYPE;\n            _this.m_groundAnchorA = groundA ? groundA : def.groundAnchorA || Vec2.neo(-1.0, 1.0);\n            _this.m_groundAnchorB = groundB ? groundB : def.groundAnchorB || Vec2.neo(1.0, 1.0);\n            _this.m_localAnchorA = anchorA ? bodyA.getLocalPoint(anchorA) : def.localAnchorA || Vec2.neo(-1.0, 0.0);\n            _this.m_localAnchorB = anchorB ? bodyB.getLocalPoint(anchorB) : def.localAnchorB || Vec2.neo(1.0, 0.0);\n            _this.m_lengthA = math$1.isFinite(def.lengthA) ? def.lengthA : Vec2.distance(anchorA, groundA);\n            _this.m_lengthB = math$1.isFinite(def.lengthB) ? def.lengthB : Vec2.distance(anchorB, groundB);\n            _this.m_ratio = math$1.isFinite(ratio) ? ratio : def.ratio;\n            _this.m_constant = _this.m_lengthA + _this.m_ratio * _this.m_lengthB;\n            _this.m_impulse = 0.0;\n            return _this;\n            // Pulley:\n            // length1 = norm(p1 - s1)\n            // length2 = norm(p2 - s2)\n            // C0 = (length1 + ratio * length2)_initial\n            // C = C0 - (length1 + ratio * length2)\n            // u1 = (p1 - s1) / norm(p1 - s1)\n            // u2 = (p2 - s2) / norm(p2 - s2)\n            // Cdot = -dot(u1, v1 + cross(w1, r1)) - ratio * dot(u2, v2 + cross(w2, r2))\n            // J = -[u1 cross(r1, u1) ratio * u2 ratio * cross(r2, u2)]\n            // K = J * invM * JT\n            // = invMass1 + invI1 * cross(r1, u1)^2 + ratio^2 * (invMass2 + invI2 *\n            // cross(r2, u2)^2)\n        }\n        PulleyJoint.prototype._serialize = function () {\n            return {\n                type: this.m_type,\n                bodyA: this.m_bodyA,\n                bodyB: this.m_bodyB,\n                collideConnected: this.m_collideConnected,\n                groundAnchorA: this.m_groundAnchorA,\n                groundAnchorB: this.m_groundAnchorB,\n                localAnchorA: this.m_localAnchorA,\n                localAnchorB: this.m_localAnchorB,\n                lengthA: this.m_lengthA,\n                lengthB: this.m_lengthB,\n                ratio: this.m_ratio,\n            };\n        };\n        /** @internal */\n        PulleyJoint._deserialize = function (data, world, restore) {\n            data = __assign({}, data);\n            data.bodyA = restore(Body, data.bodyA, world);\n            data.bodyB = restore(Body, data.bodyB, world);\n            var joint = new PulleyJoint(data);\n            return joint;\n        };\n        /**\n         * Get the first ground anchor.\n         */\n        PulleyJoint.prototype.getGroundAnchorA = function () {\n            return this.m_groundAnchorA;\n        };\n        /**\n         * Get the second ground anchor.\n         */\n        PulleyJoint.prototype.getGroundAnchorB = function () {\n            return this.m_groundAnchorB;\n        };\n        /**\n         * Get the current length of the segment attached to bodyA.\n         */\n        PulleyJoint.prototype.getLengthA = function () {\n            return this.m_lengthA;\n        };\n        /**\n         * Get the current length of the segment attached to bodyB.\n         */\n        PulleyJoint.prototype.getLengthB = function () {\n            return this.m_lengthB;\n        };\n        /**\n         * Get the pulley ratio.\n         */\n        PulleyJoint.prototype.getRatio = function () {\n            return this.m_ratio;\n        };\n        /**\n         * Get the current length of the segment attached to bodyA.\n         */\n        PulleyJoint.prototype.getCurrentLengthA = function () {\n            var p = this.m_bodyA.getWorldPoint(this.m_localAnchorA);\n            var s = this.m_groundAnchorA;\n            return Vec2.distance(p, s);\n        };\n        /**\n         * Get the current length of the segment attached to bodyB.\n         */\n        PulleyJoint.prototype.getCurrentLengthB = function () {\n            var p = this.m_bodyB.getWorldPoint(this.m_localAnchorB);\n            var s = this.m_groundAnchorB;\n            return Vec2.distance(p, s);\n        };\n        /**\n         * Shift the origin for any points stored in world coordinates.\n         *\n         * @param newOrigin\n         */\n        PulleyJoint.prototype.shiftOrigin = function (newOrigin) {\n            this.m_groundAnchorA.sub(newOrigin);\n            this.m_groundAnchorB.sub(newOrigin);\n        };\n        /**\n         * Get the anchor point on bodyA in world coordinates.\n         */\n        PulleyJoint.prototype.getAnchorA = function () {\n            return this.m_bodyA.getWorldPoint(this.m_localAnchorA);\n        };\n        /**\n         * Get the anchor point on bodyB in world coordinates.\n         */\n        PulleyJoint.prototype.getAnchorB = function () {\n            return this.m_bodyB.getWorldPoint(this.m_localAnchorB);\n        };\n        /**\n         * Get the reaction force on bodyB at the joint anchor in Newtons.\n         */\n        PulleyJoint.prototype.getReactionForce = function (inv_dt) {\n            return Vec2.mulNumVec2(this.m_impulse, this.m_uB).mul(inv_dt);\n        };\n        /**\n         * Get the reaction torque on bodyB in N*m.\n         */\n        PulleyJoint.prototype.getReactionTorque = function (inv_dt) {\n            return 0.0;\n        };\n        PulleyJoint.prototype.initVelocityConstraints = function (step) {\n            this.m_localCenterA = this.m_bodyA.m_sweep.localCenter;\n            this.m_localCenterB = this.m_bodyB.m_sweep.localCenter;\n            this.m_invMassA = this.m_bodyA.m_invMass;\n            this.m_invMassB = this.m_bodyB.m_invMass;\n            this.m_invIA = this.m_bodyA.m_invI;\n            this.m_invIB = this.m_bodyB.m_invI;\n            var cA = this.m_bodyA.c_position.c;\n            var aA = this.m_bodyA.c_position.a;\n            var vA = this.m_bodyA.c_velocity.v;\n            var wA = this.m_bodyA.c_velocity.w;\n            var cB = this.m_bodyB.c_position.c;\n            var aB = this.m_bodyB.c_position.a;\n            var vB = this.m_bodyB.c_velocity.v;\n            var wB = this.m_bodyB.c_velocity.w;\n            var qA = Rot.neo(aA);\n            var qB = Rot.neo(aB);\n            this.m_rA = Rot.mulVec2(qA, Vec2.sub(this.m_localAnchorA, this.m_localCenterA));\n            this.m_rB = Rot.mulVec2(qB, Vec2.sub(this.m_localAnchorB, this.m_localCenterB));\n            // Get the pulley axes.\n            this.m_uA = Vec2.sub(Vec2.add(cA, this.m_rA), this.m_groundAnchorA);\n            this.m_uB = Vec2.sub(Vec2.add(cB, this.m_rB), this.m_groundAnchorB);\n            var lengthA = this.m_uA.length();\n            var lengthB = this.m_uB.length();\n            if (lengthA > 10.0 * Settings.linearSlop) {\n                this.m_uA.mul(1.0 / lengthA);\n            }\n            else {\n                this.m_uA.setZero();\n            }\n            if (lengthB > 10.0 * Settings.linearSlop) {\n                this.m_uB.mul(1.0 / lengthB);\n            }\n            else {\n                this.m_uB.setZero();\n            }\n            // Compute effective mass.\n            var ruA = Vec2.crossVec2Vec2(this.m_rA, this.m_uA); // float\n            var ruB = Vec2.crossVec2Vec2(this.m_rB, this.m_uB); // float\n            var mA = this.m_invMassA + this.m_invIA * ruA * ruA; // float\n            var mB = this.m_invMassB + this.m_invIB * ruB * ruB; // float\n            this.m_mass = mA + this.m_ratio * this.m_ratio * mB;\n            if (this.m_mass > 0.0) {\n                this.m_mass = 1.0 / this.m_mass;\n            }\n            if (step.warmStarting) {\n                // Scale impulses to support variable time steps.\n                this.m_impulse *= step.dtRatio;\n                // Warm starting.\n                var PA = Vec2.mulNumVec2(-this.m_impulse, this.m_uA);\n                var PB = Vec2.mulNumVec2(-this.m_ratio * this.m_impulse, this.m_uB);\n                vA.addMul(this.m_invMassA, PA);\n                wA += this.m_invIA * Vec2.crossVec2Vec2(this.m_rA, PA);\n                vB.addMul(this.m_invMassB, PB);\n                wB += this.m_invIB * Vec2.crossVec2Vec2(this.m_rB, PB);\n            }\n            else {\n                this.m_impulse = 0.0;\n            }\n            this.m_bodyA.c_velocity.v = vA;\n            this.m_bodyA.c_velocity.w = wA;\n            this.m_bodyB.c_velocity.v = vB;\n            this.m_bodyB.c_velocity.w = wB;\n        };\n        PulleyJoint.prototype.solveVelocityConstraints = function (step) {\n            var vA = this.m_bodyA.c_velocity.v;\n            var wA = this.m_bodyA.c_velocity.w;\n            var vB = this.m_bodyB.c_velocity.v;\n            var wB = this.m_bodyB.c_velocity.w;\n            var vpA = Vec2.add(vA, Vec2.crossNumVec2(wA, this.m_rA));\n            var vpB = Vec2.add(vB, Vec2.crossNumVec2(wB, this.m_rB));\n            var Cdot = -Vec2.dot(this.m_uA, vpA) - this.m_ratio\n                * Vec2.dot(this.m_uB, vpB); // float\n            var impulse = -this.m_mass * Cdot; // float\n            this.m_impulse += impulse;\n            var PA = Vec2.mulNumVec2(-impulse, this.m_uA); // Vec2\n            var PB = Vec2.mulNumVec2(-this.m_ratio * impulse, this.m_uB); // Vec2\n            vA.addMul(this.m_invMassA, PA);\n            wA += this.m_invIA * Vec2.crossVec2Vec2(this.m_rA, PA);\n            vB.addMul(this.m_invMassB, PB);\n            wB += this.m_invIB * Vec2.crossVec2Vec2(this.m_rB, PB);\n            this.m_bodyA.c_velocity.v = vA;\n            this.m_bodyA.c_velocity.w = wA;\n            this.m_bodyB.c_velocity.v = vB;\n            this.m_bodyB.c_velocity.w = wB;\n        };\n        /**\n         * This returns true if the position errors are within tolerance.\n         */\n        PulleyJoint.prototype.solvePositionConstraints = function (step) {\n            var cA = this.m_bodyA.c_position.c;\n            var aA = this.m_bodyA.c_position.a;\n            var cB = this.m_bodyB.c_position.c;\n            var aB = this.m_bodyB.c_position.a;\n            var qA = Rot.neo(aA);\n            var qB = Rot.neo(aB);\n            var rA = Rot.mulVec2(qA, Vec2.sub(this.m_localAnchorA, this.m_localCenterA));\n            var rB = Rot.mulVec2(qB, Vec2.sub(this.m_localAnchorB, this.m_localCenterB));\n            // Get the pulley axes.\n            var uA = Vec2.sub(Vec2.add(cA, this.m_rA), this.m_groundAnchorA);\n            var uB = Vec2.sub(Vec2.add(cB, this.m_rB), this.m_groundAnchorB);\n            var lengthA = uA.length();\n            var lengthB = uB.length();\n            if (lengthA > 10.0 * Settings.linearSlop) {\n                uA.mul(1.0 / lengthA);\n            }\n            else {\n                uA.setZero();\n            }\n            if (lengthB > 10.0 * Settings.linearSlop) {\n                uB.mul(1.0 / lengthB);\n            }\n            else {\n                uB.setZero();\n            }\n            // Compute effective mass.\n            var ruA = Vec2.crossVec2Vec2(rA, uA);\n            var ruB = Vec2.crossVec2Vec2(rB, uB);\n            var mA = this.m_invMassA + this.m_invIA * ruA * ruA; // float\n            var mB = this.m_invMassB + this.m_invIB * ruB * ruB; // float\n            var mass = mA + this.m_ratio * this.m_ratio * mB; // float\n            if (mass > 0.0) {\n                mass = 1.0 / mass;\n            }\n            var C = this.m_constant - lengthA - this.m_ratio * lengthB; // float\n            var linearError = math$1.abs(C); // float\n            var impulse = -mass * C; // float\n            var PA = Vec2.mulNumVec2(-impulse, uA); // Vec2\n            var PB = Vec2.mulNumVec2(-this.m_ratio * impulse, uB); // Vec2\n            cA.addMul(this.m_invMassA, PA);\n            aA += this.m_invIA * Vec2.crossVec2Vec2(rA, PA);\n            cB.addMul(this.m_invMassB, PB);\n            aB += this.m_invIB * Vec2.crossVec2Vec2(rB, PB);\n            this.m_bodyA.c_position.c = cA;\n            this.m_bodyA.c_position.a = aA;\n            this.m_bodyB.c_position.c = cB;\n            this.m_bodyB.c_position.a = aB;\n            return linearError < Settings.linearSlop;\n        };\n        PulleyJoint.TYPE = 'pulley-joint';\n        return PulleyJoint;\n    }(Joint));\n\n    /*\n     * Planck.js\n     * The MIT License\n     * Copyright (c) 2021 Erin Catto, Ali Shakiba\n     *\n     * Permission is hereby granted, free of charge, to any person obtaining a copy\n     * of this software and associated documentation files (the \"Software\"), to deal\n     * in the Software without restriction, including without limitation the rights\n     * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n     * copies of the Software, and to permit persons to whom the Software is\n     * furnished to do so, subject to the following conditions:\n     *\n     * The above copyright notice and this permission notice shall be included in all\n     * copies or substantial portions of the Software.\n     *\n     * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n     * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n     * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n     * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n     * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n     * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n     * SOFTWARE.\n     */\n    var inactiveLimit = 0;\n    var atUpperLimit = 2;\n    var DEFAULTS$2 = {\n        maxLength: 0.0,\n    };\n    /**\n     * A rope joint enforces a maximum distance between two points on two bodies. It\n     * has no other effect.\n     *\n     * Warning: if you attempt to change the maximum length during the simulation\n     * you will get some non-physical behavior.\n     *\n     * A model that would allow you to dynamically modify the length would have some\n     * sponginess, so I chose not to implement it that way. See {@link DistanceJoint} if you\n     * want to dynamically control length.\n     */\n    var RopeJoint = /** @class */ (function (_super) {\n        __extends(RopeJoint, _super);\n        function RopeJoint(def, bodyA, bodyB, anchor) {\n            var _this = this;\n            // @ts-ignore\n            if (!(_this instanceof RopeJoint)) {\n                return new RopeJoint(def, bodyA, bodyB, anchor);\n            }\n            def = options(def, DEFAULTS$2);\n            _this = _super.call(this, def, bodyA, bodyB) || this;\n            bodyA = _this.m_bodyA;\n            bodyB = _this.m_bodyB;\n            _this.m_type = RopeJoint.TYPE;\n            _this.m_localAnchorA = anchor ? bodyA.getLocalPoint(anchor) : def.localAnchorA || Vec2.neo(-1.0, 0.0);\n            _this.m_localAnchorB = anchor ? bodyB.getLocalPoint(anchor) : def.localAnchorB || Vec2.neo(1.0, 0.0);\n            _this.m_maxLength = def.maxLength;\n            _this.m_mass = 0.0;\n            _this.m_impulse = 0.0;\n            _this.m_length = 0.0;\n            _this.m_state = inactiveLimit;\n            return _this;\n            // Limit:\n            // C = norm(pB - pA) - L\n            // u = (pB - pA) / norm(pB - pA)\n            // Cdot = dot(u, vB + cross(wB, rB) - vA - cross(wA, rA))\n            // J = [-u -cross(rA, u) u cross(rB, u)]\n            // K = J * invM * JT\n            // = invMassA + invIA * cross(rA, u)^2 + invMassB + invIB * cross(rB, u)^2\n        }\n        /** @internal */\n        RopeJoint.prototype._serialize = function () {\n            return {\n                type: this.m_type,\n                bodyA: this.m_bodyA,\n                bodyB: this.m_bodyB,\n                collideConnected: this.m_collideConnected,\n                localAnchorA: this.m_localAnchorA,\n                localAnchorB: this.m_localAnchorB,\n                maxLength: this.m_maxLength,\n            };\n        };\n        /** @internal */\n        RopeJoint._deserialize = function (data, world, restore) {\n            data = __assign({}, data);\n            data.bodyA = restore(Body, data.bodyA, world);\n            data.bodyB = restore(Body, data.bodyB, world);\n            var joint = new RopeJoint(data);\n            return joint;\n        };\n        /**\n         * The local anchor point relative to bodyA's origin.\n         */\n        RopeJoint.prototype.getLocalAnchorA = function () {\n            return this.m_localAnchorA;\n        };\n        /**\n         * The local anchor point relative to bodyB's origin.\n         */\n        RopeJoint.prototype.getLocalAnchorB = function () {\n            return this.m_localAnchorB;\n        };\n        /**\n         * Set the maximum length of the rope.\n         */\n        RopeJoint.prototype.setMaxLength = function (length) {\n            this.m_maxLength = length;\n        };\n        /**\n         * Get the maximum length of the rope.\n         */\n        RopeJoint.prototype.getMaxLength = function () {\n            return this.m_maxLength;\n        };\n        RopeJoint.prototype.getLimitState = function () {\n            // TODO LimitState\n            return this.m_state;\n        };\n        /**\n         * Get the anchor point on bodyA in world coordinates.\n         */\n        RopeJoint.prototype.getAnchorA = function () {\n            return this.m_bodyA.getWorldPoint(this.m_localAnchorA);\n        };\n        /**\n         * Get the anchor point on bodyB in world coordinates.\n         */\n        RopeJoint.prototype.getAnchorB = function () {\n            return this.m_bodyB.getWorldPoint(this.m_localAnchorB);\n        };\n        /**\n         * Get the reaction force on bodyB at the joint anchor in Newtons.\n         */\n        RopeJoint.prototype.getReactionForce = function (inv_dt) {\n            return Vec2.mulNumVec2(this.m_impulse, this.m_u).mul(inv_dt);\n        };\n        /**\n         * Get the reaction torque on bodyB in N*m.\n         */\n        RopeJoint.prototype.getReactionTorque = function (inv_dt) {\n            return 0.0;\n        };\n        RopeJoint.prototype.initVelocityConstraints = function (step) {\n            this.m_localCenterA = this.m_bodyA.m_sweep.localCenter;\n            this.m_localCenterB = this.m_bodyB.m_sweep.localCenter;\n            this.m_invMassA = this.m_bodyA.m_invMass;\n            this.m_invMassB = this.m_bodyB.m_invMass;\n            this.m_invIA = this.m_bodyA.m_invI;\n            this.m_invIB = this.m_bodyB.m_invI;\n            var cA = this.m_bodyA.c_position.c;\n            var aA = this.m_bodyA.c_position.a;\n            var vA = this.m_bodyA.c_velocity.v;\n            var wA = this.m_bodyA.c_velocity.w;\n            var cB = this.m_bodyB.c_position.c;\n            var aB = this.m_bodyB.c_position.a;\n            var vB = this.m_bodyB.c_velocity.v;\n            var wB = this.m_bodyB.c_velocity.w;\n            var qA = Rot.neo(aA);\n            var qB = Rot.neo(aB);\n            this.m_rA = Rot.mulSub(qA, this.m_localAnchorA, this.m_localCenterA);\n            this.m_rB = Rot.mulSub(qB, this.m_localAnchorB, this.m_localCenterB);\n            this.m_u = Vec2.zero();\n            this.m_u.addCombine(1, cB, 1, this.m_rB);\n            this.m_u.subCombine(1, cA, 1, this.m_rA); // Vec2\n            this.m_length = this.m_u.length();\n            var C = this.m_length - this.m_maxLength; // float\n            if (C > 0.0) {\n                this.m_state = atUpperLimit;\n            }\n            else {\n                this.m_state = inactiveLimit;\n            }\n            if (this.m_length > Settings.linearSlop) {\n                this.m_u.mul(1.0 / this.m_length);\n            }\n            else {\n                this.m_u.setZero();\n                this.m_mass = 0.0;\n                this.m_impulse = 0.0;\n                return;\n            }\n            // Compute effective mass.\n            var crA = Vec2.crossVec2Vec2(this.m_rA, this.m_u); // float\n            var crB = Vec2.crossVec2Vec2(this.m_rB, this.m_u); // float\n            var invMass = this.m_invMassA + this.m_invIA * crA * crA + this.m_invMassB\n                + this.m_invIB * crB * crB; // float\n            this.m_mass = invMass != 0.0 ? 1.0 / invMass : 0.0;\n            if (step.warmStarting) {\n                // Scale the impulse to support a variable time step.\n                this.m_impulse *= step.dtRatio;\n                var P = Vec2.mulNumVec2(this.m_impulse, this.m_u);\n                vA.subMul(this.m_invMassA, P);\n                wA -= this.m_invIA * Vec2.crossVec2Vec2(this.m_rA, P);\n                vB.addMul(this.m_invMassB, P);\n                wB += this.m_invIB * Vec2.crossVec2Vec2(this.m_rB, P);\n            }\n            else {\n                this.m_impulse = 0.0;\n            }\n            this.m_bodyA.c_velocity.v.setVec2(vA);\n            this.m_bodyA.c_velocity.w = wA;\n            this.m_bodyB.c_velocity.v.setVec2(vB);\n            this.m_bodyB.c_velocity.w = wB;\n        };\n        RopeJoint.prototype.solveVelocityConstraints = function (step) {\n            var vA = this.m_bodyA.c_velocity.v;\n            var wA = this.m_bodyA.c_velocity.w;\n            var vB = this.m_bodyB.c_velocity.v;\n            var wB = this.m_bodyB.c_velocity.w;\n            // Cdot = dot(u, v + cross(w, r))\n            var vpA = Vec2.addCrossNumVec2(vA, wA, this.m_rA); // Vec2\n            var vpB = Vec2.addCrossNumVec2(vB, wB, this.m_rB); // Vec2\n            var C = this.m_length - this.m_maxLength; // float\n            var Cdot = Vec2.dot(this.m_u, Vec2.sub(vpB, vpA)); // float\n            // Predictive constraint.\n            if (C < 0.0) {\n                Cdot += step.inv_dt * C;\n            }\n            var impulse = -this.m_mass * Cdot; // float\n            var oldImpulse = this.m_impulse; // float\n            this.m_impulse = math$1.min(0.0, this.m_impulse + impulse);\n            impulse = this.m_impulse - oldImpulse;\n            var P = Vec2.mulNumVec2(impulse, this.m_u); // Vec2\n            vA.subMul(this.m_invMassA, P);\n            wA -= this.m_invIA * Vec2.crossVec2Vec2(this.m_rA, P);\n            vB.addMul(this.m_invMassB, P);\n            wB += this.m_invIB * Vec2.crossVec2Vec2(this.m_rB, P);\n            this.m_bodyA.c_velocity.v = vA;\n            this.m_bodyA.c_velocity.w = wA;\n            this.m_bodyB.c_velocity.v = vB;\n            this.m_bodyB.c_velocity.w = wB;\n        };\n        /**\n         * This returns true if the position errors are within tolerance.\n         */\n        RopeJoint.prototype.solvePositionConstraints = function (step) {\n            var cA = this.m_bodyA.c_position.c; // Vec2\n            var aA = this.m_bodyA.c_position.a; // float\n            var cB = this.m_bodyB.c_position.c; // Vec2\n            var aB = this.m_bodyB.c_position.a; // float\n            var qA = Rot.neo(aA);\n            var qB = Rot.neo(aB);\n            var rA = Rot.mulSub(qA, this.m_localAnchorA, this.m_localCenterA);\n            var rB = Rot.mulSub(qB, this.m_localAnchorB, this.m_localCenterB);\n            var u = Vec2.zero();\n            u.addCombine(1, cB, 1, rB);\n            u.subCombine(1, cA, 1, rA); // Vec2\n            var length = u.normalize(); // float\n            var C = length - this.m_maxLength; // float\n            C = math$1.clamp(C, 0.0, Settings.maxLinearCorrection);\n            var impulse = -this.m_mass * C; // float\n            var P = Vec2.mulNumVec2(impulse, u); // Vec2\n            cA.subMul(this.m_invMassA, P);\n            aA -= this.m_invIA * Vec2.crossVec2Vec2(rA, P);\n            cB.addMul(this.m_invMassB, P);\n            aB += this.m_invIB * Vec2.crossVec2Vec2(rB, P);\n            this.m_bodyA.c_position.c.setVec2(cA);\n            this.m_bodyA.c_position.a = aA;\n            this.m_bodyB.c_position.c.setVec2(cB);\n            this.m_bodyB.c_position.a = aB;\n            return length - this.m_maxLength < Settings.linearSlop;\n        };\n        RopeJoint.TYPE = 'rope-joint';\n        return RopeJoint;\n    }(Joint));\n\n    /*\n     * Planck.js\n     * The MIT License\n     * Copyright (c) 2021 Erin Catto, Ali Shakiba\n     *\n     * Permission is hereby granted, free of charge, to any person obtaining a copy\n     * of this software and associated documentation files (the \"Software\"), to deal\n     * in the Software without restriction, including without limitation the rights\n     * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n     * copies of the Software, and to permit persons to whom the Software is\n     * furnished to do so, subject to the following conditions:\n     *\n     * The above copyright notice and this permission notice shall be included in all\n     * copies or substantial portions of the Software.\n     *\n     * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n     * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n     * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n     * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n     * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n     * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n     * SOFTWARE.\n     */\n    var DEFAULTS$1 = {\n        frequencyHz: 0.0,\n        dampingRatio: 0.0,\n    };\n    /**\n     * A weld joint essentially glues two bodies together. A weld joint may distort\n     * somewhat because the island constraint solver is approximate.\n     */\n    var WeldJoint = /** @class */ (function (_super) {\n        __extends(WeldJoint, _super);\n        function WeldJoint(def, bodyA, bodyB, anchor) {\n            var _this = this;\n            // @ts-ignore\n            if (!(_this instanceof WeldJoint)) {\n                return new WeldJoint(def, bodyA, bodyB, anchor);\n            }\n            def = options(def, DEFAULTS$1);\n            _this = _super.call(this, def, bodyA, bodyB) || this;\n            bodyA = _this.m_bodyA;\n            bodyB = _this.m_bodyB;\n            _this.m_type = WeldJoint.TYPE;\n            _this.m_localAnchorA = Vec2.clone(anchor ? bodyA.getLocalPoint(anchor) : def.localAnchorA || Vec2.zero());\n            _this.m_localAnchorB = Vec2.clone(anchor ? bodyB.getLocalPoint(anchor) : def.localAnchorB || Vec2.zero());\n            _this.m_referenceAngle = math$1.isFinite(def.referenceAngle) ? def.referenceAngle : bodyB.getAngle() - bodyA.getAngle();\n            _this.m_frequencyHz = def.frequencyHz;\n            _this.m_dampingRatio = def.dampingRatio;\n            _this.m_impulse = new Vec3();\n            _this.m_bias = 0.0;\n            _this.m_gamma = 0.0;\n            // Solver temp\n            _this.m_rA; // Vec2\n            _this.m_rB; // Vec2\n            _this.m_localCenterA; // Vec2\n            _this.m_localCenterB; // Vec2\n            _this.m_invMassA; // float\n            _this.m_invMassB; // float\n            _this.m_invIA; // float\n            _this.m_invIB; // float\n            _this.m_mass = new Mat33();\n            return _this;\n            // Point-to-point constraint\n            // C = p2 - p1\n            // Cdot = v2 - v1\n            // / = v2 + cross(w2, r2) - v1 - cross(w1, r1)\n            // J = [-I -r1_skew I r2_skew ]\n            // Identity used:\n            // w k % (rx i + ry j) = w * (-ry i + rx j)\n            // Angle constraint\n            // C = angle2 - angle1 - referenceAngle\n            // Cdot = w2 - w1\n            // J = [0 0 -1 0 0 1]\n            // K = invI1 + invI2\n        }\n        /** @internal */\n        WeldJoint.prototype._serialize = function () {\n            return {\n                type: this.m_type,\n                bodyA: this.m_bodyA,\n                bodyB: this.m_bodyB,\n                collideConnected: this.m_collideConnected,\n                frequencyHz: this.m_frequencyHz,\n                dampingRatio: this.m_dampingRatio,\n                localAnchorA: this.m_localAnchorA,\n                localAnchorB: this.m_localAnchorB,\n                referenceAngle: this.m_referenceAngle,\n            };\n        };\n        /** @internal */\n        WeldJoint._deserialize = function (data, world, restore) {\n            data = __assign({}, data);\n            data.bodyA = restore(Body, data.bodyA, world);\n            data.bodyB = restore(Body, data.bodyB, world);\n            var joint = new WeldJoint(data);\n            return joint;\n        };\n        /** @internal */\n        WeldJoint.prototype._setAnchors = function (def) {\n            if (def.anchorA) {\n                this.m_localAnchorA.setVec2(this.m_bodyA.getLocalPoint(def.anchorA));\n            }\n            else if (def.localAnchorA) {\n                this.m_localAnchorA.setVec2(def.localAnchorA);\n            }\n            if (def.anchorB) {\n                this.m_localAnchorB.setVec2(this.m_bodyB.getLocalPoint(def.anchorB));\n            }\n            else if (def.localAnchorB) {\n                this.m_localAnchorB.setVec2(def.localAnchorB);\n            }\n        };\n        /**\n         * The local anchor point relative to bodyA's origin.\n         */\n        WeldJoint.prototype.getLocalAnchorA = function () {\n            return this.m_localAnchorA;\n        };\n        /**\n         * The local anchor point relative to bodyB's origin.\n         */\n        WeldJoint.prototype.getLocalAnchorB = function () {\n            return this.m_localAnchorB;\n        };\n        /**\n         * Get the reference angle.\n         */\n        WeldJoint.prototype.getReferenceAngle = function () {\n            return this.m_referenceAngle;\n        };\n        /**\n         * Set frequency in Hz.\n         */\n        WeldJoint.prototype.setFrequency = function (hz) {\n            this.m_frequencyHz = hz;\n        };\n        /**\n         * Get frequency in Hz.\n         */\n        WeldJoint.prototype.getFrequency = function () {\n            return this.m_frequencyHz;\n        };\n        /**\n         * Set damping ratio.\n         */\n        WeldJoint.prototype.setDampingRatio = function (ratio) {\n            this.m_dampingRatio = ratio;\n        };\n        /**\n         * Get damping ratio.\n         */\n        WeldJoint.prototype.getDampingRatio = function () {\n            return this.m_dampingRatio;\n        };\n        /**\n         * Get the anchor point on bodyA in world coordinates.\n         */\n        WeldJoint.prototype.getAnchorA = function () {\n            return this.m_bodyA.getWorldPoint(this.m_localAnchorA);\n        };\n        /**\n         * Get the anchor point on bodyB in world coordinates.\n         */\n        WeldJoint.prototype.getAnchorB = function () {\n            return this.m_bodyB.getWorldPoint(this.m_localAnchorB);\n        };\n        /**\n         * Get the reaction force on bodyB at the joint anchor in Newtons.\n         */\n        WeldJoint.prototype.getReactionForce = function (inv_dt) {\n            return Vec2.neo(this.m_impulse.x, this.m_impulse.y).mul(inv_dt);\n        };\n        /**\n         * Get the reaction torque on bodyB in N*m.\n         */\n        WeldJoint.prototype.getReactionTorque = function (inv_dt) {\n            return inv_dt * this.m_impulse.z;\n        };\n        WeldJoint.prototype.initVelocityConstraints = function (step) {\n            this.m_localCenterA = this.m_bodyA.m_sweep.localCenter;\n            this.m_localCenterB = this.m_bodyB.m_sweep.localCenter;\n            this.m_invMassA = this.m_bodyA.m_invMass;\n            this.m_invMassB = this.m_bodyB.m_invMass;\n            this.m_invIA = this.m_bodyA.m_invI;\n            this.m_invIB = this.m_bodyB.m_invI;\n            var aA = this.m_bodyA.c_position.a;\n            var vA = this.m_bodyA.c_velocity.v;\n            var wA = this.m_bodyA.c_velocity.w;\n            var aB = this.m_bodyB.c_position.a;\n            var vB = this.m_bodyB.c_velocity.v;\n            var wB = this.m_bodyB.c_velocity.w;\n            var qA = Rot.neo(aA);\n            var qB = Rot.neo(aB);\n            this.m_rA = Rot.mulVec2(qA, Vec2.sub(this.m_localAnchorA, this.m_localCenterA));\n            this.m_rB = Rot.mulVec2(qB, Vec2.sub(this.m_localAnchorB, this.m_localCenterB));\n            // J = [-I -r1_skew I r2_skew]\n            // [ 0 -1 0 1]\n            // r_skew = [-ry; rx]\n            // Matlab\n            // K = [ mA+r1y^2*iA+mB+r2y^2*iB, -r1y*iA*r1x-r2y*iB*r2x, -r1y*iA-r2y*iB]\n            // [ -r1y*iA*r1x-r2y*iB*r2x, mA+r1x^2*iA+mB+r2x^2*iB, r1x*iA+r2x*iB]\n            // [ -r1y*iA-r2y*iB, r1x*iA+r2x*iB, iA+iB]\n            var mA = this.m_invMassA;\n            var mB = this.m_invMassB;\n            var iA = this.m_invIA;\n            var iB = this.m_invIB;\n            var K = new Mat33();\n            K.ex.x = mA + mB + this.m_rA.y * this.m_rA.y * iA + this.m_rB.y * this.m_rB.y\n                * iB;\n            K.ey.x = -this.m_rA.y * this.m_rA.x * iA - this.m_rB.y * this.m_rB.x * iB;\n            K.ez.x = -this.m_rA.y * iA - this.m_rB.y * iB;\n            K.ex.y = K.ey.x;\n            K.ey.y = mA + mB + this.m_rA.x * this.m_rA.x * iA + this.m_rB.x * this.m_rB.x\n                * iB;\n            K.ez.y = this.m_rA.x * iA + this.m_rB.x * iB;\n            K.ex.z = K.ez.x;\n            K.ey.z = K.ez.y;\n            K.ez.z = iA + iB;\n            if (this.m_frequencyHz > 0.0) {\n                K.getInverse22(this.m_mass);\n                var invM = iA + iB; // float\n                var m = invM > 0.0 ? 1.0 / invM : 0.0; // float\n                var C = aB - aA - this.m_referenceAngle; // float\n                // Frequency\n                var omega = 2.0 * math$1.PI * this.m_frequencyHz; // float\n                // Damping coefficient\n                var d = 2.0 * m * this.m_dampingRatio * omega; // float\n                // Spring stiffness\n                var k = m * omega * omega; // float\n                // magic formulas\n                var h = step.dt; // float\n                this.m_gamma = h * (d + h * k);\n                this.m_gamma = this.m_gamma != 0.0 ? 1.0 / this.m_gamma : 0.0;\n                this.m_bias = C * h * k * this.m_gamma;\n                invM += this.m_gamma;\n                this.m_mass.ez.z = invM != 0.0 ? 1.0 / invM : 0.0;\n            }\n            else if (K.ez.z == 0.0) {\n                K.getInverse22(this.m_mass);\n                this.m_gamma = 0.0;\n                this.m_bias = 0.0;\n            }\n            else {\n                K.getSymInverse33(this.m_mass);\n                this.m_gamma = 0.0;\n                this.m_bias = 0.0;\n            }\n            if (step.warmStarting) {\n                // Scale impulses to support a variable time step.\n                this.m_impulse.mul(step.dtRatio);\n                var P = Vec2.neo(this.m_impulse.x, this.m_impulse.y);\n                vA.subMul(mA, P);\n                wA -= iA * (Vec2.crossVec2Vec2(this.m_rA, P) + this.m_impulse.z);\n                vB.addMul(mB, P);\n                wB += iB * (Vec2.crossVec2Vec2(this.m_rB, P) + this.m_impulse.z);\n            }\n            else {\n                this.m_impulse.setZero();\n            }\n            this.m_bodyA.c_velocity.v = vA;\n            this.m_bodyA.c_velocity.w = wA;\n            this.m_bodyB.c_velocity.v = vB;\n            this.m_bodyB.c_velocity.w = wB;\n        };\n        WeldJoint.prototype.solveVelocityConstraints = function (step) {\n            var vA = this.m_bodyA.c_velocity.v;\n            var wA = this.m_bodyA.c_velocity.w;\n            var vB = this.m_bodyB.c_velocity.v;\n            var wB = this.m_bodyB.c_velocity.w;\n            var mA = this.m_invMassA;\n            var mB = this.m_invMassB; // float\n            var iA = this.m_invIA;\n            var iB = this.m_invIB; // float\n            if (this.m_frequencyHz > 0.0) {\n                var Cdot2 = wB - wA; // float\n                var impulse2 = -this.m_mass.ez.z\n                    * (Cdot2 + this.m_bias + this.m_gamma * this.m_impulse.z); // float\n                this.m_impulse.z += impulse2;\n                wA -= iA * impulse2;\n                wB += iB * impulse2;\n                var Cdot1 = Vec2.zero();\n                Cdot1.addCombine(1, vB, 1, Vec2.crossNumVec2(wB, this.m_rB));\n                Cdot1.subCombine(1, vA, 1, Vec2.crossNumVec2(wA, this.m_rA)); // Vec2\n                var impulse1 = Vec2.neg(Mat33.mulVec2(this.m_mass, Cdot1)); // Vec2\n                this.m_impulse.x += impulse1.x;\n                this.m_impulse.y += impulse1.y;\n                var P = Vec2.clone(impulse1); // Vec2\n                vA.subMul(mA, P);\n                wA -= iA * Vec2.crossVec2Vec2(this.m_rA, P);\n                vB.addMul(mB, P);\n                wB += iB * Vec2.crossVec2Vec2(this.m_rB, P);\n            }\n            else {\n                var Cdot1 = Vec2.zero();\n                Cdot1.addCombine(1, vB, 1, Vec2.crossNumVec2(wB, this.m_rB));\n                Cdot1.subCombine(1, vA, 1, Vec2.crossNumVec2(wA, this.m_rA)); // Vec2\n                var Cdot2 = wB - wA; // float\n                var Cdot = new Vec3(Cdot1.x, Cdot1.y, Cdot2); // Vec3\n                var impulse = Vec3.neg(Mat33.mulVec3(this.m_mass, Cdot)); // Vec3\n                this.m_impulse.add(impulse);\n                var P = Vec2.neo(impulse.x, impulse.y);\n                vA.subMul(mA, P);\n                wA -= iA * (Vec2.crossVec2Vec2(this.m_rA, P) + impulse.z);\n                vB.addMul(mB, P);\n                wB += iB * (Vec2.crossVec2Vec2(this.m_rB, P) + impulse.z);\n            }\n            this.m_bodyA.c_velocity.v = vA;\n            this.m_bodyA.c_velocity.w = wA;\n            this.m_bodyB.c_velocity.v = vB;\n            this.m_bodyB.c_velocity.w = wB;\n        };\n        /**\n         * This returns true if the position errors are within tolerance.\n         */\n        WeldJoint.prototype.solvePositionConstraints = function (step) {\n            var cA = this.m_bodyA.c_position.c;\n            var aA = this.m_bodyA.c_position.a;\n            var cB = this.m_bodyB.c_position.c;\n            var aB = this.m_bodyB.c_position.a;\n            var qA = Rot.neo(aA);\n            var qB = Rot.neo(aB);\n            var mA = this.m_invMassA;\n            var mB = this.m_invMassB;\n            var iA = this.m_invIA;\n            var iB = this.m_invIB;\n            var rA = Rot.mulVec2(qA, Vec2.sub(this.m_localAnchorA, this.m_localCenterA));\n            var rB = Rot.mulVec2(qB, Vec2.sub(this.m_localAnchorB, this.m_localCenterB));\n            var positionError;\n            var angularError;\n            var K = new Mat33();\n            K.ex.x = mA + mB + rA.y * rA.y * iA + rB.y * rB.y * iB;\n            K.ey.x = -rA.y * rA.x * iA - rB.y * rB.x * iB;\n            K.ez.x = -rA.y * iA - rB.y * iB;\n            K.ex.y = K.ey.x;\n            K.ey.y = mA + mB + rA.x * rA.x * iA + rB.x * rB.x * iB;\n            K.ez.y = rA.x * iA + rB.x * iB;\n            K.ex.z = K.ez.x;\n            K.ey.z = K.ez.y;\n            K.ez.z = iA + iB;\n            if (this.m_frequencyHz > 0.0) {\n                var C1 = Vec2.zero();\n                C1.addCombine(1, cB, 1, rB);\n                C1.subCombine(1, cA, 1, rA); // Vec2\n                positionError = C1.length();\n                angularError = 0.0;\n                var P = Vec2.neg(K.solve22(C1)); // Vec2\n                cA.subMul(mA, P);\n                aA -= iA * Vec2.crossVec2Vec2(rA, P);\n                cB.addMul(mB, P);\n                aB += iB * Vec2.crossVec2Vec2(rB, P);\n            }\n            else {\n                var C1 = Vec2.zero();\n                C1.addCombine(1, cB, 1, rB);\n                C1.subCombine(1, cA, 1, rA);\n                var C2 = aB - aA - this.m_referenceAngle; // float\n                positionError = C1.length();\n                angularError = math$1.abs(C2);\n                var C = new Vec3(C1.x, C1.y, C2);\n                var impulse = new Vec3();\n                if (K.ez.z > 0.0) {\n                    impulse = Vec3.neg(K.solve33(C));\n                }\n                else {\n                    var impulse2 = Vec2.neg(K.solve22(C1));\n                    impulse.set(impulse2.x, impulse2.y, 0.0);\n                }\n                var P = Vec2.neo(impulse.x, impulse.y);\n                cA.subMul(mA, P);\n                aA -= iA * (Vec2.crossVec2Vec2(rA, P) + impulse.z);\n                cB.addMul(mB, P);\n                aB += iB * (Vec2.crossVec2Vec2(rB, P) + impulse.z);\n            }\n            this.m_bodyA.c_position.c = cA;\n            this.m_bodyA.c_position.a = aA;\n            this.m_bodyB.c_position.c = cB;\n            this.m_bodyB.c_position.a = aB;\n            return positionError <= Settings.linearSlop && angularError <= Settings.angularSlop;\n        };\n        WeldJoint.TYPE = 'weld-joint';\n        return WeldJoint;\n    }(Joint));\n\n    /*\n     * Planck.js\n     * The MIT License\n     * Copyright (c) 2021 Erin Catto, Ali Shakiba\n     *\n     * Permission is hereby granted, free of charge, to any person obtaining a copy\n     * of this software and associated documentation files (the \"Software\"), to deal\n     * in the Software without restriction, including without limitation the rights\n     * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n     * copies of the Software, and to permit persons to whom the Software is\n     * furnished to do so, subject to the following conditions:\n     *\n     * The above copyright notice and this permission notice shall be included in all\n     * copies or substantial portions of the Software.\n     *\n     * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n     * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n     * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n     * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n     * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n     * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n     * SOFTWARE.\n     */\n    var DEFAULTS = {\n        enableMotor: false,\n        maxMotorTorque: 0.0,\n        motorSpeed: 0.0,\n        frequencyHz: 2.0,\n        dampingRatio: 0.7,\n    };\n    /**\n     * A wheel joint. This joint provides two degrees of freedom: translation along\n     * an axis fixed in bodyA and rotation in the plane. In other words, it is a\n     * point to line constraint with a rotational motor and a linear spring/damper.\n     * This joint is designed for vehicle suspensions.\n     */\n    var WheelJoint = /** @class */ (function (_super) {\n        __extends(WheelJoint, _super);\n        // @ts-ignore\n        function WheelJoint(def, bodyA, bodyB, anchor, axis) {\n            var _this = this;\n            // @ts-ignore\n            if (!(_this instanceof WheelJoint)) {\n                return new WheelJoint(def, bodyA, bodyB, anchor, axis);\n            }\n            def = options(def, DEFAULTS);\n            _this = _super.call(this, def, bodyA, bodyB) || this;\n            /** @internal */ _this.m_ax = Vec2.zero();\n            /** @internal */ _this.m_ay = Vec2.zero();\n            bodyA = _this.m_bodyA;\n            bodyB = _this.m_bodyB;\n            _this.m_type = WheelJoint.TYPE;\n            _this.m_localAnchorA = Vec2.clone(anchor ? bodyA.getLocalPoint(anchor) : def.localAnchorA || Vec2.zero());\n            _this.m_localAnchorB = Vec2.clone(anchor ? bodyB.getLocalPoint(anchor) : def.localAnchorB || Vec2.zero());\n            // @ts-ignore localAxis\n            _this.m_localXAxisA = Vec2.clone(axis ? bodyA.getLocalVector(axis) : def.localAxisA || def.localAxis || Vec2.neo(1.0, 0.0));\n            _this.m_localYAxisA = Vec2.crossNumVec2(1.0, _this.m_localXAxisA);\n            _this.m_mass = 0.0;\n            _this.m_impulse = 0.0;\n            _this.m_motorMass = 0.0;\n            _this.m_motorImpulse = 0.0;\n            _this.m_springMass = 0.0;\n            _this.m_springImpulse = 0.0;\n            _this.m_maxMotorTorque = def.maxMotorTorque;\n            _this.m_motorSpeed = def.motorSpeed;\n            _this.m_enableMotor = def.enableMotor;\n            _this.m_frequencyHz = def.frequencyHz;\n            _this.m_dampingRatio = def.dampingRatio;\n            _this.m_bias = 0.0;\n            _this.m_gamma = 0.0;\n            return _this;\n            // Linear constraint (point-to-line)\n            // d = pB - pA = xB + rB - xA - rA\n            // C = dot(ay, d)\n            // Cdot = dot(d, cross(wA, ay)) + dot(ay, vB + cross(wB, rB) - vA - cross(wA,\n            // rA))\n            // = -dot(ay, vA) - dot(cross(d + rA, ay), wA) + dot(ay, vB) + dot(cross(rB,\n            // ay), vB)\n            // J = [-ay, -cross(d + rA, ay), ay, cross(rB, ay)]\n            // Spring linear constraint\n            // C = dot(ax, d)\n            // Cdot = = -dot(ax, vA) - dot(cross(d + rA, ax), wA) + dot(ax, vB) +\n            // dot(cross(rB, ax), vB)\n            // J = [-ax -cross(d+rA, ax) ax cross(rB, ax)]\n            // Motor rotational constraint\n            // Cdot = wB - wA\n            // J = [0 0 -1 0 0 1]\n        }\n        /** @internal */\n        WheelJoint.prototype._serialize = function () {\n            return {\n                type: this.m_type,\n                bodyA: this.m_bodyA,\n                bodyB: this.m_bodyB,\n                collideConnected: this.m_collideConnected,\n                enableMotor: this.m_enableMotor,\n                maxMotorTorque: this.m_maxMotorTorque,\n                motorSpeed: this.m_motorSpeed,\n                frequencyHz: this.m_frequencyHz,\n                dampingRatio: this.m_dampingRatio,\n                localAnchorA: this.m_localAnchorA,\n                localAnchorB: this.m_localAnchorB,\n                localAxisA: this.m_localXAxisA,\n            };\n        };\n        /** @internal */\n        WheelJoint._deserialize = function (data, world, restore) {\n            data = __assign({}, data);\n            data.bodyA = restore(Body, data.bodyA, world);\n            data.bodyB = restore(Body, data.bodyB, world);\n            var joint = new WheelJoint(data);\n            return joint;\n        };\n        /** @internal */\n        WheelJoint.prototype._setAnchors = function (def) {\n            if (def.anchorA) {\n                this.m_localAnchorA.setVec2(this.m_bodyA.getLocalPoint(def.anchorA));\n            }\n            else if (def.localAnchorA) {\n                this.m_localAnchorA.setVec2(def.localAnchorA);\n            }\n            if (def.anchorB) {\n                this.m_localAnchorB.setVec2(this.m_bodyB.getLocalPoint(def.anchorB));\n            }\n            else if (def.localAnchorB) {\n                this.m_localAnchorB.setVec2(def.localAnchorB);\n            }\n            if (def.localAxisA) {\n                this.m_localXAxisA.setVec2(def.localAxisA);\n                this.m_localYAxisA.setVec2(Vec2.crossNumVec2(1.0, def.localAxisA));\n            }\n        };\n        /**\n         * The local anchor point relative to bodyA's origin.\n         */\n        WheelJoint.prototype.getLocalAnchorA = function () {\n            return this.m_localAnchorA;\n        };\n        /**\n         * The local anchor point relative to bodyB's origin.\n         */\n        WheelJoint.prototype.getLocalAnchorB = function () {\n            return this.m_localAnchorB;\n        };\n        /**\n         * The local joint axis relative to bodyA.\n         */\n        WheelJoint.prototype.getLocalAxisA = function () {\n            return this.m_localXAxisA;\n        };\n        /**\n         * Get the current joint translation, usually in meters.\n         */\n        WheelJoint.prototype.getJointTranslation = function () {\n            var bA = this.m_bodyA;\n            var bB = this.m_bodyB;\n            var pA = bA.getWorldPoint(this.m_localAnchorA); // Vec2\n            var pB = bB.getWorldPoint(this.m_localAnchorB); // Vec2\n            var d = Vec2.sub(pB, pA); // Vec2\n            var axis = bA.getWorldVector(this.m_localXAxisA); // Vec2\n            var translation = Vec2.dot(d, axis); // float\n            return translation;\n        };\n        /**\n         * Get the current joint translation speed, usually in meters per second.\n         */\n        WheelJoint.prototype.getJointSpeed = function () {\n            var wA = this.m_bodyA.m_angularVelocity;\n            var wB = this.m_bodyB.m_angularVelocity;\n            return wB - wA;\n        };\n        /**\n         * Is the joint motor enabled?\n         */\n        WheelJoint.prototype.isMotorEnabled = function () {\n            return this.m_enableMotor;\n        };\n        /**\n         * Enable/disable the joint motor.\n         */\n        WheelJoint.prototype.enableMotor = function (flag) {\n            this.m_bodyA.setAwake(true);\n            this.m_bodyB.setAwake(true);\n            this.m_enableMotor = flag;\n        };\n        /**\n         * Set the motor speed, usually in radians per second.\n         */\n        WheelJoint.prototype.setMotorSpeed = function (speed) {\n            this.m_bodyA.setAwake(true);\n            this.m_bodyB.setAwake(true);\n            this.m_motorSpeed = speed;\n        };\n        /**\n         * Get the motor speed, usually in radians per second.\n         */\n        WheelJoint.prototype.getMotorSpeed = function () {\n            return this.m_motorSpeed;\n        };\n        /**\n         * Set/Get the maximum motor force, usually in N-m.\n         */\n        WheelJoint.prototype.setMaxMotorTorque = function (torque) {\n            this.m_bodyA.setAwake(true);\n            this.m_bodyB.setAwake(true);\n            this.m_maxMotorTorque = torque;\n        };\n        WheelJoint.prototype.getMaxMotorTorque = function () {\n            return this.m_maxMotorTorque;\n        };\n        /**\n         * Get the current motor torque given the inverse time step, usually in N-m.\n         */\n        WheelJoint.prototype.getMotorTorque = function (inv_dt) {\n            return inv_dt * this.m_motorImpulse;\n        };\n        /**\n         * Set/Get the spring frequency in hertz. Setting the frequency to zero disables\n         * the spring.\n         */\n        WheelJoint.prototype.setSpringFrequencyHz = function (hz) {\n            this.m_frequencyHz = hz;\n        };\n        WheelJoint.prototype.getSpringFrequencyHz = function () {\n            return this.m_frequencyHz;\n        };\n        /**\n         * Set/Get the spring damping ratio\n         */\n        WheelJoint.prototype.setSpringDampingRatio = function (ratio) {\n            this.m_dampingRatio = ratio;\n        };\n        WheelJoint.prototype.getSpringDampingRatio = function () {\n            return this.m_dampingRatio;\n        };\n        /**\n         * Get the anchor point on bodyA in world coordinates.\n         */\n        WheelJoint.prototype.getAnchorA = function () {\n            return this.m_bodyA.getWorldPoint(this.m_localAnchorA);\n        };\n        /**\n         * Get the anchor point on bodyB in world coordinates.\n         */\n        WheelJoint.prototype.getAnchorB = function () {\n            return this.m_bodyB.getWorldPoint(this.m_localAnchorB);\n        };\n        /**\n         * Get the reaction force on bodyB at the joint anchor in Newtons.\n         */\n        WheelJoint.prototype.getReactionForce = function (inv_dt) {\n            return Vec2.combine(this.m_impulse, this.m_ay, this.m_springImpulse, this.m_ax).mul(inv_dt);\n        };\n        /**\n         * Get the reaction torque on bodyB in N*m.\n         */\n        WheelJoint.prototype.getReactionTorque = function (inv_dt) {\n            return inv_dt * this.m_motorImpulse;\n        };\n        WheelJoint.prototype.initVelocityConstraints = function (step) {\n            this.m_localCenterA = this.m_bodyA.m_sweep.localCenter;\n            this.m_localCenterB = this.m_bodyB.m_sweep.localCenter;\n            this.m_invMassA = this.m_bodyA.m_invMass;\n            this.m_invMassB = this.m_bodyB.m_invMass;\n            this.m_invIA = this.m_bodyA.m_invI;\n            this.m_invIB = this.m_bodyB.m_invI;\n            var mA = this.m_invMassA;\n            var mB = this.m_invMassB; // float\n            var iA = this.m_invIA;\n            var iB = this.m_invIB; // float\n            var cA = this.m_bodyA.c_position.c;\n            var aA = this.m_bodyA.c_position.a;\n            var vA = this.m_bodyA.c_velocity.v;\n            var wA = this.m_bodyA.c_velocity.w;\n            var cB = this.m_bodyB.c_position.c;\n            var aB = this.m_bodyB.c_position.a;\n            var vB = this.m_bodyB.c_velocity.v;\n            var wB = this.m_bodyB.c_velocity.w;\n            var qA = Rot.neo(aA);\n            var qB = Rot.neo(aB);\n            // Compute the effective masses.\n            var rA = Rot.mulVec2(qA, Vec2.sub(this.m_localAnchorA, this.m_localCenterA));\n            var rB = Rot.mulVec2(qB, Vec2.sub(this.m_localAnchorB, this.m_localCenterB));\n            var d = Vec2.zero();\n            d.addCombine(1, cB, 1, rB);\n            d.subCombine(1, cA, 1, rA); // Vec2\n            // Point to line constraint\n            {\n                this.m_ay = Rot.mulVec2(qA, this.m_localYAxisA);\n                this.m_sAy = Vec2.crossVec2Vec2(Vec2.add(d, rA), this.m_ay);\n                this.m_sBy = Vec2.crossVec2Vec2(rB, this.m_ay);\n                this.m_mass = mA + mB + iA * this.m_sAy * this.m_sAy + iB * this.m_sBy\n                    * this.m_sBy;\n                if (this.m_mass > 0.0) {\n                    this.m_mass = 1.0 / this.m_mass;\n                }\n            }\n            // Spring constraint\n            this.m_springMass = 0.0;\n            this.m_bias = 0.0;\n            this.m_gamma = 0.0;\n            if (this.m_frequencyHz > 0.0) {\n                this.m_ax = Rot.mulVec2(qA, this.m_localXAxisA);\n                this.m_sAx = Vec2.crossVec2Vec2(Vec2.add(d, rA), this.m_ax);\n                this.m_sBx = Vec2.crossVec2Vec2(rB, this.m_ax);\n                var invMass = mA + mB + iA * this.m_sAx * this.m_sAx + iB * this.m_sBx\n                    * this.m_sBx; // float\n                if (invMass > 0.0) {\n                    this.m_springMass = 1.0 / invMass;\n                    var C = Vec2.dot(d, this.m_ax); // float\n                    // Frequency\n                    var omega = 2.0 * math$1.PI * this.m_frequencyHz; // float\n                    // Damping coefficient\n                    var damp = 2.0 * this.m_springMass * this.m_dampingRatio * omega; // float\n                    // Spring stiffness\n                    var k = this.m_springMass * omega * omega; // float\n                    // magic formulas\n                    var h = step.dt; // float\n                    this.m_gamma = h * (damp + h * k);\n                    if (this.m_gamma > 0.0) {\n                        this.m_gamma = 1.0 / this.m_gamma;\n                    }\n                    this.m_bias = C * h * k * this.m_gamma;\n                    this.m_springMass = invMass + this.m_gamma;\n                    if (this.m_springMass > 0.0) {\n                        this.m_springMass = 1.0 / this.m_springMass;\n                    }\n                }\n            }\n            else {\n                this.m_springImpulse = 0.0;\n            }\n            // Rotational motor\n            if (this.m_enableMotor) {\n                this.m_motorMass = iA + iB;\n                if (this.m_motorMass > 0.0) {\n                    this.m_motorMass = 1.0 / this.m_motorMass;\n                }\n            }\n            else {\n                this.m_motorMass = 0.0;\n                this.m_motorImpulse = 0.0;\n            }\n            if (step.warmStarting) {\n                // Account for variable time step.\n                this.m_impulse *= step.dtRatio;\n                this.m_springImpulse *= step.dtRatio;\n                this.m_motorImpulse *= step.dtRatio;\n                var P = Vec2.combine(this.m_impulse, this.m_ay, this.m_springImpulse, this.m_ax);\n                var LA = this.m_impulse * this.m_sAy + this.m_springImpulse * this.m_sAx + this.m_motorImpulse;\n                var LB = this.m_impulse * this.m_sBy + this.m_springImpulse * this.m_sBx + this.m_motorImpulse;\n                vA.subMul(this.m_invMassA, P);\n                wA -= this.m_invIA * LA;\n                vB.addMul(this.m_invMassB, P);\n                wB += this.m_invIB * LB;\n            }\n            else {\n                this.m_impulse = 0.0;\n                this.m_springImpulse = 0.0;\n                this.m_motorImpulse = 0.0;\n            }\n            this.m_bodyA.c_velocity.v.setVec2(vA);\n            this.m_bodyA.c_velocity.w = wA;\n            this.m_bodyB.c_velocity.v.setVec2(vB);\n            this.m_bodyB.c_velocity.w = wB;\n        };\n        WheelJoint.prototype.solveVelocityConstraints = function (step) {\n            var mA = this.m_invMassA;\n            var mB = this.m_invMassB; // float\n            var iA = this.m_invIA;\n            var iB = this.m_invIB; // float\n            var vA = this.m_bodyA.c_velocity.v;\n            var wA = this.m_bodyA.c_velocity.w;\n            var vB = this.m_bodyB.c_velocity.v;\n            var wB = this.m_bodyB.c_velocity.w;\n            // Solve spring constraint\n            {\n                var Cdot = Vec2.dot(this.m_ax, vB) - Vec2.dot(this.m_ax, vA) + this.m_sBx\n                    * wB - this.m_sAx * wA; // float\n                var impulse = -this.m_springMass\n                    * (Cdot + this.m_bias + this.m_gamma * this.m_springImpulse); // float\n                this.m_springImpulse += impulse;\n                var P = Vec2.mulNumVec2(impulse, this.m_ax); // Vec2\n                var LA = impulse * this.m_sAx; // float\n                var LB = impulse * this.m_sBx; // float\n                vA.subMul(mA, P);\n                wA -= iA * LA;\n                vB.addMul(mB, P);\n                wB += iB * LB;\n            }\n            // Solve rotational motor constraint\n            {\n                var Cdot = wB - wA - this.m_motorSpeed; // float\n                var impulse = -this.m_motorMass * Cdot; // float\n                var oldImpulse = this.m_motorImpulse; // float\n                var maxImpulse = step.dt * this.m_maxMotorTorque; // float\n                this.m_motorImpulse = math$1.clamp(this.m_motorImpulse + impulse, -maxImpulse, maxImpulse);\n                impulse = this.m_motorImpulse - oldImpulse;\n                wA -= iA * impulse;\n                wB += iB * impulse;\n            }\n            // Solve point to line constraint\n            {\n                var Cdot = Vec2.dot(this.m_ay, vB) - Vec2.dot(this.m_ay, vA) + this.m_sBy\n                    * wB - this.m_sAy * wA; // float\n                var impulse = -this.m_mass * Cdot; // float\n                this.m_impulse += impulse;\n                var P = Vec2.mulNumVec2(impulse, this.m_ay); // Vec2\n                var LA = impulse * this.m_sAy; // float\n                var LB = impulse * this.m_sBy; // float\n                vA.subMul(mA, P);\n                wA -= iA * LA;\n                vB.addMul(mB, P);\n                wB += iB * LB;\n            }\n            this.m_bodyA.c_velocity.v.setVec2(vA);\n            this.m_bodyA.c_velocity.w = wA;\n            this.m_bodyB.c_velocity.v.setVec2(vB);\n            this.m_bodyB.c_velocity.w = wB;\n        };\n        /**\n         * This returns true if the position errors are within tolerance.\n         */\n        WheelJoint.prototype.solvePositionConstraints = function (step) {\n            var cA = this.m_bodyA.c_position.c;\n            var aA = this.m_bodyA.c_position.a;\n            var cB = this.m_bodyB.c_position.c;\n            var aB = this.m_bodyB.c_position.a;\n            var qA = Rot.neo(aA);\n            var qB = Rot.neo(aB);\n            var rA = Rot.mulVec2(qA, Vec2.sub(this.m_localAnchorA, this.m_localCenterA));\n            var rB = Rot.mulVec2(qB, Vec2.sub(this.m_localAnchorB, this.m_localCenterB));\n            var d = Vec2.zero();\n            d.addCombine(1, cB, 1, rB);\n            d.subCombine(1, cA, 1, rA);\n            var ay = Rot.mulVec2(qA, this.m_localYAxisA);\n            var sAy = Vec2.crossVec2Vec2(Vec2.add(d, rA), ay); // float\n            var sBy = Vec2.crossVec2Vec2(rB, ay); // float\n            var C = Vec2.dot(d, ay); // float\n            var k = this.m_invMassA + this.m_invMassB + this.m_invIA * this.m_sAy\n                * this.m_sAy + this.m_invIB * this.m_sBy * this.m_sBy; // float\n            var impulse; // float\n            if (k != 0.0) {\n                impulse = -C / k;\n            }\n            else {\n                impulse = 0.0;\n            }\n            var P = Vec2.mulNumVec2(impulse, ay); // Vec2\n            var LA = impulse * sAy; // float\n            var LB = impulse * sBy; // float\n            cA.subMul(this.m_invMassA, P);\n            aA -= this.m_invIA * LA;\n            cB.addMul(this.m_invMassB, P);\n            aB += this.m_invIB * LB;\n            this.m_bodyA.c_position.c.setVec2(cA);\n            this.m_bodyA.c_position.a = aA;\n            this.m_bodyB.c_position.c.setVec2(cB);\n            this.m_bodyB.c_position.a = aB;\n            return math$1.abs(C) <= Settings.linearSlop;\n        };\n        WheelJoint.TYPE = 'wheel-joint';\n        return WheelJoint;\n    }(Joint));\n\n    var SID = 0;\n    function Serializer(opts) {\n        var _a;\n        opts = opts || {};\n        var rootClass = opts.rootClass || World;\n        var preSerialize = opts.preSerialize || function (obj) { return obj; };\n        var postSerialize = opts.postSerialize || function (data, obj) { return data; };\n        var preDeserialize = opts.preDeserialize || function (data) { return data; };\n        var postDeserialize = opts.postDeserialize || function (obj, data) { return obj; };\n        // This is used to create ref objects during serialize\n        var refTypes = {\n            World: World,\n            Body: Body,\n            Joint: Joint,\n            Fixture: Fixture,\n            Shape: Shape,\n        };\n        // This is used by restore to deserialize objects and refs\n        var restoreTypes = __assign({ Vec2: Vec2,\n            Vec3: Vec3 }, refTypes);\n        var CLASS_BY_TYPE_PROP = (_a = {},\n            _a[Body.STATIC] = Body,\n            _a[Body.DYNAMIC] = Body,\n            _a[Body.KINEMATIC] = Body,\n            _a[ChainShape.TYPE] = ChainShape,\n            _a[BoxShape.TYPE] = BoxShape,\n            _a[EdgeShape.TYPE] = EdgeShape,\n            _a[PolygonShape.TYPE] = PolygonShape,\n            _a[CircleShape.TYPE] = CircleShape,\n            _a[DistanceJoint.TYPE] = DistanceJoint,\n            _a[FrictionJoint.TYPE] = FrictionJoint,\n            _a[GearJoint.TYPE] = GearJoint,\n            _a[MotorJoint.TYPE] = MotorJoint,\n            _a[MouseJoint.TYPE] = MouseJoint,\n            _a[PrismaticJoint.TYPE] = PrismaticJoint,\n            _a[PulleyJoint.TYPE] = PulleyJoint,\n            _a[RevoluteJoint.TYPE] = RevoluteJoint,\n            _a[RopeJoint.TYPE] = RopeJoint,\n            _a[WeldJoint.TYPE] = WeldJoint,\n            _a[WheelJoint.TYPE] = WheelJoint,\n            _a);\n        this.toJson = function (root) {\n            var json = [];\n            var queue = [root];\n            var refMap = {};\n            function storeRef(value, typeName) {\n                value.__sid = value.__sid || ++SID;\n                if (!refMap[value.__sid]) {\n                    queue.push(value);\n                    var index = json.length + queue.length;\n                    var ref = {\n                        refIndex: index,\n                        refType: typeName\n                    };\n                    refMap[value.__sid] = ref;\n                }\n                return refMap[value.__sid];\n            }\n            function serialize(obj) {\n                obj = preSerialize(obj);\n                var data = obj._serialize();\n                data = postSerialize(data, obj);\n                return data;\n            }\n            function toJson(value, top) {\n                if (typeof value !== 'object' || value === null) {\n                    return value;\n                }\n                if (typeof value._serialize === 'function') {\n                    if (value !== top) {\n                        // tslint:disable-next-line:no-for-in\n                        for (var typeName in refTypes) {\n                            if (value instanceof refTypes[typeName]) {\n                                return storeRef(value, typeName);\n                            }\n                        }\n                    }\n                    value = serialize(value);\n                }\n                if (Array.isArray(value)) {\n                    var newValue = [];\n                    for (var key = 0; key < value.length; key++) {\n                        newValue[key] = toJson(value[key]);\n                    }\n                    value = newValue;\n                }\n                else {\n                    var newValue = {};\n                    // tslint:disable-next-line:no-for-in\n                    for (var key in value) {\n                        if (value.hasOwnProperty(key)) {\n                            newValue[key] = toJson(value[key]);\n                        }\n                    }\n                    value = newValue;\n                }\n                return value;\n            }\n            while (queue.length) {\n                var obj = queue.shift();\n                var str = toJson(obj, obj);\n                json.push(str);\n            }\n            return json;\n        };\n        this.fromJson = function (json) {\n            var refMap = {};\n            function findDeserilizer(data, cls) {\n                if (!cls || !cls._deserialize) {\n                    cls = CLASS_BY_TYPE_PROP[data.type];\n                }\n                return cls && cls._deserialize;\n            }\n            /**\n             * Deserialize a data object.\n             */\n            function deserialize(cls, data, ctx) {\n                var deserializer = findDeserilizer(data, cls);\n                if (!deserializer) {\n                    return;\n                }\n                data = preDeserialize(data);\n                var obj = deserializer(data, ctx, restoreRef);\n                obj = postDeserialize(obj, data);\n                return obj;\n            }\n            /**\n             * Restore a ref object or deserialize a data object.\n             *\n             * This is passed as callback to class deserializers.\n             */\n            function restoreRef(cls, ref, ctx) {\n                if (!ref.refIndex) {\n                    return cls && cls._deserialize && deserialize(cls, ref, ctx);\n                }\n                cls = restoreTypes[ref.refType] || cls;\n                var index = ref.refIndex;\n                if (!refMap[index]) {\n                    var data = json[index];\n                    var obj = deserialize(cls, data, ctx);\n                    refMap[index] = obj;\n                }\n                return refMap[index];\n            }\n            var root = rootClass._deserialize(json[0], null, restoreRef);\n            return root;\n        };\n    }\n    var serializer = new Serializer();\n    Serializer.toJson = serializer.toJson;\n    Serializer.fromJson = serializer.fromJson;\n\n    /*\n     * Planck.js\n     * The MIT License\n     * Copyright (c) 2021 Erin Catto, Ali Shakiba\n     *\n     * Permission is hereby granted, free of charge, to any person obtaining a copy\n     * of this software and associated documentation files (the \"Software\"), to deal\n     * in the Software without restriction, including without limitation the rights\n     * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n     * copies of the Software, and to permit persons to whom the Software is\n     * furnished to do so, subject to the following conditions:\n     *\n     * The above copyright notice and this permission notice shall be included in all\n     * copies or substantial portions of the Software.\n     *\n     * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n     * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n     * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n     * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n     * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n     * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n     * SOFTWARE.\n     */\n    Contact.addType(CircleShape.TYPE, CircleShape.TYPE, CircleCircleContact);\n    function CircleCircleContact(manifold, xfA, fixtureA, indexA, xfB, fixtureB, indexB) {\n        CollideCircles(manifold, fixtureA.getShape(), xfA, fixtureB.getShape(), xfB);\n    }\n    function CollideCircles(manifold, circleA, xfA, circleB, xfB) {\n        manifold.pointCount = 0;\n        var pA = Transform.mulVec2(xfA, circleA.m_p);\n        var pB = Transform.mulVec2(xfB, circleB.m_p);\n        var distSqr = Vec2.distanceSquared(pB, pA);\n        var rA = circleA.m_radius;\n        var rB = circleB.m_radius;\n        var radius = rA + rB;\n        if (distSqr > radius * radius) {\n            return;\n        }\n        manifold.type = ManifoldType.e_circles;\n        manifold.localPoint.setVec2(circleA.m_p);\n        manifold.localNormal.setZero();\n        manifold.pointCount = 1;\n        manifold.points[0].localPoint.setVec2(circleB.m_p);\n        // manifold.points[0].id.key = 0;\n        manifold.points[0].id.cf.indexA = 0;\n        manifold.points[0].id.cf.typeA = ContactFeatureType.e_vertex;\n        manifold.points[0].id.cf.indexB = 0;\n        manifold.points[0].id.cf.typeB = ContactFeatureType.e_vertex;\n    }\n\n    /*\n     * Planck.js\n     * The MIT License\n     * Copyright (c) 2021 Erin Catto, Ali Shakiba\n     *\n     * Permission is hereby granted, free of charge, to any person obtaining a copy\n     * of this software and associated documentation files (the \"Software\"), to deal\n     * in the Software without restriction, including without limitation the rights\n     * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n     * copies of the Software, and to permit persons to whom the Software is\n     * furnished to do so, subject to the following conditions:\n     *\n     * The above copyright notice and this permission notice shall be included in all\n     * copies or substantial portions of the Software.\n     *\n     * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n     * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n     * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n     * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n     * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n     * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n     * SOFTWARE.\n     */\n    Contact.addType(EdgeShape.TYPE, CircleShape.TYPE, EdgeCircleContact);\n    Contact.addType(ChainShape.TYPE, CircleShape.TYPE, ChainCircleContact);\n    function EdgeCircleContact(manifold, xfA, fixtureA, indexA, xfB, fixtureB, indexB) {\n        var shapeA = fixtureA.getShape();\n        var shapeB = fixtureB.getShape();\n        CollideEdgeCircle(manifold, shapeA, xfA, shapeB, xfB);\n    }\n    function ChainCircleContact(manifold, xfA, fixtureA, indexA, xfB, fixtureB, indexB) {\n        var chain = fixtureA.getShape();\n        var edge = new EdgeShape();\n        chain.getChildEdge(edge, indexA);\n        var shapeA = edge;\n        var shapeB = fixtureB.getShape();\n        CollideEdgeCircle(manifold, shapeA, xfA, shapeB, xfB);\n    }\n    // Compute contact points for edge versus circle.\n    // This accounts for edge connectivity.\n    function CollideEdgeCircle(manifold, edgeA, xfA, circleB, xfB) {\n        manifold.pointCount = 0;\n        // Compute circle in frame of edge\n        var Q = Transform.mulTVec2(xfA, Transform.mulVec2(xfB, circleB.m_p));\n        var A = edgeA.m_vertex1;\n        var B = edgeA.m_vertex2;\n        var e = Vec2.sub(B, A);\n        // Barycentric coordinates\n        var u = Vec2.dot(e, Vec2.sub(B, Q));\n        var v = Vec2.dot(e, Vec2.sub(Q, A));\n        var radius = edgeA.m_radius + circleB.m_radius;\n        // Region A\n        if (v <= 0.0) {\n            var P_1 = Vec2.clone(A);\n            var d_1 = Vec2.sub(Q, P_1);\n            var dd_1 = Vec2.dot(d_1, d_1);\n            if (dd_1 > radius * radius) {\n                return;\n            }\n            // Is there an edge connected to A?\n            if (edgeA.m_hasVertex0) {\n                var A1 = edgeA.m_vertex0;\n                var B1 = A;\n                var e1 = Vec2.sub(B1, A1);\n                var u1 = Vec2.dot(e1, Vec2.sub(B1, Q));\n                // Is the circle in Region AB of the previous edge?\n                if (u1 > 0.0) {\n                    return;\n                }\n            }\n            manifold.type = ManifoldType.e_circles;\n            manifold.localNormal.setZero();\n            manifold.localPoint.setVec2(P_1);\n            manifold.pointCount = 1;\n            manifold.points[0].localPoint.setVec2(circleB.m_p);\n            // manifold.points[0].id.key = 0;\n            manifold.points[0].id.cf.indexA = 0;\n            manifold.points[0].id.cf.typeA = ContactFeatureType.e_vertex;\n            manifold.points[0].id.cf.indexB = 0;\n            manifold.points[0].id.cf.typeB = ContactFeatureType.e_vertex;\n            return;\n        }\n        // Region B\n        if (u <= 0.0) {\n            var P_2 = Vec2.clone(B);\n            var d_2 = Vec2.sub(Q, P_2);\n            var dd_2 = Vec2.dot(d_2, d_2);\n            if (dd_2 > radius * radius) {\n                return;\n            }\n            // Is there an edge connected to B?\n            if (edgeA.m_hasVertex3) {\n                var B2 = edgeA.m_vertex3;\n                var A2 = B;\n                var e2 = Vec2.sub(B2, A2);\n                var v2 = Vec2.dot(e2, Vec2.sub(Q, A2));\n                // Is the circle in Region AB of the next edge?\n                if (v2 > 0.0) {\n                    return;\n                }\n            }\n            manifold.type = ManifoldType.e_circles;\n            manifold.localNormal.setZero();\n            manifold.localPoint.setVec2(P_2);\n            manifold.pointCount = 1;\n            manifold.points[0].localPoint.setVec2(circleB.m_p);\n            // manifold.points[0].id.key = 0;\n            manifold.points[0].id.cf.indexA = 1;\n            manifold.points[0].id.cf.typeA = ContactFeatureType.e_vertex;\n            manifold.points[0].id.cf.indexB = 0;\n            manifold.points[0].id.cf.typeB = ContactFeatureType.e_vertex;\n            return;\n        }\n        // Region AB\n        var den = Vec2.dot(e, e);\n        var P = Vec2.combine(u / den, A, v / den, B);\n        var d = Vec2.sub(Q, P);\n        var dd = Vec2.dot(d, d);\n        if (dd > radius * radius) {\n            return;\n        }\n        var n = Vec2.neo(-e.y, e.x);\n        if (Vec2.dot(n, Vec2.sub(Q, A)) < 0.0) {\n            n.setNum(-n.x, -n.y);\n        }\n        n.normalize();\n        manifold.type = ManifoldType.e_faceA;\n        manifold.localNormal = n;\n        manifold.localPoint.setVec2(A);\n        manifold.pointCount = 1;\n        manifold.points[0].localPoint.setVec2(circleB.m_p);\n        // manifold.points[0].id.key = 0;\n        manifold.points[0].id.cf.indexA = 0;\n        manifold.points[0].id.cf.typeA = ContactFeatureType.e_face;\n        manifold.points[0].id.cf.indexB = 0;\n        manifold.points[0].id.cf.typeB = ContactFeatureType.e_vertex;\n    }\n\n    /*\n     * Planck.js\n     * The MIT License\n     * Copyright (c) 2021 Erin Catto, Ali Shakiba\n     *\n     * Permission is hereby granted, free of charge, to any person obtaining a copy\n     * of this software and associated documentation files (the \"Software\"), to deal\n     * in the Software without restriction, including without limitation the rights\n     * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n     * copies of the Software, and to permit persons to whom the Software is\n     * furnished to do so, subject to the following conditions:\n     *\n     * The above copyright notice and this permission notice shall be included in all\n     * copies or substantial portions of the Software.\n     *\n     * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n     * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n     * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n     * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n     * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n     * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n     * SOFTWARE.\n     */\n    Contact.addType(PolygonShape.TYPE, PolygonShape.TYPE, PolygonContact);\n    function PolygonContact(manifold, xfA, fixtureA, indexA, xfB, fixtureB, indexB) {\n        CollidePolygons(manifold, fixtureA.getShape(), xfA, fixtureB.getShape(), xfB);\n    }\n    /**\n     * Find the max separation between poly1 and poly2 using edge normals from\n     * poly1.\n     */\n    function findMaxSeparation(poly1, xf1, poly2, xf2, output) {\n        var count1 = poly1.m_count;\n        var count2 = poly2.m_count;\n        var n1s = poly1.m_normals;\n        var v1s = poly1.m_vertices;\n        var v2s = poly2.m_vertices;\n        var xf = Transform.mulTXf(xf2, xf1);\n        var bestIndex = 0;\n        var maxSeparation = -Infinity;\n        for (var i = 0; i < count1; ++i) {\n            // Get poly1 normal in frame2.\n            var n = Rot.mulVec2(xf.q, n1s[i]);\n            var v1 = Transform.mulVec2(xf, v1s[i]);\n            // Find deepest point for normal i.\n            var si = Infinity;\n            for (var j = 0; j < count2; ++j) {\n                var sij = Vec2.dot(n, v2s[j]) - Vec2.dot(n, v1);\n                if (sij < si) {\n                    si = sij;\n                }\n            }\n            if (si > maxSeparation) {\n                maxSeparation = si;\n                bestIndex = i;\n            }\n        }\n        // used to keep last FindMaxSeparation call values\n        output.maxSeparation = maxSeparation;\n        output.bestIndex = bestIndex;\n    }\n    function findIncidentEdge(c, poly1, xf1, edge1, poly2, xf2) {\n        var normals1 = poly1.m_normals;\n        var count2 = poly2.m_count;\n        var vertices2 = poly2.m_vertices;\n        var normals2 = poly2.m_normals;\n        // Get the normal of the reference edge in poly2's frame.\n        var normal1 = Rot.mulTVec2(xf2.q, Rot.mulVec2(xf1.q, normals1[edge1]));\n        // Find the incident edge on poly2.\n        var index = 0;\n        var minDot = Infinity;\n        for (var i = 0; i < count2; ++i) {\n            var dot = Vec2.dot(normal1, normals2[i]);\n            if (dot < minDot) {\n                minDot = dot;\n                index = i;\n            }\n        }\n        // Build the clip vertices for the incident edge.\n        var i1 = index;\n        var i2 = i1 + 1 < count2 ? i1 + 1 : 0;\n        c[0].v = Transform.mulVec2(xf2, vertices2[i1]);\n        c[0].id.cf.indexA = edge1;\n        c[0].id.cf.indexB = i1;\n        c[0].id.cf.typeA = ContactFeatureType.e_face;\n        c[0].id.cf.typeB = ContactFeatureType.e_vertex;\n        c[1].v = Transform.mulVec2(xf2, vertices2[i2]);\n        c[1].id.cf.indexA = edge1;\n        c[1].id.cf.indexB = i2;\n        c[1].id.cf.typeA = ContactFeatureType.e_face;\n        c[1].id.cf.typeB = ContactFeatureType.e_vertex;\n    }\n    var maxSeparation = {\n        maxSeparation: 0,\n        bestIndex: 0,\n    };\n    /**\n     *\n     * Find edge normal of max separation on A - return if separating axis is found<br>\n     * Find edge normal of max separation on B - return if separation axis is found<br>\n     * Choose reference edge as min(minA, minB)<br>\n     * Find incident edge<br>\n     * Clip\n     *\n     * The normal points from 1 to 2\n     */\n    function CollidePolygons(manifold, polyA, xfA, polyB, xfB) {\n        manifold.pointCount = 0;\n        var totalRadius = polyA.m_radius + polyB.m_radius;\n        findMaxSeparation(polyA, xfA, polyB, xfB, maxSeparation);\n        var edgeA = maxSeparation.bestIndex;\n        var separationA = maxSeparation.maxSeparation;\n        if (separationA > totalRadius)\n            return;\n        findMaxSeparation(polyB, xfB, polyA, xfA, maxSeparation);\n        var edgeB = maxSeparation.bestIndex;\n        var separationB = maxSeparation.maxSeparation;\n        if (separationB > totalRadius)\n            return;\n        var poly1; // reference polygon\n        var poly2; // incident polygon\n        var xf1;\n        var xf2;\n        var edge1; // reference edge\n        var flip;\n        var k_tol = 0.1 * Settings.linearSlop;\n        if (separationB > separationA + k_tol) {\n            poly1 = polyB;\n            poly2 = polyA;\n            xf1 = xfB;\n            xf2 = xfA;\n            edge1 = edgeB;\n            manifold.type = ManifoldType.e_faceB;\n            flip = 1;\n        }\n        else {\n            poly1 = polyA;\n            poly2 = polyB;\n            xf1 = xfA;\n            xf2 = xfB;\n            edge1 = edgeA;\n            manifold.type = ManifoldType.e_faceA;\n            flip = 0;\n        }\n        var incidentEdge = [new ClipVertex(), new ClipVertex()];\n        findIncidentEdge(incidentEdge, poly1, xf1, edge1, poly2, xf2);\n        var count1 = poly1.m_count;\n        var vertices1 = poly1.m_vertices;\n        var iv1 = edge1;\n        var iv2 = edge1 + 1 < count1 ? edge1 + 1 : 0;\n        var v11 = vertices1[iv1];\n        var v12 = vertices1[iv2];\n        var localTangent = Vec2.sub(v12, v11);\n        localTangent.normalize();\n        var localNormal = Vec2.crossVec2Num(localTangent, 1.0);\n        var planePoint = Vec2.combine(0.5, v11, 0.5, v12);\n        var tangent = Rot.mulVec2(xf1.q, localTangent);\n        var normal = Vec2.crossVec2Num(tangent, 1.0);\n        v11 = Transform.mulVec2(xf1, v11);\n        v12 = Transform.mulVec2(xf1, v12);\n        // Face offset.\n        var frontOffset = Vec2.dot(normal, v11);\n        // Side offsets, extended by polytope skin thickness.\n        var sideOffset1 = -Vec2.dot(tangent, v11) + totalRadius;\n        var sideOffset2 = Vec2.dot(tangent, v12) + totalRadius;\n        // Clip incident edge against extruded edge1 side edges.\n        var clipPoints1 = [new ClipVertex(), new ClipVertex()];\n        var clipPoints2 = [new ClipVertex(), new ClipVertex()];\n        var np;\n        // Clip to box side 1\n        np = clipSegmentToLine(clipPoints1, incidentEdge, Vec2.neg(tangent), sideOffset1, iv1);\n        if (np < 2) {\n            return;\n        }\n        // Clip to negative box side 1\n        np = clipSegmentToLine(clipPoints2, clipPoints1, tangent, sideOffset2, iv2);\n        if (np < 2) {\n            return;\n        }\n        // Now clipPoints2 contains the clipped points.\n        manifold.localNormal = localNormal;\n        manifold.localPoint = planePoint;\n        var pointCount = 0;\n        for (var i = 0; i < clipPoints2.length /* maxManifoldPoints */; ++i) {\n            var separation = Vec2.dot(normal, clipPoints2[i].v) - frontOffset;\n            if (separation <= totalRadius) {\n                var cp = manifold.points[pointCount];\n                cp.localPoint.setVec2(Transform.mulTVec2(xf2, clipPoints2[i].v));\n                cp.id = clipPoints2[i].id;\n                if (flip) {\n                    // Swap features\n                    var cf = cp.id.cf;\n                    var indexA = cf.indexA;\n                    var indexB = cf.indexB;\n                    var typeA = cf.typeA;\n                    var typeB = cf.typeB;\n                    cf.indexA = indexB;\n                    cf.indexB = indexA;\n                    cf.typeA = typeB;\n                    cf.typeB = typeA;\n                }\n                ++pointCount;\n            }\n        }\n        manifold.pointCount = pointCount;\n    }\n\n    /*\n     * Planck.js\n     * The MIT License\n     * Copyright (c) 2021 Erin Catto, Ali Shakiba\n     *\n     * Permission is hereby granted, free of charge, to any person obtaining a copy\n     * of this software and associated documentation files (the \"Software\"), to deal\n     * in the Software without restriction, including without limitation the rights\n     * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n     * copies of the Software, and to permit persons to whom the Software is\n     * furnished to do so, subject to the following conditions:\n     *\n     * The above copyright notice and this permission notice shall be included in all\n     * copies or substantial portions of the Software.\n     *\n     * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n     * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n     * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n     * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n     * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n     * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n     * SOFTWARE.\n     */\n    Contact.addType(PolygonShape.TYPE, CircleShape.TYPE, PolygonCircleContact);\n    function PolygonCircleContact(manifold, xfA, fixtureA, indexA, xfB, fixtureB, indexB) {\n        CollidePolygonCircle(manifold, fixtureA.getShape(), xfA, fixtureB.getShape(), xfB);\n    }\n    function CollidePolygonCircle(manifold, polygonA, xfA, circleB, xfB) {\n        manifold.pointCount = 0;\n        // Compute circle position in the frame of the polygon.\n        var c = Transform.mulVec2(xfB, circleB.m_p);\n        var cLocal = Transform.mulTVec2(xfA, c);\n        // Find the min separating edge.\n        var normalIndex = 0;\n        var separation = -Infinity;\n        var radius = polygonA.m_radius + circleB.m_radius;\n        var vertexCount = polygonA.m_count;\n        var vertices = polygonA.m_vertices;\n        var normals = polygonA.m_normals;\n        for (var i = 0; i < vertexCount; ++i) {\n            var s = Vec2.dot(normals[i], Vec2.sub(cLocal, vertices[i]));\n            if (s > radius) {\n                // Early out.\n                return;\n            }\n            if (s > separation) {\n                separation = s;\n                normalIndex = i;\n            }\n        }\n        // Vertices that subtend the incident face.\n        var vertIndex1 = normalIndex;\n        var vertIndex2 = vertIndex1 + 1 < vertexCount ? vertIndex1 + 1 : 0;\n        var v1 = vertices[vertIndex1];\n        var v2 = vertices[vertIndex2];\n        // If the center is inside the polygon ...\n        if (separation < math$1.EPSILON) {\n            manifold.pointCount = 1;\n            manifold.type = ManifoldType.e_faceA;\n            manifold.localNormal.setVec2(normals[normalIndex]);\n            manifold.localPoint.setCombine(0.5, v1, 0.5, v2);\n            manifold.points[0].localPoint = circleB.m_p;\n            // manifold.points[0].id.key = 0;\n            manifold.points[0].id.cf.indexA = 0;\n            manifold.points[0].id.cf.typeA = ContactFeatureType.e_vertex;\n            manifold.points[0].id.cf.indexB = 0;\n            manifold.points[0].id.cf.typeB = ContactFeatureType.e_vertex;\n            return;\n        }\n        // Compute barycentric coordinates\n        var u1 = Vec2.dot(Vec2.sub(cLocal, v1), Vec2.sub(v2, v1));\n        var u2 = Vec2.dot(Vec2.sub(cLocal, v2), Vec2.sub(v1, v2));\n        if (u1 <= 0.0) {\n            if (Vec2.distanceSquared(cLocal, v1) > radius * radius) {\n                return;\n            }\n            manifold.pointCount = 1;\n            manifold.type = ManifoldType.e_faceA;\n            manifold.localNormal.setCombine(1, cLocal, -1, v1);\n            manifold.localNormal.normalize();\n            manifold.localPoint = v1;\n            manifold.points[0].localPoint.setVec2(circleB.m_p);\n            // manifold.points[0].id.key = 0;\n            manifold.points[0].id.cf.indexA = 0;\n            manifold.points[0].id.cf.typeA = ContactFeatureType.e_vertex;\n            manifold.points[0].id.cf.indexB = 0;\n            manifold.points[0].id.cf.typeB = ContactFeatureType.e_vertex;\n        }\n        else if (u2 <= 0.0) {\n            if (Vec2.distanceSquared(cLocal, v2) > radius * radius) {\n                return;\n            }\n            manifold.pointCount = 1;\n            manifold.type = ManifoldType.e_faceA;\n            manifold.localNormal.setCombine(1, cLocal, -1, v2);\n            manifold.localNormal.normalize();\n            manifold.localPoint.setVec2(v2);\n            manifold.points[0].localPoint.setVec2(circleB.m_p);\n            // manifold.points[0].id.key = 0;\n            manifold.points[0].id.cf.indexA = 0;\n            manifold.points[0].id.cf.typeA = ContactFeatureType.e_vertex;\n            manifold.points[0].id.cf.indexB = 0;\n            manifold.points[0].id.cf.typeB = ContactFeatureType.e_vertex;\n        }\n        else {\n            var faceCenter = Vec2.mid(v1, v2);\n            var separation_1 = Vec2.dot(cLocal, normals[vertIndex1]) - Vec2.dot(faceCenter, normals[vertIndex1]);\n            if (separation_1 > radius) {\n                return;\n            }\n            manifold.pointCount = 1;\n            manifold.type = ManifoldType.e_faceA;\n            manifold.localNormal.setVec2(normals[vertIndex1]);\n            manifold.localPoint.setVec2(faceCenter);\n            manifold.points[0].localPoint.setVec2(circleB.m_p);\n            // manifold.points[0].id.key = 0;\n            manifold.points[0].id.cf.indexA = 0;\n            manifold.points[0].id.cf.typeA = ContactFeatureType.e_vertex;\n            manifold.points[0].id.cf.indexB = 0;\n            manifold.points[0].id.cf.typeB = ContactFeatureType.e_vertex;\n        }\n    }\n\n    /*\n     * Planck.js\n     * The MIT License\n     * Copyright (c) 2021 Erin Catto, Ali Shakiba\n     *\n     * Permission is hereby granted, free of charge, to any person obtaining a copy\n     * of this software and associated documentation files (the \"Software\"), to deal\n     * in the Software without restriction, including without limitation the rights\n     * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n     * copies of the Software, and to permit persons to whom the Software is\n     * furnished to do so, subject to the following conditions:\n     *\n     * The above copyright notice and this permission notice shall be included in all\n     * copies or substantial portions of the Software.\n     *\n     * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n     * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n     * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n     * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n     * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n     * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n     * SOFTWARE.\n     */\n    Contact.addType(EdgeShape.TYPE, PolygonShape.TYPE, EdgePolygonContact);\n    Contact.addType(ChainShape.TYPE, PolygonShape.TYPE, ChainPolygonContact);\n    function EdgePolygonContact(manifold, xfA, fA, indexA, xfB, fB, indexB) {\n        CollideEdgePolygon(manifold, fA.getShape(), xfA, fB.getShape(), xfB);\n    }\n    function ChainPolygonContact(manifold, xfA, fA, indexA, xfB, fB, indexB) {\n        var chain = fA.getShape();\n        var edge = new EdgeShape();\n        chain.getChildEdge(edge, indexA);\n        CollideEdgePolygon(manifold, edge, xfA, fB.getShape(), xfB);\n    }\n    var EPAxisType;\n    (function (EPAxisType) {\n        EPAxisType[EPAxisType[\"e_unknown\"] = -1] = \"e_unknown\";\n        EPAxisType[EPAxisType[\"e_edgeA\"] = 1] = \"e_edgeA\";\n        EPAxisType[EPAxisType[\"e_edgeB\"] = 2] = \"e_edgeB\";\n    })(EPAxisType || (EPAxisType = {}));\n    // unused?\n    var VertexType;\n    (function (VertexType) {\n        VertexType[VertexType[\"e_isolated\"] = 0] = \"e_isolated\";\n        VertexType[VertexType[\"e_concave\"] = 1] = \"e_concave\";\n        VertexType[VertexType[\"e_convex\"] = 2] = \"e_convex\";\n    })(VertexType || (VertexType = {}));\n    /**\n     * This structure is used to keep track of the best separating axis.\n     */\n    var EPAxis = /** @class */ (function () {\n        function EPAxis() {\n        }\n        return EPAxis;\n    }());\n    /**\n     * This holds polygon B expressed in frame A.\n     */\n    var TempPolygon = /** @class */ (function () {\n        function TempPolygon() {\n            this.vertices = []; // [Settings.maxPolygonVertices]\n            this.normals = []; // [Settings.maxPolygonVertices];\n            this.count = 0;\n        }\n        return TempPolygon;\n    }());\n    /**\n     * Reference face used for clipping\n     */\n    var ReferenceFace = /** @class */ (function () {\n        function ReferenceFace() {\n            this.normal = Vec2.zero();\n            this.sideNormal1 = Vec2.zero();\n            this.sideNormal2 = Vec2.zero();\n        }\n        return ReferenceFace;\n    }());\n    // reused\n    var edgeAxis = new EPAxis();\n    var polygonAxis = new EPAxis();\n    var polygonBA = new TempPolygon();\n    var rf = new ReferenceFace();\n    /**\n     * This function collides and edge and a polygon, taking into account edge\n     * adjacency.\n     */\n    function CollideEdgePolygon(manifold, edgeA, xfA, polygonB, xfB) {\n        // Algorithm:\n        // 1. Classify v1 and v2\n        // 2. Classify polygon centroid as front or back\n        // 3. Flip normal if necessary\n        // 4. Initialize normal range to [-pi, pi] about face normal\n        // 5. Adjust normal range according to adjacent edges\n        // 6. Visit each separating axes, only accept axes within the range\n        // 7. Return if _any_ axis indicates separation\n        // 8. Clip\n        // let m_type1: VertexType;\n        // let m_type2: VertexType;\n        var xf = Transform.mulTXf(xfA, xfB);\n        var centroidB = Transform.mulVec2(xf, polygonB.m_centroid);\n        var v0 = edgeA.m_vertex0;\n        var v1 = edgeA.m_vertex1;\n        var v2 = edgeA.m_vertex2;\n        var v3 = edgeA.m_vertex3;\n        var hasVertex0 = edgeA.m_hasVertex0;\n        var hasVertex3 = edgeA.m_hasVertex3;\n        var edge1 = Vec2.sub(v2, v1);\n        edge1.normalize();\n        var normal1 = Vec2.neo(edge1.y, -edge1.x);\n        var offset1 = Vec2.dot(normal1, Vec2.sub(centroidB, v1));\n        var offset0 = 0.0;\n        var offset2 = 0.0;\n        var convex1 = false;\n        var convex2 = false;\n        var normal0;\n        var normal2;\n        // Is there a preceding edge?\n        if (hasVertex0) {\n            var edge0 = Vec2.sub(v1, v0);\n            edge0.normalize();\n            normal0 = Vec2.neo(edge0.y, -edge0.x);\n            convex1 = Vec2.crossVec2Vec2(edge0, edge1) >= 0.0;\n            offset0 = Vec2.dot(normal0, centroidB) - Vec2.dot(normal0, v0);\n        }\n        // Is there a following edge?\n        if (hasVertex3) {\n            var edge2 = Vec2.sub(v3, v2);\n            edge2.normalize();\n            normal2 = Vec2.neo(edge2.y, -edge2.x);\n            convex2 = Vec2.crossVec2Vec2(edge1, edge2) > 0.0;\n            offset2 = Vec2.dot(normal2, centroidB) - Vec2.dot(normal2, v2);\n        }\n        var front;\n        var normal = Vec2.zero();\n        var lowerLimit = Vec2.zero();\n        var upperLimit = Vec2.zero();\n        // Determine front or back collision. Determine collision normal limits.\n        if (hasVertex0 && hasVertex3) {\n            if (convex1 && convex2) {\n                front = offset0 >= 0.0 || offset1 >= 0.0 || offset2 >= 0.0;\n                if (front) {\n                    normal.setVec2(normal1);\n                    lowerLimit.setVec2(normal0);\n                    upperLimit.setVec2(normal2);\n                }\n                else {\n                    normal.setMul(-1, normal1);\n                    lowerLimit.setMul(-1, normal1);\n                    upperLimit.setMul(-1, normal1);\n                }\n            }\n            else if (convex1) {\n                front = offset0 >= 0.0 || (offset1 >= 0.0 && offset2 >= 0.0);\n                if (front) {\n                    normal.setVec2(normal1);\n                    lowerLimit.setVec2(normal0);\n                    upperLimit.setVec2(normal1);\n                }\n                else {\n                    normal.setMul(-1, normal1);\n                    lowerLimit.setMul(-1, normal2);\n                    upperLimit.setMul(-1, normal1);\n                }\n            }\n            else if (convex2) {\n                front = offset2 >= 0.0 || (offset0 >= 0.0 && offset1 >= 0.0);\n                if (front) {\n                    normal.setVec2(normal1);\n                    lowerLimit.setVec2(normal1);\n                    upperLimit.setVec2(normal2);\n                }\n                else {\n                    normal.setMul(-1, normal1);\n                    lowerLimit.setMul(-1, normal1);\n                    upperLimit.setMul(-1, normal0);\n                }\n            }\n            else {\n                front = offset0 >= 0.0 && offset1 >= 0.0 && offset2 >= 0.0;\n                if (front) {\n                    normal.setVec2(normal1);\n                    lowerLimit.setVec2(normal1);\n                    upperLimit.setVec2(normal1);\n                }\n                else {\n                    normal.setMul(-1, normal1);\n                    lowerLimit.setMul(-1, normal2);\n                    upperLimit.setMul(-1, normal0);\n                }\n            }\n        }\n        else if (hasVertex0) {\n            if (convex1) {\n                front = offset0 >= 0.0 || offset1 >= 0.0;\n                if (front) {\n                    normal.setVec2(normal1);\n                    lowerLimit.setVec2(normal0);\n                    upperLimit.setMul(-1, normal1);\n                }\n                else {\n                    normal.setMul(-1, normal1);\n                    lowerLimit.setVec2(normal1);\n                    upperLimit.setMul(-1, normal1);\n                }\n            }\n            else {\n                front = offset0 >= 0.0 && offset1 >= 0.0;\n                if (front) {\n                    normal.setVec2(normal1);\n                    lowerLimit.setVec2(normal1);\n                    upperLimit.setMul(-1, normal1);\n                }\n                else {\n                    normal.setMul(-1, normal1);\n                    lowerLimit.setVec2(normal1);\n                    upperLimit.setMul(-1, normal0);\n                }\n            }\n        }\n        else if (hasVertex3) {\n            if (convex2) {\n                front = offset1 >= 0.0 || offset2 >= 0.0;\n                if (front) {\n                    normal.setVec2(normal1);\n                    lowerLimit.setMul(-1, normal1);\n                    upperLimit.setVec2(normal2);\n                }\n                else {\n                    normal.setMul(-1, normal1);\n                    lowerLimit.setMul(-1, normal1);\n                    upperLimit.setVec2(normal1);\n                }\n            }\n            else {\n                front = offset1 >= 0.0 && offset2 >= 0.0;\n                if (front) {\n                    normal.setVec2(normal1);\n                    lowerLimit.setMul(-1, normal1);\n                    upperLimit.setVec2(normal1);\n                }\n                else {\n                    normal.setMul(-1, normal1);\n                    lowerLimit.setMul(-1, normal2);\n                    upperLimit.setVec2(normal1);\n                }\n            }\n        }\n        else {\n            front = offset1 >= 0.0;\n            if (front) {\n                normal.setVec2(normal1);\n                lowerLimit.setMul(-1, normal1);\n                upperLimit.setMul(-1, normal1);\n            }\n            else {\n                normal.setMul(-1, normal1);\n                lowerLimit.setVec2(normal1);\n                upperLimit.setVec2(normal1);\n            }\n        }\n        // Get polygonB in frameA\n        polygonBA.count = polygonB.m_count;\n        for (var i = 0; i < polygonB.m_count; ++i) {\n            polygonBA.vertices[i] = Transform.mulVec2(xf, polygonB.m_vertices[i]);\n            polygonBA.normals[i] = Rot.mulVec2(xf.q, polygonB.m_normals[i]);\n        }\n        var radius = 2.0 * Settings.polygonRadius;\n        manifold.pointCount = 0;\n        { // ComputeEdgeSeparation\n            edgeAxis.type = EPAxisType.e_edgeA;\n            edgeAxis.index = front ? 0 : 1;\n            edgeAxis.separation = Infinity;\n            for (var i = 0; i < polygonBA.count; ++i) {\n                var s = Vec2.dot(normal, Vec2.sub(polygonBA.vertices[i], v1));\n                if (s < edgeAxis.separation) {\n                    edgeAxis.separation = s;\n                }\n            }\n        }\n        // If no valid normal can be found than this edge should not collide.\n        // @ts-ignore\n        if (edgeAxis.type == EPAxisType.e_unknown) {\n            return;\n        }\n        if (edgeAxis.separation > radius) {\n            return;\n        }\n        { // ComputePolygonSeparation\n            polygonAxis.type = EPAxisType.e_unknown;\n            polygonAxis.index = -1;\n            polygonAxis.separation = -Infinity;\n            var perp = Vec2.neo(-normal.y, normal.x);\n            for (var i = 0; i < polygonBA.count; ++i) {\n                var n = Vec2.neg(polygonBA.normals[i]);\n                var s1 = Vec2.dot(n, Vec2.sub(polygonBA.vertices[i], v1));\n                var s2 = Vec2.dot(n, Vec2.sub(polygonBA.vertices[i], v2));\n                var s = math$1.min(s1, s2);\n                if (s > radius) {\n                    // No collision\n                    polygonAxis.type = EPAxisType.e_edgeB;\n                    polygonAxis.index = i;\n                    polygonAxis.separation = s;\n                    break;\n                }\n                // Adjacency\n                if (Vec2.dot(n, perp) >= 0.0) {\n                    if (Vec2.dot(Vec2.sub(n, upperLimit), normal) < -Settings.angularSlop) {\n                        continue;\n                    }\n                }\n                else {\n                    if (Vec2.dot(Vec2.sub(n, lowerLimit), normal) < -Settings.angularSlop) {\n                        continue;\n                    }\n                }\n                if (s > polygonAxis.separation) {\n                    polygonAxis.type = EPAxisType.e_edgeB;\n                    polygonAxis.index = i;\n                    polygonAxis.separation = s;\n                }\n            }\n        }\n        if (polygonAxis.type != EPAxisType.e_unknown && polygonAxis.separation > radius) {\n            return;\n        }\n        // Use hysteresis for jitter reduction.\n        var k_relativeTol = 0.98;\n        var k_absoluteTol = 0.001;\n        var primaryAxis;\n        if (polygonAxis.type == EPAxisType.e_unknown) {\n            primaryAxis = edgeAxis;\n        }\n        else if (polygonAxis.separation > k_relativeTol * edgeAxis.separation + k_absoluteTol) {\n            primaryAxis = polygonAxis;\n        }\n        else {\n            primaryAxis = edgeAxis;\n        }\n        var ie = [new ClipVertex(), new ClipVertex()];\n        if (primaryAxis.type == EPAxisType.e_edgeA) {\n            manifold.type = ManifoldType.e_faceA;\n            // Search for the polygon normal that is most anti-parallel to the edge\n            // normal.\n            var bestIndex = 0;\n            var bestValue = Vec2.dot(normal, polygonBA.normals[0]);\n            for (var i = 1; i < polygonBA.count; ++i) {\n                var value = Vec2.dot(normal, polygonBA.normals[i]);\n                if (value < bestValue) {\n                    bestValue = value;\n                    bestIndex = i;\n                }\n            }\n            var i1 = bestIndex;\n            var i2 = i1 + 1 < polygonBA.count ? i1 + 1 : 0;\n            ie[0].v = polygonBA.vertices[i1];\n            ie[0].id.cf.indexA = 0;\n            ie[0].id.cf.indexB = i1;\n            ie[0].id.cf.typeA = ContactFeatureType.e_face;\n            ie[0].id.cf.typeB = ContactFeatureType.e_vertex;\n            ie[1].v = polygonBA.vertices[i2];\n            ie[1].id.cf.indexA = 0;\n            ie[1].id.cf.indexB = i2;\n            ie[1].id.cf.typeA = ContactFeatureType.e_face;\n            ie[1].id.cf.typeB = ContactFeatureType.e_vertex;\n            if (front) {\n                rf.i1 = 0;\n                rf.i2 = 1;\n                rf.v1 = v1;\n                rf.v2 = v2;\n                rf.normal.setVec2(normal1);\n            }\n            else {\n                rf.i1 = 1;\n                rf.i2 = 0;\n                rf.v1 = v2;\n                rf.v2 = v1;\n                rf.normal.setMul(-1, normal1);\n            }\n        }\n        else {\n            manifold.type = ManifoldType.e_faceB;\n            ie[0].v = v1;\n            ie[0].id.cf.indexA = 0;\n            ie[0].id.cf.indexB = primaryAxis.index;\n            ie[0].id.cf.typeA = ContactFeatureType.e_vertex;\n            ie[0].id.cf.typeB = ContactFeatureType.e_face;\n            ie[1].v = v2;\n            ie[1].id.cf.indexA = 0;\n            ie[1].id.cf.indexB = primaryAxis.index;\n            ie[1].id.cf.typeA = ContactFeatureType.e_vertex;\n            ie[1].id.cf.typeB = ContactFeatureType.e_face;\n            rf.i1 = primaryAxis.index;\n            rf.i2 = rf.i1 + 1 < polygonBA.count ? rf.i1 + 1 : 0;\n            rf.v1 = polygonBA.vertices[rf.i1];\n            rf.v2 = polygonBA.vertices[rf.i2];\n            rf.normal.setVec2(polygonBA.normals[rf.i1]);\n        }\n        rf.sideNormal1.setNum(rf.normal.y, -rf.normal.x);\n        rf.sideNormal2.setMul(-1, rf.sideNormal1);\n        rf.sideOffset1 = Vec2.dot(rf.sideNormal1, rf.v1);\n        rf.sideOffset2 = Vec2.dot(rf.sideNormal2, rf.v2);\n        // Clip incident edge against extruded edge1 side edges.\n        var clipPoints1 = [new ClipVertex(), new ClipVertex()];\n        var clipPoints2 = [new ClipVertex(), new ClipVertex()];\n        var np;\n        // Clip to box side 1\n        np = clipSegmentToLine(clipPoints1, ie, rf.sideNormal1, rf.sideOffset1, rf.i1);\n        if (np < Settings.maxManifoldPoints) {\n            return;\n        }\n        // Clip to negative box side 1\n        np = clipSegmentToLine(clipPoints2, clipPoints1, rf.sideNormal2, rf.sideOffset2, rf.i2);\n        if (np < Settings.maxManifoldPoints) {\n            return;\n        }\n        // Now clipPoints2 contains the clipped points.\n        if (primaryAxis.type == EPAxisType.e_edgeA) {\n            manifold.localNormal = Vec2.clone(rf.normal);\n            manifold.localPoint = Vec2.clone(rf.v1);\n        }\n        else {\n            manifold.localNormal = Vec2.clone(polygonB.m_normals[rf.i1]);\n            manifold.localPoint = Vec2.clone(polygonB.m_vertices[rf.i1]);\n        }\n        var pointCount = 0;\n        for (var i = 0; i < Settings.maxManifoldPoints; ++i) {\n            var separation = Vec2.dot(rf.normal, Vec2.sub(clipPoints2[i].v, rf.v1));\n            if (separation <= radius) {\n                var cp = manifold.points[pointCount]; // ManifoldPoint\n                if (primaryAxis.type == EPAxisType.e_edgeA) {\n                    cp.localPoint = Transform.mulTVec2(xf, clipPoints2[i].v);\n                    cp.id = clipPoints2[i].id;\n                }\n                else {\n                    cp.localPoint = clipPoints2[i].v;\n                    cp.id.cf.typeA = clipPoints2[i].id.cf.typeB;\n                    cp.id.cf.typeB = clipPoints2[i].id.cf.typeA;\n                    cp.id.cf.indexA = clipPoints2[i].id.cf.indexB;\n                    cp.id.cf.indexB = clipPoints2[i].id.cf.indexA;\n                }\n                ++pointCount;\n            }\n        }\n        manifold.pointCount = pointCount;\n    }\n\n    // @ts-ignore\n    Solver.TimeStep = TimeStep;\n    // @ts-ignore\n    Distance.testOverlap = testOverlap;\n    // @ts-ignore\n    Distance.Input = DistanceInput;\n    // @ts-ignore\n    Distance.Output = DistanceOutput;\n    // @ts-ignore\n    Distance.Proxy = DistanceProxy;\n    // @ts-ignore\n    Distance.Cache = SimplexCache;\n    // @ts-ignore\n    TimeOfImpact.Input = TOIInput;\n    // @ts-ignore\n    TimeOfImpact.Output = TOIOutput;\n\n    function createCommonjsModule(fn) {\n      var module = { exports: {} };\n    \treturn fn(module, module.exports), module.exports;\n    }\n\n    var stats = {};\n\n    var extend = function(base) {\n      for (var i = 1; i < arguments.length; i++) {\n        var obj = arguments[i];\n        for ( var key in obj) {\n          if (obj.hasOwnProperty(key)) {\n            base[key] = obj[key];\n          }\n        }\n      }\n      return base;\n    };\n\n    /**\n     * ! is the definitive JavaScript type testing library\n     * \n     * @copyright 2013-2014 Enrico Marino / Jordan Harband\n     * @license MIT\n     */\n\n    var is_1 = createCommonjsModule(function (module) {\n    var objProto = Object.prototype;\n    var owns = objProto.hasOwnProperty;\n    var toStr = objProto.toString;\n\n    var hexRegex = /^[A-Fa-f0-9]+$/;\n\n    var is = module.exports = {};\n\n    is.a = is.an = is.type = function(value, type) {\n      return typeof value === type;\n    };\n\n    is.defined = function(value) {\n      return typeof value !== 'undefined';\n    };\n\n    is.empty = function(value) {\n      var type = toStr.call(value);\n      var key;\n\n      if ('[object Array]' === type || '[object Arguments]' === type\n          || '[object String]' === type) {\n        return value.length === 0;\n      }\n\n      if ('[object Object]' === type) {\n        for (key in value) {\n          if (owns.call(value, key)) {\n            return false;\n          }\n        }\n        return true;\n      }\n\n      return !value;\n    };\n\n    is.equal = function(value, other) {\n      if (value === other) {\n        return true;\n      }\n\n      var type = toStr.call(value);\n      var key;\n\n      if (type !== toStr.call(other)) {\n        return false;\n      }\n\n      if ('[object Object]' === type) {\n        for (key in value) {\n          if (!is.equal(value[key], other[key]) || !(key in other)) {\n            return false;\n          }\n        }\n        for (key in other) {\n          if (!is.equal(value[key], other[key]) || !(key in value)) {\n            return false;\n          }\n        }\n        return true;\n      }\n\n      if ('[object Array]' === type) {\n        key = value.length;\n        if (key !== other.length) {\n          return false;\n        }\n        while (--key) {\n          if (!is.equal(value[key], other[key])) {\n            return false;\n          }\n        }\n        return true;\n      }\n\n      if ('[object Function]' === type) {\n        return value.prototype === other.prototype;\n      }\n\n      if ('[object Date]' === type) {\n        return value.getTime() === other.getTime();\n      }\n\n      return false;\n    };\n\n    is.instance = function(value, constructor) {\n      return value instanceof constructor;\n    };\n\n    is.nil = function(value) {\n      return value === null;\n    };\n\n    is.undef = function(value) {\n      return typeof value === 'undefined';\n    };\n\n    is.array = function(value) {\n      return '[object Array]' === toStr.call(value);\n    };\n\n    is.emptyarray = function(value) {\n      return is.array(value) && value.length === 0;\n    };\n\n    is.arraylike = function(value) {\n      return !!value && !is.boolean(value) && owns.call(value, 'length')\n          && isFinite(value.length) && is.number(value.length) && value.length >= 0;\n    };\n\n    is.boolean = function(value) {\n      return '[object Boolean]' === toStr.call(value);\n    };\n\n    is.element = function(value) {\n      return value !== undefined && typeof HTMLElement !== 'undefined'\n          && value instanceof HTMLElement && value.nodeType === 1;\n    };\n\n    is.fn = function(value) {\n      return '[object Function]' === toStr.call(value);\n    };\n\n    is.number = function(value) {\n      return '[object Number]' === toStr.call(value);\n    };\n\n    is.nan = function(value) {\n      return !is.number(value) || value !== value;\n    };\n\n    is.object = function(value) {\n      return '[object Object]' === toStr.call(value);\n    };\n\n    is.hash = function(value) {\n      return is.object(value) && value.constructor === Object && !value.nodeType\n          && !value.setInterval;\n    };\n\n    is.regexp = function(value) {\n      return '[object RegExp]' === toStr.call(value);\n    };\n\n    is.string = function(value) {\n      return '[object String]' === toStr.call(value);\n    };\n\n    is.hex = function(value) {\n      return is.string(value) && (!value.length || hexRegex.test(value));\n    };\n    });\n\n    var _await = function() {\n      var count = 0;\n      function fork(fn, n) {\n        count += n = (typeof n === 'number' && n >= 1 ? n : 1);\n        return function() {\n          fn && fn.apply(this, arguments);\n          if (n > 0) {\n            n--, count--, call();\n          }\n        };\n      }\n      var then = [];\n      function call() {\n        if (count === 0) {\n          while (then.length) {\n            setTimeout(then.shift(), 0);\n          }\n        }\n      }\n      fork.then = function(fn) {\n        if (count === 0) {\n          setTimeout(fn, 0);\n        } else {\n          then.push(fn);\n        }\n      };\n      return fork;\n    };\n\n    stats.create = 0;\n\n    function Class(arg) {\n      if (!(this instanceof Class)) {\n        if (is_1.fn(arg)) {\n          return Class.app.apply(Class, arguments);\n        } else if (is_1.object(arg)) {\n          return Class.atlas.apply(Class, arguments);\n        } else {\n          return arg;\n        }\n      }\n\n      stats.create++;\n\n      for (var i = 0; i < _init.length; i++) {\n        _init[i].call(this);\n      }\n    }\n\n    var _init = [];\n\n    Class._init = function(fn) {\n      _init.push(fn);\n    };\n\n    var _load = [];\n\n    Class._load = function(fn) {\n      _load.push(fn);\n    };\n\n    var _config = {};\n\n    Class.config = function() {\n      if (arguments.length === 1 && is_1.string(arguments[0])) {\n        return _config[arguments[0]];\n      }\n      if (arguments.length === 1 && is_1.object(arguments[0])) {\n        extend(_config, arguments[0]);\n      }\n      if (arguments.length === 2 && is_1.string(arguments[0])) ;\n    };\n\n    var _app_queue = [];\n    var _stages = [];\n    var _loaded = false;\n    var _paused = false;\n\n    Class.app = function(app, opts) {\n      if (!_loaded) {\n        _app_queue.push(arguments);\n        return;\n      }\n      var loader = Class.config('app-loader');\n      loader(function(stage, canvas) {\n        for (var i = 0; i < _load.length; i++) {\n          _load[i].call(this, stage, canvas);\n        }\n        app(stage, canvas);\n        _stages.push(stage);\n        stage.start();\n      }, opts);\n    };\n\n    var loading = _await();\n\n    Class.preload = function(load) {\n      if (typeof load === 'string') {\n        var url = Class.resolve(load);\n        if (/\\.js($|\\?|\\#)/.test(url)) {\n          load = function(callback) {\n            loadScript(url, callback);\n          };\n        }\n      }\n      if (typeof load !== 'function') {\n        return;\n      }\n      // if (!_started) {\n      // _preload_queue.push(load);\n      // return;\n      // }\n      load(loading());\n    };\n\n    Class.start = function(config) {\n\n      Class.config(config);\n\n      // false && console.log('Preloading...');\n      // _started = true;\n      // while (_preload_queue.length) {\n      // var load = _preload_queue.shift();\n      // load(loading());\n      // }\n\n      loading.then(function() {\n        _loaded = true;\n        while (_app_queue.length) {\n          var args = _app_queue.shift();\n          Class.app.apply(Class, args);\n        }\n      });\n    };\n\n    Class.pause = function() {\n      if (!_paused) {\n        _paused = true;\n        for (var i = _stages.length - 1; i >= 0; i--) {\n          _stages[i].pause();\n        }\n      }\n    };\n\n    Class.resume = function() {\n      if (_paused) {\n        _paused = false;\n        for (var i = _stages.length - 1; i >= 0; i--) {\n          _stages[i].resume();\n        }\n      }\n    };\n\n    Class.create = function() {\n      return new Class();\n    };\n\n    Class.resolve = (function() {\n\n      if (typeof window === 'undefined' || typeof document === 'undefined') {\n        return function(url) {\n          return url;\n        };\n      }\n\n      var scripts = document.getElementsByTagName('script');\n\n      function getScriptSrc() {\n        // HTML5\n        if (document.currentScript) {\n          return document.currentScript.src;\n        }\n\n        // IE>=10\n        var stack;\n        try {\n          var err = new Error();\n          if (err.stack) {\n            stack = err.stack;\n          } else {\n            throw err;\n          }\n        } catch (err) {\n          stack = err.stack;\n        }\n        if (typeof stack === 'string') {\n          stack = stack.split('\\n');\n          // Uses the last line, where the call started\n          for (var i = stack.length; i--;) {\n            var url = stack[i].match(/(\\w+\\:\\/\\/[^/]*?\\/.+?)(:\\d+)(:\\d+)?/);\n            if (url) {\n              return url[1];\n            }\n          }\n        }\n\n        // IE<11\n        if (scripts.length && 'readyState' in scripts[0]) {\n          for (var i = scripts.length; i--;) {\n            if (scripts[i].readyState === 'interactive') {\n              return scripts[i].src;\n            }\n          }\n        }\n\n        return location.href;\n      }\n\n      return function(url) {\n        if (/^\\.\\//.test(url)) {\n          var src = getScriptSrc();\n          var base = src.substring(0, src.lastIndexOf('/') + 1);\n          url = base + url.substring(2);\n          // } else if (/^\\.\\.\\//.test(url)) {\n          // url = base + url;\n        }\n        return url;\n      };\n    })();\n\n    var core = Class;\n\n    function loadScript(src, callback) {\n      var el = document.createElement('script');\n      el.addEventListener('load', function() {\n        callback();\n      });\n      el.addEventListener('error', function(err) {\n        callback(err || 'Error loading script: ' + src);\n      });\n      el.src = src;\n      el.id = 'preload-' + Date.now();\n      document.body.appendChild(el);\n    }\n\n    function Matrix$1(a, b, c, d, e, f) {\n      this.reset(a, b, c, d, e, f);\n    }\n    Matrix$1.prototype.toString = function() {\n      return '[' + this.a + ', ' + this.b + ', ' + this.c + ', ' + this.d + ', '\n          + this.e + ', ' + this.f + ']';\n    };\n\n    Matrix$1.prototype.clone = function() {\n      return new Matrix$1(this.a, this.b, this.c, this.d, this.e, this.f);\n    };\n\n    Matrix$1.prototype.reset = function(a, b, c, d, e, f) {\n      this._dirty = true;\n      if (typeof a === 'object') {\n        this.a = a.a, this.d = a.d;\n        this.b = a.b, this.c = a.c;\n        this.e = a.e, this.f = a.f;\n      } else {\n        this.a = a || 1, this.d = d || 1;\n        this.b = b || 0, this.c = c || 0;\n        this.e = e || 0, this.f = f || 0;\n      }\n      return this;\n    };\n\n    Matrix$1.prototype.identity = function() {\n      this._dirty = true;\n      this.a = 1;\n      this.b = 0;\n      this.c = 0;\n      this.d = 1;\n      this.e = 0;\n      this.f = 0;\n      return this;\n    };\n\n    Matrix$1.prototype.rotate = function(angle) {\n      if (!angle) {\n        return this;\n      }\n\n      this._dirty = true;\n\n      var u = angle ? Math.cos(angle) : 1;\n      // android bug may give bad 0 values\n      var v = angle ? Math.sin(angle) : 0;\n\n      var a = u * this.a - v * this.b;\n      var b = u * this.b + v * this.a;\n      var c = u * this.c - v * this.d;\n      var d = u * this.d + v * this.c;\n      var e = u * this.e - v * this.f;\n      var f = u * this.f + v * this.e;\n\n      this.a = a;\n      this.b = b;\n      this.c = c;\n      this.d = d;\n      this.e = e;\n      this.f = f;\n\n      return this;\n    };\n\n    Matrix$1.prototype.translate = function(x, y) {\n      if (!x && !y) {\n        return this;\n      }\n      this._dirty = true;\n      this.e += x;\n      this.f += y;\n      return this;\n    };\n\n    Matrix$1.prototype.scale = function(x, y) {\n      if (!(x - 1) && !(y - 1)) {\n        return this;\n      }\n      this._dirty = true;\n      this.a *= x;\n      this.b *= y;\n      this.c *= x;\n      this.d *= y;\n      this.e *= x;\n      this.f *= y;\n      return this;\n    };\n\n    Matrix$1.prototype.skew = function(x, y) {\n      if (!x && !y) {\n        return this;\n      }\n      this._dirty = true;\n\n      var a = this.a + this.b * x;\n      var b = this.b + this.a * y;\n      var c = this.c + this.d * x;\n      var d = this.d + this.c * y;\n      var e = this.e + this.f * x;\n      var f = this.f + this.e * y;\n\n      this.a = a;\n      this.b = b;\n      this.c = c;\n      this.d = d;\n      this.e = e;\n      this.f = f;\n      return this;\n    };\n\n    Matrix$1.prototype.concat = function(m) {\n      this._dirty = true;\n\n      var n = this;\n\n      var a = n.a * m.a + n.b * m.c;\n      var b = n.b * m.d + n.a * m.b;\n      var c = n.c * m.a + n.d * m.c;\n      var d = n.d * m.d + n.c * m.b;\n      var e = n.e * m.a + m.e + n.f * m.c;\n      var f = n.f * m.d + m.f + n.e * m.b;\n\n      this.a = a;\n      this.b = b;\n      this.c = c;\n      this.d = d;\n      this.e = e;\n      this.f = f;\n\n      return this;\n    };\n\n    Matrix$1.prototype.inverse = Matrix$1.prototype.reverse = function() {\n      if (this._dirty) {\n        this._dirty = false;\n        this.inversed = this.inversed || new Matrix$1();\n        var z = this.a * this.d - this.b * this.c;\n        this.inversed.a = this.d / z;\n        this.inversed.b = -this.b / z;\n        this.inversed.c = -this.c / z;\n        this.inversed.d = this.a / z;\n        this.inversed.e = (this.c * this.f - this.e * this.d) / z;\n        this.inversed.f = (this.e * this.b - this.a * this.f) / z;\n      }\n      return this.inversed;\n    };\n\n    Matrix$1.prototype.map = function(p, q) {\n      q = q || {};\n      q.x = this.a * p.x + this.c * p.y + this.e;\n      q.y = this.b * p.x + this.d * p.y + this.f;\n      return q;\n    };\n\n    Matrix$1.prototype.mapX = function(x, y) {\n      if (typeof x === 'object')\n        y = x.y, x = x.x;\n      return this.a * x + this.c * y + this.e;\n    };\n\n    Matrix$1.prototype.mapY = function(x, y) {\n      if (typeof x === 'object')\n        y = x.y, x = x.x;\n      return this.b * x + this.d * y + this.f;\n    };\n\n    var matrix = Matrix$1;\n\n    var create = createCommonjsModule(function (module) {\n    if (typeof Object.create == 'function') {\n      module.exports = function(proto, props) {\n        return Object.create.call(Object, proto, props);\n      };\n    } else {\n      module.exports = function(proto, props) {\n        if (props)\n          throw Error('Second argument is not supported!');\n        if (typeof proto !== 'object' || proto === null)\n          throw Error('Invalid prototype!');\n        noop.prototype = proto;\n        return new noop;\n      };\n      function noop() {\n      }\n    }\n    });\n\n    var native = Math;\n\n    var math = create(Math);\n\n    var random = function(min, max) {\n      if (typeof min === 'undefined') {\n        max = 1, min = 0;\n      } else if (typeof max === 'undefined') {\n        max = min, min = 0;\n      }\n      return min == max ? min : native.random() * (max - min) + min;\n    };\n\n    var rotate = function(num, min, max) {\n      if (typeof min === 'undefined') {\n        max = 1, min = 0;\n      } else if (typeof max === 'undefined') {\n        max = min, min = 0;\n      }\n      if (max > min) {\n        num = (num - min) % (max - min);\n        return num + (num < 0 ? max : min);\n      } else {\n        num = (num - max) % (min - max);\n        return num + (num <= 0 ? min : max);\n      }\n    };\n\n    var limit = function(num, min, max) {\n      if (num < min) {\n        return min;\n      } else if (num > max) {\n        return max;\n      } else {\n        return num;\n      }\n    };\n\n    var length = function(x, y) {\n      return native.sqrt(x * x + y * y);\n    };\n    math.random = random;\n    math.rotate = rotate;\n    math.limit = limit;\n    math.length = length;\n\n    function Texture$1(image, ratio) {\n      if (typeof image === 'object') {\n        this.src(image, ratio);\n      }\n    }\n\n    Texture$1.prototype.pipe = function() {\n      return new Texture$1(this);\n    };\n\n    /**\n     * Signatures: (image), (x, y, w, h), (w, h)\n     */\n    Texture$1.prototype.src = function(x, y, w, h) {\n      if (typeof x === 'object') {\n        var image = x, ratio = y || 1;\n\n        this._image = image;\n        this._sx = this._dx = 0;\n        this._sy = this._dy = 0;\n        this._sw = this._dw = image.width / ratio;\n        this._sh = this._dh = image.height / ratio;\n\n        this.width = image.width / ratio;\n        this.height = image.height / ratio;\n\n        this.ratio = ratio;\n\n      } else {\n        if (typeof w === 'undefined') {\n          w = x, h = y;\n        } else {\n          this._sx = x, this._sy = y;\n        }\n        this._sw = this._dw = w;\n        this._sh = this._dh = h;\n\n        this.width = w;\n        this.height = h;\n      }\n      return this;\n    };\n\n    /**\n     * Signatures: (x, y, w, h), (x, y)\n     */\n    Texture$1.prototype.dest = function(x, y, w, h) {\n      this._dx = x, this._dy = y;\n      this._dx = x, this._dy = y;\n      if (typeof w !== 'undefined') {\n        this._dw = w, this._dh = h;\n        this.width = w, this.height = h;\n      }\n      return this;\n    };\n\n    Texture$1.prototype.draw = function(context, x1, y1, x2, y2, x3, y3, x4, y4) {\n      var image = this._image;\n      if (image === null || typeof image !== 'object') {\n        return;\n      }\n\n      var sx = this._sx, sy = this._sy;\n      var sw = this._sw, sh = this._sh;\n      var dx = this._dx, dy = this._dy;\n      var dw = this._dw, dh = this._dh;\n\n      if (typeof x3 !== 'undefined') {\n        x1 = math.limit(x1, 0, this._sw), x2 = math.limit(x2, 0, this._sw - x1);\n        y1 = math.limit(y1, 0, this._sh), y2 = math.limit(y2, 0, this._sh - y1);\n        sx += x1, sy += y1, sw = x2, sh = y2;\n        dx = x3, dy = y3, dw = x4, dh = y4;\n\n      } else if (typeof x2 !== 'undefined') {\n        dx = x1, dy = y1, dw = x2, dh = y2;\n\n      } else if (typeof x1 !== 'undefined') {\n        dw = x1, dh = y1;\n      }\n\n      var ratio = this.ratio || 1;\n      sx *= ratio, sy *= ratio, sw *= ratio, sh *= ratio;\n\n      try {\n        if (typeof image.draw === 'function') {\n          image.draw(context, sx, sy, sw, sh, dx, dy, dw, dh);\n        } else {\n          stats.draw++;\n          context.drawImage(image, sx, sy, sw, sh, dx, dy, dw, dh);\n        }\n      } catch (ex) {\n        if (!image._draw_failed) {\n          console.log('Unable to draw: ', image);\n          console.log(ex);\n          image._draw_failed = true;\n        }\n      }\n    };\n\n    var texture = Texture$1;\n\n    var startsWith = function(str, sub) {\n      return typeof str === 'string' && typeof sub === 'string'\n          && str.substring(0, sub.length) == sub;\n    };\n\n    var string = {\n    \tstartsWith: startsWith\n    };\n\n    // name : atlas\n    var _atlases_map = {};\n    // [atlas]\n    var _atlases_arr = [];\n\n    // TODO: print subquery not found error\n    // TODO: index textures\n\n    core.atlas = function(def) {\n      var atlas = is_1.fn(def.draw) ? def : new Atlas(def);\n      if (def.name) {\n        _atlases_map[def.name] = atlas;\n      }\n      _atlases_arr.push(atlas);\n\n      deprecated(def, 'imagePath');\n      deprecated(def, 'imageRatio');\n\n      var url = def.imagePath;\n      var ratio = def.imageRatio || 1;\n      if (is_1.string(def.image)) {\n        url = def.image;\n      } else if (is_1.hash(def.image)) {\n        url = def.image.src || def.image.url;\n        ratio = def.image.ratio || ratio;\n      }\n      url && core.preload(function(done) {\n        url = core.resolve(url);\n        var imageloader = core.config('image-loader');\n\n        imageloader(url, function(image) {\n          atlas.src(image, ratio);\n          done();\n\n        }, function(err) {\n          done();\n        });\n      });\n\n      return atlas;\n    };\n\n    Atlas._super = texture;\n    Atlas.prototype = create(Atlas._super.prototype);\n\n    function Atlas(def) {\n      Atlas._super.call(this);\n\n      var atlas = this;\n\n      deprecated(def, 'filter');\n      deprecated(def, 'cutouts');\n      deprecated(def, 'sprites');\n      deprecated(def, 'factory');\n\n      var map = def.map || def.filter;\n      var ppu = def.ppu || def.ratio || 1;\n      var trim = def.trim || 0;\n      var textures = def.textures;\n      var factory = def.factory;\n      var cutouts = def.cutouts || def.sprites;\n\n      function make(def) {\n        if (!def || is_1.fn(def.draw)) {\n          return def;\n        }\n\n        def = extend({}, def);\n\n        if (is_1.fn(map)) {\n          def = map(def);\n        }\n\n        if (ppu != 1) {\n          def.x *= ppu, def.y *= ppu;\n          def.width *= ppu, def.height *= ppu;\n          def.top *= ppu, def.bottom *= ppu;\n          def.left *= ppu, def.right *= ppu;\n        }\n\n        if (trim != 0) {\n          def.x += trim, def.y += trim;\n          def.width -= 2 * trim, def.height -= 2 * trim;\n          def.top -= trim, def.bottom -= trim;\n          def.left -= trim, def.right -= trim;\n        }\n\n        var texture = atlas.pipe();\n        texture.top = def.top, texture.bottom = def.bottom;\n        texture.left = def.left, texture.right = def.right;\n        texture.src(def.x, def.y, def.width, def.height);\n        return texture;\n      }\n\n      function find(query) {\n        if (textures) {\n          if (is_1.fn(textures)) {\n            return textures(query);\n          } else if (is_1.hash(textures)) {\n            return textures[query];\n          }\n        }\n        if (cutouts) { // deprecated\n          var result = null, n = 0;\n          for (var i = 0; i < cutouts.length; i++) {\n            if (string.startsWith(cutouts[i].name, query)) {\n              if (n === 0) {\n                result = cutouts[i];\n              } else if (n === 1) {\n                result = [ result, cutouts[i] ];\n              } else {\n                result.push(cutouts[i]);\n              }\n              n++;\n            }\n          }\n          if (n === 0 && is_1.fn(factory)) {\n            result = function(subquery) {\n              return factory(query + (subquery ? subquery : ''));\n            };\n          }\n          return result;\n        }\n      }\n\n      this.select = function(query) {\n        if (!query) {\n          // TODO: if `textures` is texture def, map or fn?\n          return new Selection(this.pipe());\n        }\n        var found = find(query);\n        if (found) {\n          return new Selection(found, find, make);\n        }\n      };\n\n    }\n    var nfTexture = new texture();\n    nfTexture.x = nfTexture.y = nfTexture.width = nfTexture.height = 0;\n    nfTexture.pipe = nfTexture.src = nfTexture.dest = function() {\n      return this;\n    };\n    nfTexture.draw = function() {\n    };\n\n    var nfSelection = new Selection(nfTexture);\n\n    function Selection(result, find, make) {\n      function link(result, subquery) {\n        if (!result) {\n          return nfTexture;\n\n        } else if (is_1.fn(result.draw)) {\n          return result;\n\n        } else if (is_1.hash(result) && is_1.number(result.width)\n            && is_1.number(result.height) && is_1.fn(make)) {\n          return make(result);\n\n        } else if (is_1.hash(result) && is_1.defined(subquery)) {\n          return link(result[subquery]);\n\n        } else if (is_1.fn(result)) {\n          return link(result(subquery));\n\n        } else if (is_1.array(result)) {\n          return link(result[0]);\n\n        } else if (is_1.string(result) && is_1.fn(find)) {\n          return link(find(result));\n        }\n      }\n\n      this.one = function(subquery) {\n        return link(result, subquery);\n      };\n\n      this.array = function(arr) {\n        var array = is_1.array(arr) ? arr : [];\n        if (is_1.array(result)) {\n          for (var i = 0; i < result.length; i++) {\n            array[i] = link(result[i]);\n          }\n        } else {\n          array[0] = link(result);\n        }\n        return array;\n      };\n    }\n\n    core.texture = function(query) {\n      if (!is_1.string(query)) {\n        return new Selection(query);\n      }\n\n      var result = null, atlas, i;\n\n      if ((i = query.indexOf(':')) > 0 && query.length > i + 1) {\n        atlas = _atlases_map[query.slice(0, i)];\n        result = atlas && atlas.select(query.slice(i + 1));\n      }\n\n      if (!result && (atlas = _atlases_map[query])) {\n        result = atlas.select();\n      }\n\n      for (i = 0; !result && i < _atlases_arr.length; i++) {\n        result = _atlases_arr[i].select(query);\n      }\n\n      if (!result) {\n        console.error('Texture not found: ' + query);\n        result = nfSelection;\n      }\n\n      return result;\n    };\n\n    function deprecated(hash, name, msg) {\n      if (name in hash)\n        console.log(msg ? msg.replace('%name', name) : '\\'' + name\n            + '\\' field of texture atlas is deprecated.');\n    }\n\n    var iid$1 = 0;\n\n    // TODO: do not clear next/prev/parent on remove\n\n    core.prototype._label = '';\n\n    core.prototype._visible = true;\n\n    core.prototype._parent = null;\n    core.prototype._next = null;\n    core.prototype._prev = null;\n\n    core.prototype._first = null;\n    core.prototype._last = null;\n\n    core.prototype._attrs = null;\n    core.prototype._flags = null;\n\n    core.prototype.toString = function() {\n      return '[' + this._label + ']';\n    };\n\n    /**\n     * @deprecated Use label()\n     */\n    core.prototype.id = function(id) {\n      return this.label(id);\n    };\n\n    core.prototype.label = function(label) {\n      if (typeof label === 'undefined') {\n        return this._label;\n      }\n      this._label = label;\n      return this;\n    };\n\n    core.prototype.attr = function(name, value) {\n      if (typeof value === 'undefined') {\n        return this._attrs !== null ? this._attrs[name] : undefined;\n      }\n      (this._attrs !== null ? this._attrs : this._attrs = {})[name] = value;\n      return this;\n    };\n\n    core.prototype.visible = function(visible) {\n      if (typeof visible === 'undefined') {\n        return this._visible;\n      }\n      this._visible = visible;\n      this._parent && (this._parent._ts_children = ++iid$1);\n      this._ts_pin = ++iid$1;\n      this.touch();\n      return this;\n    };\n\n    core.prototype.hide = function() {\n      return this.visible(false);\n    };\n\n    core.prototype.show = function() {\n      return this.visible(true);\n    };\n\n    core.prototype.parent = function() {\n      return this._parent;\n    };\n\n    core.prototype.next = function(visible) {\n      var next = this._next;\n      while (next && visible && !next._visible) {\n        next = next._next;\n      }\n      return next;\n    };\n\n    core.prototype.prev = function(visible) {\n      var prev = this._prev;\n      while (prev && visible && !prev._visible) {\n        prev = prev._prev;\n      }\n      return prev;\n    };\n\n    core.prototype.first = function(visible) {\n      var next = this._first;\n      while (next && visible && !next._visible) {\n        next = next._next;\n      }\n      return next;\n    };\n\n    core.prototype.last = function(visible) {\n      var prev = this._last;\n      while (prev && visible && !prev._visible) {\n        prev = prev._prev;\n      }\n      return prev;\n    };\n\n    core.prototype.visit = function(visitor, data) {\n      var reverse = visitor.reverse;\n      var visible = visitor.visible;\n      if (visitor.start && visitor.start(this, data)) {\n        return;\n      }\n      var child, next = reverse ? this.last(visible) : this.first(visible);\n      while (child = next) {\n        next = reverse ? child.prev(visible) : child.next(visible);\n        if (child.visit(visitor, data)) {\n          return true;\n        }\n      }\n      return visitor.end && visitor.end(this, data);\n    };\n\n    core.prototype.append = function(child, more) {\n      if (is_1.array(child))\n        for (var i = 0; i < child.length; i++)\n          append(this, child[i]);\n\n      else if (typeof more !== 'undefined') // deprecated\n        for (var i = 0; i < arguments.length; i++)\n          append(this, arguments[i]);\n\n      else if (typeof child !== 'undefined')\n        append(this, child);\n\n      return this;\n    };\n\n    core.prototype.prepend = function(child, more) {\n      if (is_1.array(child))\n        for (var i = child.length - 1; i >= 0; i--)\n          prepend(this, child[i]);\n\n      else if (typeof more !== 'undefined') // deprecated\n        for (var i = arguments.length - 1; i >= 0; i--)\n          prepend(this, arguments[i]);\n\n      else if (typeof child !== 'undefined')\n        prepend(this, child);\n\n      return this;\n    };\n\n    core.prototype.appendTo = function(parent) {\n      append(parent, this);\n      return this;\n    };\n\n    core.prototype.prependTo = function(parent) {\n      prepend(parent, this);\n      return this;\n    };\n\n    core.prototype.insertNext = function(sibling, more) {\n      if (is_1.array(sibling))\n        for (var i = 0; i < sibling.length; i++)\n          insertAfter(sibling[i], this);\n\n      else if (typeof more !== 'undefined') // deprecated\n        for (var i = 0; i < arguments.length; i++)\n          insertAfter(arguments[i], this);\n\n      else if (typeof sibling !== 'undefined')\n        insertAfter(sibling, this);\n\n      return this;\n    };\n\n    core.prototype.insertPrev = function(sibling, more) {\n      if (is_1.array(sibling))\n        for (var i = sibling.length - 1; i >= 0; i--)\n          insertBefore(sibling[i], this);\n\n      else if (typeof more !== 'undefined') // deprecated\n        for (var i = arguments.length - 1; i >= 0; i--)\n          insertBefore(arguments[i], this);\n\n      else if (typeof sibling !== 'undefined')\n        insertBefore(sibling, this);\n\n      return this;\n    };\n\n    core.prototype.insertAfter = function(prev) {\n      insertAfter(this, prev);\n      return this;\n    };\n\n    core.prototype.insertBefore = function(next) {\n      insertBefore(this, next);\n      return this;\n    };\n\n    function append(parent, child) {\n      _ensure(child);\n      _ensure(parent);\n\n      child.remove();\n\n      if (parent._last) {\n        parent._last._next = child;\n        child._prev = parent._last;\n      }\n\n      child._parent = parent;\n      parent._last = child;\n\n      if (!parent._first) {\n        parent._first = child;\n      }\n\n      child._parent._flag(child, true);\n\n      child._ts_parent = ++iid$1;\n      parent._ts_children = ++iid$1;\n      parent.touch();\n    }\n\n    function prepend(parent, child) {\n      _ensure(child);\n      _ensure(parent);\n\n      child.remove();\n\n      if (parent._first) {\n        parent._first._prev = child;\n        child._next = parent._first;\n      }\n\n      child._parent = parent;\n      parent._first = child;\n\n      if (!parent._last) {\n        parent._last = child;\n      }\n\n      child._parent._flag(child, true);\n\n      child._ts_parent = ++iid$1;\n      parent._ts_children = ++iid$1;\n      parent.touch();\n    }\n    function insertBefore(self, next) {\n      _ensure(self);\n      _ensure(next);\n\n      self.remove();\n\n      var parent = next._parent;\n      var prev = next._prev;\n\n      next._prev = self;\n      prev && (prev._next = self) || parent && (parent._first = self);\n\n      self._parent = parent;\n      self._prev = prev;\n      self._next = next;\n\n      self._parent._flag(self, true);\n\n      self._ts_parent = ++iid$1;\n      self.touch();\n    }\n    function insertAfter(self, prev) {\n      _ensure(self);\n      _ensure(prev);\n\n      self.remove();\n\n      var parent = prev._parent;\n      var next = prev._next;\n\n      prev._next = self;\n      next && (next._prev = self) || parent && (parent._last = self);\n\n      self._parent = parent;\n      self._prev = prev;\n      self._next = next;\n\n      self._parent._flag(self, true);\n\n      self._ts_parent = ++iid$1;\n      self.touch();\n    }\n    core.prototype.remove = function(child, more) {\n      if (typeof child !== 'undefined') {\n        if (is_1.array(child)) {\n          for (var i = 0; i < child.length; i++)\n            _ensure(child[i]).remove();\n\n        } else if (typeof more !== 'undefined') {\n          for (var i = 0; i < arguments.length; i++)\n            _ensure(arguments[i]).remove();\n\n        } else {\n          _ensure(child).remove();\n        }\n        return this;\n      }\n\n      if (this._prev) {\n        this._prev._next = this._next;\n      }\n      if (this._next) {\n        this._next._prev = this._prev;\n      }\n\n      if (this._parent) {\n        if (this._parent._first === this) {\n          this._parent._first = this._next;\n        }\n        if (this._parent._last === this) {\n          this._parent._last = this._prev;\n        }\n\n        this._parent._flag(this, false);\n\n        this._parent._ts_children = ++iid$1;\n        this._parent.touch();\n      }\n\n      this._prev = this._next = this._parent = null;\n      this._ts_parent = ++iid$1;\n      // this._parent.touch();\n\n      return this;\n    };\n\n    core.prototype.empty = function() {\n      var child, next = this._first;\n      while (child = next) {\n        next = child._next;\n        child._prev = child._next = child._parent = null;\n\n        this._flag(child, false);\n      }\n\n      this._first = this._last = null;\n\n      this._ts_children = ++iid$1;\n      this.touch();\n      return this;\n    };\n\n    core.prototype.touch = function() {\n      this._ts_touch = ++iid$1;\n      this._parent && this._parent.touch();\n      return this;\n    };\n\n    /**\n     * Deep flags used for optimizing event distribution.\n     */\n    core.prototype._flag = function(obj, name) {\n      if (typeof name === 'undefined') {\n        return this._flags !== null && this._flags[obj] || 0;\n      }\n      if (typeof obj === 'string') {\n        if (name) {\n          this._flags = this._flags || {};\n          if (!this._flags[obj] && this._parent) {\n            this._parent._flag(obj, true);\n          }\n          this._flags[obj] = (this._flags[obj] || 0) + 1;\n\n        } else if (this._flags && this._flags[obj] > 0) {\n          if (this._flags[obj] == 1 && this._parent) {\n            this._parent._flag(obj, false);\n          }\n          this._flags[obj] = this._flags[obj] - 1;\n        }\n      }\n      if (typeof obj === 'object') {\n        if (obj._flags) {\n          for ( var type in obj._flags) {\n            if (obj._flags[type] > 0) {\n              this._flag(type, name);\n            }\n          }\n        }\n      }\n      return this;\n    };\n\n    /**\n     * @private\n     */\n    core.prototype.hitTest = function(hit) {\n      var width = this._pin._width;\n      var height = this._pin._height;\n      return hit.x >= 0 && hit.x <= width && hit.y >= 0 && hit.y <= height;\n    };\n\n    function _ensure(obj) {\n      if (obj && obj instanceof core) {\n        return obj;\n      }\n      throw 'Invalid node: ' + obj;\n    }\n\n    var event = function(prototype, callback) {\n\n      prototype._listeners = null;\n\n      prototype.on = prototype.listen = function(types, listener) {\n        if (!types || !types.length || typeof listener !== 'function') {\n          return this;\n        }\n        if (this._listeners === null) {\n          this._listeners = {};\n        }\n        var isarray = typeof types !== 'string' && typeof types.join === 'function';\n        if (types = (isarray ? types.join(' ') : types).match(/\\S+/g)) {\n          for (var i = 0; i < types.length; i++) {\n            var type = types[i];\n            this._listeners[type] = this._listeners[type] || [];\n            this._listeners[type].push(listener);\n            if (typeof callback === 'function') {\n              callback(this, type, true);\n            }\n          }\n        }\n        return this;\n      };\n\n      prototype.off = function(types, listener) {\n        if (!types || !types.length || typeof listener !== 'function') {\n          return this;\n        }\n        if (this._listeners === null) {\n          return this;\n        }\n        var isarray = typeof types !== 'string' && typeof types.join === 'function';\n        if (types = (isarray ? types.join(' ') : types).match(/\\S+/g)) {\n          for (var i = 0; i < types.length; i++) {\n            var type = types[i], all = this._listeners[type], index;\n            if (all && (index = all.indexOf(listener)) >= 0) {\n              all.splice(index, 1);\n              if (!all.length) {\n                delete this._listeners[type];\n              }\n              if (typeof callback === 'function') {\n                callback(this, type, false);\n              }\n            }\n          }\n        }\n        return this;\n      };\n\n      prototype.listeners = function(type) {\n        return this._listeners && this._listeners[type];\n      };\n\n      prototype.publish = function(name, args) {\n        var listeners = this.listeners(name);\n        if (!listeners || !listeners.length) {\n          return 0;\n        }\n        for (var l = 0; l < listeners.length; l++) {\n          listeners[l].apply(this, args);\n        }\n        return listeners.length;\n      };\n\n      prototype.trigger = function(name, args) {\n        this.publish(name, args);\n        return this;\n      };\n\n    };\n\n    event(core.prototype, function(obj, name, on) {\n      obj._flag(name, on);\n    });\n\n    var iid = 0;\n\n    core._init(function() {\n      this._pin = new Pin(this);\n    });\n\n    core.prototype.matrix = function(relative) {\n      if (relative === true) {\n        return this._pin.relativeMatrix();\n      }\n      return this._pin.absoluteMatrix();\n    };\n\n    core.prototype.pin = function(a, b) {\n      if (typeof a === 'object') {\n        this._pin.set(a);\n        return this;\n\n      } else if (typeof a === 'string') {\n        if (typeof b === 'undefined') {\n          return this._pin.get(a);\n        } else {\n          this._pin.set(a, b);\n          return this;\n        }\n      } else if (typeof a === 'undefined') {\n        return this._pin;\n      }\n    };\n\n    function Pin(owner) {\n\n      this._owner = owner;\n      this._parent = null;\n\n      // relative to parent\n      this._relativeMatrix = new matrix();\n\n      // relative to stage\n      this._absoluteMatrix = new matrix();\n\n      this.reset();\n    }\n    Pin.prototype.reset = function() {\n\n      this._textureAlpha = 1;\n      this._alpha = 1;\n\n      this._width = 0;\n      this._height = 0;\n\n      this._scaleX = 1;\n      this._scaleY = 1;\n      this._skewX = 0;\n      this._skewY = 0;\n      this._rotation = 0;\n\n      // scale/skew/rotate center\n      this._pivoted = false;\n      this._pivotX = null;\n      this._pivotY = null;\n\n      // self pin point\n      this._handled = false;\n      this._handleX = 0;\n      this._handleY = 0;\n\n      // parent pin point\n      this._aligned = false;\n      this._alignX = 0;\n      this._alignY = 0;\n\n      // as seen by parent px\n      this._offsetX = 0;\n      this._offsetY = 0;\n\n      this._boxX = 0;\n      this._boxY = 0;\n      this._boxWidth = this._width;\n      this._boxHeight = this._height;\n\n      // TODO: also set for owner\n      this._ts_translate = ++iid;\n      this._ts_transform = ++iid;\n      this._ts_matrix = ++iid;\n    };\n\n    Pin.prototype._update = function() {\n      this._parent = this._owner._parent && this._owner._parent._pin;\n\n      // if handled and transformed then be translated\n      if (this._handled && this._mo_handle != this._ts_transform) {\n        this._mo_handle = this._ts_transform;\n        this._ts_translate = ++iid;\n      }\n\n      if (this._aligned && this._parent\n          && this._mo_align != this._parent._ts_transform) {\n        this._mo_align = this._parent._ts_transform;\n        this._ts_translate = ++iid;\n      }\n\n      return this;\n    };\n\n    Pin.prototype.toString = function() {\n      return this._owner + ' (' + (this._parent ? this._parent._owner : null) + ')';\n    };\n\n    // TODO: ts fields require refactoring\n\n    Pin.prototype.absoluteMatrix = function() {\n      this._update();\n      var ts = Math.max(\n        this._ts_transform,\n        this._ts_translate,\n        this._parent ? this._parent._ts_matrix : 0\n      );\n      if (this._mo_abs == ts) {\n        return this._absoluteMatrix;\n      }\n      this._mo_abs = ts;\n\n      var abs = this._absoluteMatrix;\n      abs.reset(this.relativeMatrix());\n\n      this._parent && abs.concat(this._parent._absoluteMatrix);\n\n      this._ts_matrix = ++iid;\n\n      return abs;\n    };\n\n    Pin.prototype.relativeMatrix = function() {\n      this._update();\n      var ts = Math.max(this._ts_transform, this._ts_translate,\n          this._parent ? this._parent._ts_transform : 0);\n      if (this._mo_rel == ts) {\n        return this._relativeMatrix;\n      }\n      this._mo_rel = ts;\n\n      var rel = this._relativeMatrix;\n\n      rel.identity();\n      if (this._pivoted) {\n        rel.translate(-this._pivotX * this._width, -this._pivotY * this._height);\n      }\n      rel.scale(this._scaleX, this._scaleY);\n      rel.skew(this._skewX, this._skewY);\n      rel.rotate(this._rotation);\n      if (this._pivoted) {\n        rel.translate(this._pivotX * this._width, this._pivotY * this._height);\n      }\n\n      // calculate effective box\n      if (this._pivoted) {\n        // origin\n        this._boxX = 0;\n        this._boxY = 0;\n        this._boxWidth = this._width;\n        this._boxHeight = this._height;\n\n      } else {\n        // aabb\n        var p, q;\n        if (rel.a > 0 && rel.c > 0 || rel.a < 0 && rel.c < 0) {\n          p = 0, q = rel.a * this._width + rel.c * this._height;\n        } else {\n          p = rel.a * this._width, q = rel.c * this._height;\n        }\n        if (p > q) {\n          this._boxX = q;\n          this._boxWidth = p - q;\n        } else {\n          this._boxX = p;\n          this._boxWidth = q - p;\n        }\n        if (rel.b > 0 && rel.d > 0 || rel.b < 0 && rel.d < 0) {\n          p = 0, q = rel.b * this._width + rel.d * this._height;\n        } else {\n          p = rel.b * this._width, q = rel.d * this._height;\n        }\n        if (p > q) {\n          this._boxY = q;\n          this._boxHeight = p - q;\n        } else {\n          this._boxY = p;\n          this._boxHeight = q - p;\n        }\n      }\n\n      this._x = this._offsetX;\n      this._y = this._offsetY;\n\n      this._x -= this._boxX + this._handleX * this._boxWidth;\n      this._y -= this._boxY + this._handleY * this._boxHeight;\n\n      if (this._aligned && this._parent) {\n        this._parent.relativeMatrix();\n        this._x += this._alignX * this._parent._width;\n        this._y += this._alignY * this._parent._height;\n      }\n\n      rel.translate(this._x, this._y);\n\n      return this._relativeMatrix;\n    };\n\n    Pin.prototype.get = function(key) {\n      if (typeof getters[key] === 'function') {\n        return getters[key](this);\n      }\n    };\n\n    // TODO: Use defineProperty instead? What about multi-field pinning?\n    Pin.prototype.set = function(a, b) {\n      if (typeof a === 'string') {\n        if (typeof setters[a] === 'function' && typeof b !== 'undefined') {\n          setters[a](this, b);\n        }\n      } else if (typeof a === 'object') {\n        for (b in a) {\n          if (typeof setters[b] === 'function' && typeof a[b] !== 'undefined') {\n            setters[b](this, a[b], a);\n          }\n        }\n      }\n      if (this._owner) {\n        this._owner._ts_pin = ++iid;\n        this._owner.touch();\n      }\n      return this;\n    };\n\n    var getters = {\n      alpha : function(pin) {\n        return pin._alpha;\n      },\n\n      textureAlpha : function(pin) {\n        return pin._textureAlpha;\n      },\n\n      width : function(pin) {\n        return pin._width;\n      },\n\n      height : function(pin) {\n        return pin._height;\n      },\n\n      boxWidth : function(pin) {\n        return pin._boxWidth;\n      },\n\n      boxHeight : function(pin) {\n        return pin._boxHeight;\n      },\n\n      // scale : function(pin) {\n      // },\n\n      scaleX : function(pin) {\n        return pin._scaleX;\n      },\n\n      scaleY : function(pin) {\n        return pin._scaleY;\n      },\n\n      // skew : function(pin) {\n      // },\n\n      skewX : function(pin) {\n        return pin._skewX;\n      },\n\n      skewY : function(pin) {\n        return pin._skewY;\n      },\n\n      rotation : function(pin) {\n        return pin._rotation;\n      },\n\n      // pivot : function(pin) {\n      // },\n\n      pivotX : function(pin) {\n        return pin._pivotX;\n      },\n\n      pivotY : function(pin) {\n        return pin._pivotY;\n      },\n\n      // offset : function(pin) {\n      // },\n\n      offsetX : function(pin) {\n        return pin._offsetX;\n      },\n\n      offsetY : function(pin) {\n        return pin._offsetY;\n      },\n\n      // align : function(pin) {\n      // },\n\n      alignX : function(pin) {\n        return pin._alignX;\n      },\n\n      alignY : function(pin) {\n        return pin._alignY;\n      },\n\n      // handle : function(pin) {\n      // },\n\n      handleX : function(pin) {\n        return pin._handleX;\n      },\n\n      handleY : function(pin) {\n        return pin._handleY;\n      }\n    };\n\n    var setters = {\n      alpha : function(pin, value) {\n        pin._alpha = value;\n      },\n\n      textureAlpha : function(pin, value) {\n        pin._textureAlpha = value;\n      },\n\n      width : function(pin, value) {\n        pin._width_ = value;\n        pin._width = value;\n        pin._ts_transform = ++iid;\n      },\n\n      height : function(pin, value) {\n        pin._height_ = value;\n        pin._height = value;\n        pin._ts_transform = ++iid;\n      },\n\n      scale : function(pin, value) {\n        pin._scaleX = value;\n        pin._scaleY = value;\n        pin._ts_transform = ++iid;\n      },\n\n      scaleX : function(pin, value) {\n        pin._scaleX = value;\n        pin._ts_transform = ++iid;\n      },\n\n      scaleY : function(pin, value) {\n        pin._scaleY = value;\n        pin._ts_transform = ++iid;\n      },\n\n      skew : function(pin, value) {\n        pin._skewX = value;\n        pin._skewY = value;\n        pin._ts_transform = ++iid;\n      },\n\n      skewX : function(pin, value) {\n        pin._skewX = value;\n        pin._ts_transform = ++iid;\n      },\n\n      skewY : function(pin, value) {\n        pin._skewY = value;\n        pin._ts_transform = ++iid;\n      },\n\n      rotation : function(pin, value) {\n        pin._rotation = value;\n        pin._ts_transform = ++iid;\n      },\n\n      pivot : function(pin, value) {\n        pin._pivotX = value;\n        pin._pivotY = value;\n        pin._pivoted = true;\n        pin._ts_transform = ++iid;\n      },\n\n      pivotX : function(pin, value) {\n        pin._pivotX = value;\n        pin._pivoted = true;\n        pin._ts_transform = ++iid;\n      },\n\n      pivotY : function(pin, value) {\n        pin._pivotY = value;\n        pin._pivoted = true;\n        pin._ts_transform = ++iid;\n      },\n\n      offset : function(pin, value) {\n        pin._offsetX = value;\n        pin._offsetY = value;\n        pin._ts_translate = ++iid;\n      },\n\n      offsetX : function(pin, value) {\n        pin._offsetX = value;\n        pin._ts_translate = ++iid;\n      },\n\n      offsetY : function(pin, value) {\n        pin._offsetY = value;\n        pin._ts_translate = ++iid;\n      },\n\n      align : function(pin, value) {\n        this.alignX(pin, value);\n        this.alignY(pin, value);\n      },\n\n      alignX : function(pin, value) {\n        pin._alignX = value;\n        pin._aligned = true;\n        pin._ts_translate = ++iid;\n\n        this.handleX(pin, value);\n      },\n\n      alignY : function(pin, value) {\n        pin._alignY = value;\n        pin._aligned = true;\n        pin._ts_translate = ++iid;\n\n        this.handleY(pin, value);\n      },\n\n      handle : function(pin, value) {\n        this.handleX(pin, value);\n        this.handleY(pin, value);\n      },\n\n      handleX : function(pin, value) {\n        pin._handleX = value;\n        pin._handled = true;\n        pin._ts_translate = ++iid;\n      },\n\n      handleY : function(pin, value) {\n        pin._handleY = value;\n        pin._handled = true;\n        pin._ts_translate = ++iid;\n      },\n\n      resizeMode : function(pin, value, all) {\n        if (all) {\n          if (value == 'in') {\n            value = 'in-pad';\n          } else if (value == 'out') {\n            value = 'out-crop';\n          }\n          scaleTo(pin, all.resizeWidth, all.resizeHeight, value);\n        }\n      },\n\n      resizeWidth : function(pin, value, all) {\n        if (!all || !all.resizeMode) {\n          scaleTo(pin, value, null);\n        }\n      },\n\n      resizeHeight : function(pin, value, all) {\n        if (!all || !all.resizeMode) {\n          scaleTo(pin, null, value);\n        }\n      },\n\n      scaleMode : function(pin, value, all) {\n        if (all) {\n          scaleTo(pin, all.scaleWidth, all.scaleHeight, value);\n        }\n      },\n\n      scaleWidth : function(pin, value, all) {\n        if (!all || !all.scaleMode) {\n          scaleTo(pin, value, null);\n        }\n      },\n\n      scaleHeight : function(pin, value, all) {\n        if (!all || !all.scaleMode) {\n          scaleTo(pin, null, value);\n        }\n      },\n\n      matrix : function(pin, value) {\n        this.scaleX(pin, value.a);\n        this.skewX(pin, value.c / value.d);\n        this.skewY(pin, value.b / value.a);\n        this.scaleY(pin, value.d);\n        this.offsetX(pin, value.e);\n        this.offsetY(pin, value.f);\n        this.rotation(pin, 0);\n      }\n    };\n\n    function scaleTo(pin, width, height, mode) {\n      var w = typeof width === 'number';\n      var h = typeof height === 'number';\n      var m = typeof mode === 'string';\n      pin._ts_transform = ++iid;\n      if (w) {\n        pin._scaleX = width / pin._width_;\n        pin._width = pin._width_;\n      }\n      if (h) {\n        pin._scaleY = height / pin._height_;\n        pin._height = pin._height_;\n      }\n      if (w && h && m) {\n        if (mode == 'out' || mode == 'out-crop') {\n          pin._scaleX = pin._scaleY = Math.max(pin._scaleX, pin._scaleY);\n        } else if (mode == 'in' || mode == 'in-pad') {\n          pin._scaleX = pin._scaleY = Math.min(pin._scaleX, pin._scaleY);\n        }\n        if (mode == 'out-crop' || mode == 'in-pad') {\n          pin._width = width / pin._scaleX;\n          pin._height = height / pin._scaleY;\n        }\n      }\n    }\n    core.prototype.scaleTo = function(a, b, c) {\n      if (typeof a === 'object')\n        c = b, b = a.y, a = a.x;\n      scaleTo(this._pin, a, b, c);\n      return this;\n    };\n\n    // Used by Tween class\n    Pin._add_shortcuts = function(Class) {\n      Class.prototype.size = function(w, h) {\n        this.pin('width', w);\n        this.pin('height', h);\n        return this;\n      };\n\n      Class.prototype.width = function(w) {\n        if (typeof w === 'undefined') {\n          return this.pin('width');\n        }\n        this.pin('width', w);\n        return this;\n      };\n\n      Class.prototype.height = function(h) {\n        if (typeof h === 'undefined') {\n          return this.pin('height');\n        }\n        this.pin('height', h);\n        return this;\n      };\n\n      Class.prototype.offset = function(a, b) {\n        if (typeof a === 'object')\n          b = a.y, a = a.x;\n        this.pin('offsetX', a);\n        this.pin('offsetY', b);\n        return this;\n      };\n\n      Class.prototype.rotate = function(a) {\n        this.pin('rotation', a);\n        return this;\n      };\n\n      Class.prototype.skew = function(a, b) {\n        if (typeof a === 'object')\n          b = a.y, a = a.x;\n        else if (typeof b === 'undefined')\n          b = a;\n        this.pin('skewX', a);\n        this.pin('skewY', b);\n        return this;\n      };\n\n      Class.prototype.scale = function(a, b) {\n        if (typeof a === 'object')\n          b = a.y, a = a.x;\n        else if (typeof b === 'undefined')\n          b = a;\n        this.pin('scaleX', a);\n        this.pin('scaleY', b);\n        return this;\n      };\n\n      Class.prototype.alpha = function(a, ta) {\n        this.pin('alpha', a);\n        if (typeof ta !== 'undefined') {\n          this.pin('textureAlpha', ta);\n        }\n        return this;\n      };\n    };\n\n    Pin._add_shortcuts(core);\n\n    var pin = Pin;\n\n    core.prototype._textures = null;\n    core.prototype._alpha = 1;\n\n    core.prototype.render = function(context) {\n      if (!this._visible) {\n        return;\n      }\n      stats.node++;\n\n      var m = this.matrix();\n      context.setTransform(m.a, m.b, m.c, m.d, m.e, m.f);\n\n      // move this elsewhere!\n      this._alpha = this._pin._alpha * (this._parent ? this._parent._alpha : 1);\n      var alpha = this._pin._textureAlpha * this._alpha;\n\n      if (context.globalAlpha != alpha) {\n        context.globalAlpha = alpha;\n      }\n\n      if (this._textures !== null) {\n        for (var i = 0, n = this._textures.length; i < n; i++) {\n          this._textures[i].draw(context);\n        }\n      }\n\n      if (context.globalAlpha != this._alpha) {\n        context.globalAlpha = this._alpha;\n      }\n\n      var child, next = this._first;\n      while (child = next) {\n        next = child._next;\n        child.render(context);\n      }\n    };\n\n    core.prototype._tickBefore = null;\n    core.prototype._tickAfter = null;\n    core.prototype.MAX_ELAPSE = Infinity;\n\n    core.prototype._tick = function(elapsed, now, last) {\n      if (!this._visible) {\n        return;\n      }\n\n      if (elapsed > this.MAX_ELAPSE) {\n        elapsed = this.MAX_ELAPSE;\n      }\n\n      var ticked = false;\n\n      if (this._tickBefore !== null) {\n        for (var i = 0; i < this._tickBefore.length; i++) {\n          stats.tick++;\n          var tickFn = this._tickBefore[i];\n          ticked = tickFn.call(this, elapsed, now, last) === true || ticked;\n        }\n      }\n\n      var child, next = this._first;\n      while (child = next) {\n        next = child._next;\n        if (child._flag('_tick')) {\n          ticked = child._tick(elapsed, now, last) === true ? true : ticked;\n        }\n      }\n\n      if (this._tickAfter !== null) {\n        for (var i = 0; i < this._tickAfter.length; i++) {\n          stats.tick++;\n          var tickFn = this._tickAfter[i];\n          ticked = tickFn.call(this, elapsed, now, last) === true || ticked;\n        }\n      }\n\n      return ticked;\n    };\n\n    core.prototype.tick = function(ticker, before) {\n      if (typeof ticker !== 'function') {\n        return;\n      }\n      if (before) {\n        if (this._tickBefore === null) {\n          this._tickBefore = [];\n        }\n        this._tickBefore.push(ticker);\n      } else {\n        if (this._tickAfter === null) {\n          this._tickAfter = [];\n        }\n        this._tickAfter.push(ticker);\n      }\n      this._flag('_tick', this._tickAfter !== null && this._tickAfter.length > 0\n          || this._tickBefore !== null && this._tickBefore.length > 0);\n    };\n\n    core.prototype.untick = function(ticker) {\n      if (typeof ticker !== 'function') {\n        return;\n      }\n      var i;\n      if (this._tickBefore !== null && (i = this._tickBefore.indexOf(ticker)) >= 0) {\n        this._tickBefore.splice(i, 1);\n      }\n      if (this._tickAfter !== null && (i = this._tickAfter.indexOf(ticker)) >= 0) {\n        this._tickAfter.splice(i, 1);\n      }\n    };\n\n    core.prototype.timeout = function(fn, time) {\n      this.setTimeout(fn, time);\n    };\n\n    core.prototype.setTimeout = function(fn, time) {\n      function timer(t) {\n        if ((time -= t) < 0) {\n          this.untick(timer);\n          fn.call(this);\n        } else {\n          return true;\n        }\n      }\n      this.tick(timer);\n      return timer;\n    };\n\n    core.prototype.clearTimeout = function(timer) {\n      this.untick(timer);\n    };\n\n    Root._super = core;\n    Root.prototype = create(Root._super.prototype);\n\n    core.root = function(request, render) {\n      return new Root(request, render);\n    };\n\n    function Root(request, render) {\n      Root._super.call(this);\n      this.label('Root');\n\n      var paused = true;\n      var stopped = true;\n\n      var self = this;\n      var lastTime = 0;\n      var loop = function(now) {\n        if (paused === true || stopped === true) {\n          return;\n        }\n\n        stats.tick = stats.node = stats.draw = 0;\n\n        var last = lastTime || now;\n        var elapsed = now - last;\n        lastTime = now;\n\n        var ticked = self._tick(elapsed, now, last);\n        if (self._mo_touch != self._ts_touch) {\n          self._mo_touch = self._ts_touch;\n          render(self);\n          request(loop);\n        } else if (ticked) {\n          request(loop);\n        } else {\n          paused = true;\n        }\n\n        stats.fps = elapsed ? 1000 / elapsed : 0;\n      };\n\n      this.start = function() {\n        stopped = false;\n        return this.resume();\n      };\n\n      this.resume = function() {\n        if (paused) {\n          this.publish('resume');\n          paused = false;\n          request(loop);\n        }\n        return this;\n      };\n\n      this.pause = function() {\n        if (!paused) {\n          this.publish('pause');\n        }\n        paused = true;\n        return this;\n      };\n\n      this.touch_root = this.touch;\n      this.touch = function() {\n        this.resume();\n        return this.touch_root();\n      };\n      this.stop = function() {\n        stopped = true;\n        return this;\n      };\n    }\n    Root.prototype.background = function(color) {\n      // to be implemented by loaders\n      return this;\n    };\n\n    Root.prototype.viewport = function(width, height, ratio) {\n      if (typeof width === 'undefined') {\n        return extend({}, this._viewport);\n      }\n      this._viewport = {\n        width : width,\n        height : height,\n        ratio : ratio || 1\n      };\n      this.viewbox();\n      var data = extend({}, this._viewport);\n      this.visit({\n        start : function(node) {\n          if (!node._flag('viewport')) {\n            return true;\n          }\n          node.publish('viewport', [ data ]);\n        }\n      });\n      return this;\n    };\n\n    // TODO: static/fixed viewbox\n    Root.prototype.viewbox = function(width, height, mode) {\n      if (typeof width === 'number' && typeof height === 'number') {\n        this._viewbox = {\n          width : width,\n          height : height,\n          mode : /^(in|out|in-pad|out-crop)$/.test(mode) ? mode : 'in-pad'\n        };\n      }\n\n      var box = this._viewbox;\n      var size = this._viewport;\n      if (size && box) {\n        this.pin({\n          width : box.width,\n          height : box.height\n        });\n        this.scaleTo(size.width, size.height, box.mode);\n      } else if (size) {\n        this.pin({\n          width : size.width,\n          height : size.height\n        });\n      }\n\n      return this;\n    };\n\n    var lib = core;\n    var Matrix = matrix;\n    var Texture = texture;\n    lib.Matrix = Matrix;\n    lib.Texture = Texture;\n\n    core.canvas = function(type, attributes, drawFn) {\n      if (typeof type === 'string') {\n        if (typeof attributes === 'object') ; else {\n          if (typeof attributes === 'function') {\n            drawFn = attributes;\n          }\n          attributes = {};\n        }\n      } else {\n        if (typeof type === 'function') {\n          drawFn = type;\n        }\n        attributes = {};\n        type = '2d';\n      }\n\n      var canvas = document.createElement('canvas');\n      var context = canvas.getContext(type, attributes);\n      var texture$1 = new texture(canvas);\n\n      texture$1.context = function() {\n        return context;\n      };\n\n      texture$1.size = function(width, height, ratio) {\n        ratio = ratio || 1;\n        canvas.width = width * ratio;\n        canvas.height = height * ratio;\n        this.src(canvas, ratio);\n        return this;\n      };\n\n      texture$1.canvas = function(fn) {\n        if (typeof fn === 'function') {\n          fn.call(this, context);\n        } else if (typeof fn === 'undefined' && typeof drawFn === 'function') {\n          drawFn.call(this, context);\n        }\n        return this;\n      };\n\n      if (typeof drawFn === 'function') {\n        drawFn.call(texture$1, context);\n      }\n\n      return texture$1;\n    };\n\n    var repeat = function(img, owidth, oheight, stretch, inner, insert) {\n\n      var width = img.width;\n      var height = img.height;\n      var left = img.left;\n      var right = img.right;\n      var top = img.top;\n      var bottom = img.bottom;\n\n      left = typeof left === 'number' && left === left ? left : 0;\n      right = typeof right === 'number' && right === right ? right : 0;\n      top = typeof top === 'number' && top === top ? top : 0;\n      bottom = typeof bottom === 'number' && bottom === bottom ? bottom : 0;\n\n      width = width - left - right;\n      height = height - top - bottom;\n\n      if (!inner) {\n        owidth = Math.max(owidth - left - right, 0);\n        oheight = Math.max(oheight - top - bottom, 0);\n      }\n\n      var i = 0;\n\n      if (top > 0 && left > 0)\n        insert(i++, 0, 0, left, top, 0, 0, left, top);\n      if (bottom > 0 && left > 0)\n        insert(i++, 0, height + top, left, bottom, 0, oheight + top, left, bottom);\n      if (top > 0 && right > 0)\n        insert(i++, width + left, 0, right, top, owidth + left, 0, right, top);\n      if (bottom > 0 && right > 0)\n        insert(i++, width + left, height + top, right, bottom, owidth + left,\n            oheight + top, right, bottom);\n\n      if (stretch) {\n        if (top > 0)\n          insert(i++, left, 0, width, top, left, 0, owidth, top);\n        if (bottom > 0)\n          insert(i++, left, height + top, width, bottom, left, oheight + top,\n              owidth, bottom);\n        if (left > 0)\n          insert(i++, 0, top, left, height, 0, top, left, oheight);\n        if (right > 0)\n          insert(i++, width + left, top, right, height, owidth + left, top, right,\n              oheight);\n        // center\n        insert(i++, left, top, width, height, left, top, owidth, oheight);\n\n      } else { // tile\n        var l = left, r = owidth, w;\n        while (r > 0) {\n          w = Math.min(width, r), r -= width;\n          var t = top, b = oheight, h;\n          while (b > 0) {\n            h = Math.min(height, b), b -= height;\n            insert(i++, left, top, w, h, l, t, w, h);\n            if (r <= 0) {\n              if (left)\n                insert(i++, 0, top, left, h, 0, t, left, h);\n              if (right)\n                insert(i++, width + left, top, right, h, l + w, t, right, h);\n            }\n            t += h;\n          }\n          if (top)\n            insert(i++, left, 0, w, top, l, 0, w, top);\n          if (bottom)\n            insert(i++, left, height + top, w, bottom, l, t, w, bottom);\n          l += w;\n        }\n      }\n\n      return i;\n    };\n\n    var image = Image$1;\n\n    core.image = function(image) {\n      var img = new Image$1();\n      image && img.image(image);\n      return img;\n    };\n\n    Image$1._super = core;\n    Image$1.prototype = create(Image$1._super.prototype);\n\n    function Image$1() {\n      Image$1._super.call(this);\n      this.label('Image');\n      this._textures = [];\n      this._image = null;\n    }\n    /**\n     * @deprecated Use image\n     */\n    Image$1.prototype.setImage = function(a, b, c) {\n      return this.image(a, b, c);\n    };\n\n    Image$1.prototype.image = function(image) {\n      this._image = core.texture(image).one();\n      this.pin('width', this._image ? this._image.width : 0);\n      this.pin('height', this._image ? this._image.height : 0);\n      this._textures[0] = this._image.pipe();\n      this._textures.length = 1;\n      return this;\n    };\n\n    Image$1.prototype.tile = function(inner) {\n      this._repeat(false, inner);\n      return this;\n    };\n\n    Image$1.prototype.stretch = function(inner) {\n      this._repeat(true, inner);\n      return this;\n    };\n\n    Image$1.prototype._repeat = function(stretch, inner) {\n      var self = this;\n      this.untick(this._repeatTicker);\n      this.tick(this._repeatTicker = function() {\n        if (this._mo_stretch == this._pin._ts_transform) {\n          return;\n        }\n        this._mo_stretch = this._pin._ts_transform;\n        var width = this.pin('width');\n        var height = this.pin('height');\n        this._textures.length = repeat(this._image, width, height, stretch, inner,\n            insert);\n      });\n\n      function insert(i, sx, sy, sw, sh, dx, dy, dw, dh) {\n        var repeat = self._textures.length > i ? self._textures[i]\n            : self._textures[i] = self._image.pipe();\n        repeat.src(sx, sy, sw, sh);\n        repeat.dest(dx, dy, dw, dh);\n      }\n    };\n\n    core.anim = function(frames, fps) {\n      var anim = new Anim();\n      anim.frames(frames).gotoFrame(0);\n      fps && anim.fps(fps);\n      return anim;\n    };\n\n    Anim._super = core;\n    Anim.prototype = create(Anim._super.prototype);\n\n    // TODO: replace with atlas fps or texture time\n    core.Anim = {\n      FPS : 15\n    };\n\n    function Anim() {\n      Anim._super.call(this);\n      this.label('Anim');\n\n      this._textures = [];\n\n      this._fps = core.Anim.FPS;\n      this._ft = 1000 / this._fps;\n\n      this._time = -1;\n      this._repeat = 0;\n\n      this._index = 0;\n      this._frames = [];\n\n      var lastTime = 0;\n      this.tick(function(t, now, last) {\n        if (this._time < 0 || this._frames.length <= 1) {\n          return;\n        }\n\n        // ignore old elapsed\n        var ignore = lastTime != last;\n        lastTime = now;\n        if (ignore) {\n          return true;\n        }\n\n        this._time += t;\n        if (this._time < this._ft) {\n          return true;\n        }\n        var n = this._time / this._ft | 0;\n        this._time -= n * this._ft;\n        this.moveFrame(n);\n        if (this._repeat > 0 && (this._repeat -= n) <= 0) {\n          this.stop();\n          this._callback && this._callback();\n          return false;\n        }\n        return true;\n      }, false);\n    }\n    Anim.prototype.fps = function(fps) {\n      if (typeof fps === 'undefined') {\n        return this._fps;\n      }\n      this._fps = fps > 0 ? fps : core.Anim.FPS;\n      this._ft = 1000 / this._fps;\n      return this;\n    };\n\n    /**\n     * @deprecated Use frames\n     */\n    Anim.prototype.setFrames = function(a, b, c) {\n      return this.frames(a, b, c);\n    };\n\n    Anim.prototype.frames = function(frames) {\n      this._index = 0;\n      this._frames = core.texture(frames).array();\n      this.touch();\n      return this;\n    };\n\n    Anim.prototype.length = function() {\n      return this._frames ? this._frames.length : 0;\n    };\n\n    Anim.prototype.gotoFrame = function(frame, resize) {\n      this._index = math.rotate(frame, this._frames.length) | 0;\n      resize = resize || !this._textures[0];\n      this._textures[0] = this._frames[this._index];\n      if (resize) {\n        this.pin('width', this._textures[0].width);\n        this.pin('height', this._textures[0].height);\n      }\n      this.touch();\n      return this;\n    };\n\n    Anim.prototype.moveFrame = function(move) {\n      return this.gotoFrame(this._index + move);\n    };\n\n    Anim.prototype.repeat = function(repeat, callback) {\n      this._repeat = repeat * this._frames.length - 1;\n      this._callback = callback;\n      this.play();\n      return this;\n    };\n\n    Anim.prototype.play = function(frame) {\n      if (typeof frame !== 'undefined') {\n        this.gotoFrame(frame);\n        this._time = 0;\n      } else if (this._time < 0) {\n        this._time = 0;\n      }\n\n      this.touch();\n      return this;\n    };\n\n    Anim.prototype.stop = function(frame) {\n      this._time = -1;\n      if (typeof frame !== 'undefined') {\n        this.gotoFrame(frame);\n      }\n      return this;\n    };\n\n    core.string = function(frames) {\n      return new Str().frames(frames);\n    };\n\n    Str._super = core;\n    Str.prototype = create(Str._super.prototype);\n\n    function Str() {\n      Str._super.call(this);\n      this.label('String');\n      this._textures = [];\n    }\n    /**\n     * @deprecated Use frames\n     */\n    Str.prototype.setFont = function(a, b, c) {\n      return this.frames(a, b, c);\n    };\n\n    Str.prototype.frames = function(frames) {\n      this._textures = [];\n      if (typeof frames == 'string') {\n        frames = core.texture(frames);\n        this._item = function(value) {\n          return frames.one(value);\n        };\n      } else if (typeof frames === 'object') {\n        this._item = function(value) {\n          return frames[value];\n        };\n      } else if (typeof frames === 'function') {\n        this._item = frames;\n      }\n      return this;\n    };\n\n    /**\n     * @deprecated Use value\n     */\n    Str.prototype.setValue = function(a, b, c) {\n      return this.value(a, b, c);\n    };\n\n    Str.prototype.value = function(value) {\n      if (typeof value === 'undefined') {\n        return this._value;\n      }\n      if (this._value === value) {\n        return this;\n      }\n      this._value = value;\n\n      if (value === null) {\n        value = '';\n      } else if (typeof value !== 'string' && !is_1.array(value)) {\n        value = value.toString();\n      }\n\n      this._spacing = this._spacing || 0;\n\n      var width = 0, height = 0;\n      for (var i = 0; i < value.length; i++) {\n        var image = this._textures[i] = this._item(value[i]);\n        width += i > 0 ? this._spacing : 0;\n        image.dest(width, 0);\n        width = width + image.width;\n        height = Math.max(height, image.height);\n      }\n      this.pin('width', width);\n      this.pin('height', height);\n      this._textures.length = value.length;\n      return this;\n    };\n\n    core.row = function(align) {\n      return core.create().row(align).label('Row');\n    };\n\n    core.prototype.row = function(align) {\n      this.sequence('row', align);\n      return this;\n    };\n\n    core.column = function(align) {\n      return core.create().column(align).label('Row');\n    };\n\n    core.prototype.column = function(align) {\n      this.sequence('column', align);\n      return this;\n    };\n\n    core.sequence = function(type, align) {\n      return core.create().sequence(type, align).label('Sequence');\n    };\n\n    core.prototype.sequence = function(type, align) {\n\n      this._padding = this._padding || 0;\n      this._spacing = this._spacing || 0;\n\n      this.untick(this._layoutTiker);\n      this.tick(this._layoutTiker = function() {\n        if (this._mo_seq == this._ts_touch) {\n          return;\n        }\n        this._mo_seq = this._ts_touch;\n\n        var alignChildren = (this._mo_seqAlign != this._ts_children);\n        this._mo_seqAlign = this._ts_children;\n\n        var width = 0, height = 0;\n\n        var child, next = this.first(true);\n        var first = true;\n        while (child = next) {\n          next = child.next(true);\n\n          child.matrix(true);\n          var w = child.pin('boxWidth');\n          var h = child.pin('boxHeight');\n\n          if (type == 'column') {\n            !first && (height += this._spacing);\n            child.pin('offsetY') != height && child.pin('offsetY', height);\n            width = Math.max(width, w);\n            height = height + h;\n            alignChildren && child.pin('alignX', align);\n\n          } else if (type == 'row') {\n            !first && (width += this._spacing);\n            child.pin('offsetX') != width && child.pin('offsetX', width);\n            width = width + w;\n            height = Math.max(height, h);\n            alignChildren && child.pin('alignY', align);\n          }\n          first = false;\n        }\n        width += 2 * this._padding;\n        height += 2 * this._padding;\n        this.pin('width') != width && this.pin('width', width);\n        this.pin('height') != height && this.pin('height', height);\n      });\n      return this;\n    };\n\n    core.box = function() {\n      return core.create().box().label('Box');\n    };\n\n    core.prototype.box = function() {\n      this._padding = this._padding || 0;\n\n      this.untick(this._layoutTiker);\n      this.tick(this._layoutTiker = function() {\n        if (this._mo_box == this._ts_touch) {\n          return;\n        }\n        this._mo_box = this._ts_touch;\n\n        var width = 0, height = 0;\n        var child, next = this.first(true);\n        while (child = next) {\n          next = child.next(true);\n          child.matrix(true);\n          var w = child.pin('boxWidth');\n          var h = child.pin('boxHeight');\n          width = Math.max(width, w);\n          height = Math.max(height, h);\n        }\n        width += 2 * this._padding;\n        height += 2 * this._padding;\n        this.pin('width') != width && this.pin('width', width);\n        this.pin('height') != height && this.pin('height', height);\n      });\n      return this;\n    };\n\n    core.layer = function() {\n      return core.create().layer().label('Layer');\n    };\n\n    core.prototype.layer = function() {\n\n      this.untick(this._layoutTiker);\n      this.tick(this._layoutTiker = function() {\n        var parent = this.parent();\n        if (parent) {\n          var width = parent.pin('width');\n          if (this.pin('width') != width) {\n            this.pin('width', width);\n          }\n          var height = parent.pin('height');\n          if (this.pin('height') != height) {\n            this.pin('height', height);\n          }\n        }\n      }, true);\n      return this;\n    };\n\n    // TODO: move padding to pin\n    core.prototype.padding = function(pad) {\n      this._padding = pad;\n      return this;\n    };\n\n    core.prototype.spacing = function(space) {\n      this._spacing = space;\n      return this;\n    };\n\n    function _identity(x) {\n      return x;\n    }var _cache = {};\n    var _modes = {};\n    var _easings = {};\n\n    function Easing(token) {\n      if (typeof token === 'function') {\n        return token;\n      }\n      if (typeof token !== 'string') {\n        return _identity;\n      }\n      var fn = _cache[token];\n      if (fn) {\n        return fn;\n      }\n      var match = /^(\\w+)(-(in|out|in-out|out-in))?(\\((.*)\\))?$/i.exec(token);\n      if (!match || !match.length) {\n        return _identity;\n      }\n      var easing = _easings[match[1]];\n      var mode = _modes[match[3]];\n      var params = match[5];\n      if (easing && easing.fn) {\n        fn = easing.fn;\n      } else if (easing && easing.fc) {\n        fn = easing.fc.apply(easing.fc, params\n            && params.replace(/\\s+/, '').split(','));\n      } else {\n        fn = _identity;\n      }\n      if (mode) {\n        fn = mode.fn(fn);\n      }\n      // TODO: It can be a memory leak with different `params`.\n      _cache[token] = fn;\n      return fn;\n    }\n    Easing.add = function(data) {\n      // TODO: create a map of all { name-mode : data }\n      var names = (data.name || data.mode).split(/\\s+/);\n      for (var i = 0; i < names.length; i++) {\n        var name = names[i];\n        if (name) {\n          (data.name ? _easings : _modes)[name] = data;\n        }\n      }\n    };\n\n    Easing.add({\n      mode : 'in',\n      fn : function(f) {\n        return f;\n      }\n    });\n\n    Easing.add({\n      mode : 'out',\n      fn : function(f) {\n        return function(t) {\n          return 1 - f(1 - t);\n        };\n      }\n    });\n\n    Easing.add({\n      mode : 'in-out',\n      fn : function(f) {\n        return function(t) {\n          return (t < 0.5) ? (f(2 * t) / 2) : (1 - f(2 * (1 - t)) / 2);\n        };\n      }\n    });\n\n    Easing.add({\n      mode : 'out-in',\n      fn : function(f) {\n        return function(t) {\n          return (t < 0.5) ? (1 - f(2 * (1 - t)) / 2) : (f(2 * t) / 2);\n        };\n      }\n    });\n\n    Easing.add({\n      name : 'linear',\n      fn : function(t) {\n        return t;\n      }\n    });\n\n    Easing.add({\n      name : 'quad',\n      fn : function(t) {\n        return t * t;\n      }\n    });\n\n    Easing.add({\n      name : 'cubic',\n      fn : function(t) {\n        return t * t * t;\n      }\n    });\n\n    Easing.add({\n      name : 'quart',\n      fn : function(t) {\n        return t * t * t * t;\n      }\n    });\n\n    Easing.add({\n      name : 'quint',\n      fn : function(t) {\n        return t * t * t * t * t;\n      }\n    });\n\n    Easing.add({\n      name : 'sin sine',\n      fn : function(t) {\n        return 1 - Math.cos(t * Math.PI / 2);\n      }\n    });\n\n    Easing.add({\n      name : 'exp expo',\n      fn : function(t) {\n        return t == 0 ? 0 : Math.pow(2, 10 * (t - 1));\n      }\n    });\n\n    Easing.add({\n      name : 'circle circ',\n      fn : function(t) {\n        return 1 - Math.sqrt(1 - t * t);\n      }\n    });\n\n    Easing.add({\n      name : 'bounce',\n      fn : function(t) {\n        return t < 1 / 2.75 ? 7.5625 * t * t : t < 2 / 2.75 ? 7.5625\n            * (t -= 1.5 / 2.75) * t + .75 : t < 2.5 / 2.75 ? 7.5625\n            * (t -= 2.25 / 2.75) * t + .9375 : 7.5625 * (t -= 2.625 / 2.75) * t\n            + .984375;\n      }\n    });\n\n    Easing.add({\n      name : 'poly',\n      fc : function(e) {\n        return function(t) {\n          return Math.pow(t, e);\n        };\n      }\n    });\n\n    Easing.add({\n      name : 'elastic',\n      fc : function(a, p) {\n        p = p || 0.45;\n        a = a || 1;\n        var s = p / (2 * Math.PI) * Math.asin(1 / a);\n        return function(t) {\n          return 1 + a * Math.pow(2, -10 * t)\n              * Math.sin((t - s) * (2 * Math.PI) / p);\n        };\n      }\n    });\n\n    Easing.add({\n      name : 'back',\n      fc : function(s) {\n        s = typeof s !== 'undefined' ? s : 1.70158;\n        return function(t) {\n          return t * t * ((s + 1) * t - s);\n        };\n      }\n    });\n\n    var easing = Easing;\n\n    core.prototype.tween = function(duration, delay, append) {\n      if (typeof duration !== 'number') {\n        append = duration, delay = 0, duration = 0;\n      } else if (typeof delay !== 'number') {\n        append = delay, delay = 0;\n      }\n\n      if (!this._tweens) {\n        this._tweens = [];\n        var ticktime = 0;\n        this.tick(function(elapsed, now, last) {\n          if (!this._tweens.length) {\n            return;\n          }\n\n          // ignore old elapsed\n          var ignore = ticktime != last;\n          ticktime = now;\n          if (ignore) {\n            return true;\n          }\n\n          var head = this._tweens[0];\n\n          var next = head.tick(this, elapsed, now, last);\n\n          if (next && head === this._tweens[0]) {\n            this._tweens.shift();\n          }\n\n          if (Array.isArray(next)) {\n            for (var i = 0; i < next.length; i++) {\n              try {\n                next[i].call(this);\n              } catch (e) {\n                console.log(e);\n              }\n            }\n          } else if (typeof next === 'object') {\n            this._tweens.unshift(next);\n          }\n\n          return true;\n        }, true);\n      }\n\n      this.touch();\n      if (!append) {\n        this._tweens.length = 0;\n      }\n      var tween = new Tween(this, duration, delay);\n      this._tweens.push(tween);\n      return tween;\n    };\n\n    function Tween(owner, duration, delay) {\n      this._end = {};\n      this._duration = duration || 400;\n      this._delay = delay || 0;\n\n      this._owner = owner;\n      this._time = 0;\n    }\n    Tween.prototype.tick = function(node, elapsed, now, last) {\n      this._time += elapsed;\n\n      if (this._time < this._delay) {\n        return;\n      }\n\n      var time = this._time - this._delay;\n\n      if (!this._start) {\n        this._start = {};\n        for ( var key in this._end) {\n          this._start[key] = this._owner.pin(key);\n        }\n      }\n\n      var p, over;\n      if (time < this._duration) {\n        p = time / this._duration;\n        over = false;\n      } else {\n        p = 1;\n        over = true;\n      }\n\n      if (typeof this._easing == 'function') {\n        p = this._easing(p);\n      }\n\n      var q = 1 - p;\n\n      for ( var key in this._end) {\n        this._owner.pin(key, this._start[key] * q + this._end[key] * p);\n      }\n\n      if (over) {\n        var actions = [this._hide, this._remove, this._done];\n        actions = actions.filter(function( element ) {\n          return typeof element === 'function';\n        });\n        return this._next || actions;\n      }\n    };\n\n    Tween.prototype.tween = function(duration, delay) {\n      return this._next = new Tween(this._owner, duration, delay);\n    };\n\n    Tween.prototype.duration = function(duration) {\n      this._duration = duration;\n      return this;\n    };\n\n    Tween.prototype.delay = function(delay) {\n      this._delay = delay;\n      return this;\n    };\n\n    Tween.prototype.ease = function(easing$1) {\n      this._easing = easing(easing$1);\n      return this;\n    };\n\n    Tween.prototype.done = function(fn) {\n      this._done = fn;\n      return this;\n    };\n\n    Tween.prototype.hide = function() {\n      this._hide = function() {\n        this.hide();\n      };\n      return this;\n    };\n\n    Tween.prototype.remove = function() {\n      this._remove = function() {\n        this.remove();\n      };\n      return this;\n    };\n\n    Tween.prototype.pin = function(a, b) {\n      if (typeof a === 'object') {\n        for ( var attr in a) {\n          pinning(this._owner, this._end, attr, a[attr]);\n        }\n      } else if (typeof b !== 'undefined') {\n        pinning(this._owner, this._end, a, b);\n      }\n      return this;\n    };\n\n    function pinning(node, map, key, value) {\n      if (typeof node.pin(key) === 'number') {\n        map[key] = value;\n      } else if (typeof node.pin(key + 'X') === 'number'\n          && typeof node.pin(key + 'Y') === 'number') {\n        map[key + 'X'] = value;\n        map[key + 'Y'] = value;\n      }\n    }\n\n    pin._add_shortcuts(Tween);\n\n    /**\n     * @deprecated Use .done(fn) instead.\n     */\n    Tween.prototype.then = function(fn) {\n      this.done(fn);\n      return this;\n    };\n\n    /**\n     * @deprecated NOOP\n     */\n    Tween.prototype.clear = function(forward) {\n      return this;\n    };\n\n    core._load(function(stage, elem) {\n      Mouse.subscribe(stage, elem);\n    });\n\n    // TODO: capture mouse\n\n    Mouse.CLICK = 'click';\n    Mouse.START = 'touchstart mousedown';\n    Mouse.MOVE = 'touchmove mousemove';\n    Mouse.END = 'touchend mouseup';\n    Mouse.CANCEL = 'touchcancel mousecancel';\n\n    Mouse.subscribe = function(stage, elem) {\n      if (stage.mouse) {\n        return;\n      }\n\n      stage.mouse = new Mouse(stage, elem);\n\n      // `click` events are synthesized from start/end events on same nodes\n      // `mousecancel` events are synthesized on blur or mouseup outside element\n\n      elem.addEventListener('touchstart', handleStart);\n      elem.addEventListener('touchend', handleEnd);\n      elem.addEventListener('touchmove', handleMove);\n      elem.addEventListener('touchcancel', handleCancel);\n\n      elem.addEventListener('mousedown', handleStart);\n      elem.addEventListener('mouseup', handleEnd);\n      elem.addEventListener('mousemove', handleMove);\n\n      document.addEventListener('mouseup', handleCancel);\n      window.addEventListener(\"blur\", handleCancel);\n\n      var clicklist = [], cancellist = [];\n\n      function handleStart(event) {\n        event.preventDefault();\n        stage.mouse.locate(event);\n        // false && console.log('Mouse Start: ' + event.type + ' ' + mouse);\n        stage.mouse.publish(event.type, event);\n\n        stage.mouse.lookup('click', clicklist);\n        stage.mouse.lookup('mousecancel', cancellist);\n      }\n\n      function handleMove(event) {\n        event.preventDefault();\n        stage.mouse.locate(event);\n        stage.mouse.publish(event.type, event);\n      }\n\n      function handleEnd(event) {\n        event.preventDefault();\n        // up/end location is not available, last one is used instead\n        // false && console.log('Mouse End: ' + event.type + ' ' + mouse);\n        stage.mouse.publish(event.type, event);\n\n        if (clicklist.length) {\n          // false && console.log('Mouse Click: ' + clicklist.length);\n          stage.mouse.publish('click', event, clicklist);\n        }\n        cancellist.length = 0;\n      }\n\n      function handleCancel(event) {\n        if (cancellist.length) {\n          // false && console.log('Mouse Cancel: ' + event.type);\n          stage.mouse.publish('mousecancel', event, cancellist);\n        }\n        clicklist.length = 0;\n      }\n    };\n\n    function Mouse(stage, elem) {\n      if (!(this instanceof Mouse)) {\n        // old-style mouse subscription\n        return;\n      }\n\n      var ratio = stage.viewport().ratio || 1;\n\n      stage.on('viewport', function(size) {\n        ratio = size.ratio || ratio;\n      });\n\n      this.x = 0;\n      this.y = 0;\n      this.toString = function() {\n        return (this.x | 0) + 'x' + (this.y | 0);\n      };\n      this.locate = function(event) {\n        locateElevent(elem, event, this);\n        this.x *= ratio;\n        this.y *= ratio;\n      };\n      this.lookup = function(type, collect) {\n        this.type = type;\n        this.root = stage;\n        this.event = null;\n        collect.length = 0;\n        this.collect = collect;\n\n        this.root.visit(this.visitor, this);\n      };\n      this.publish = function(type, event, targets) {\n        this.type = type;\n        this.root = stage;\n        this.event = event;\n        this.collect = false;\n        this.timeStamp = Date.now();\n\n        if (targets) {\n          while (targets.length)\n            if (this.visitor.end(targets.shift(), this))\n              break;\n          targets.length = 0;\n        } else {\n          this.root.visit(this.visitor, this);\n        }\n      };\n      this.visitor = {\n        reverse : true,\n        visible : true,\n        start : function(node, mouse) {\n          return !node._flag(mouse.type);\n        },\n        end : function(node, mouse) {\n          // mouse: event/collect, type, root\n          rel.raw = mouse.event;\n          rel.type = mouse.type;\n          rel.timeStamp = mouse.timeStamp;\n          rel.abs.x = mouse.x;\n          rel.abs.y = mouse.y;\n\n          var listeners = node.listeners(mouse.type);\n          if (!listeners) {\n            return;\n          }\n          node.matrix().inverse().map(mouse, rel);\n          if (!(node === mouse.root || node.attr('spy') || node.hitTest(rel))) {\n            return;\n          }\n          if (mouse.collect) {\n            mouse.collect.push(node);\n          }\n          if (mouse.event) {\n            var cancel = false;\n            for (var l = 0; l < listeners.length; l++) {\n              cancel = listeners[l].call(node, rel) ? true : cancel;\n            }\n            return cancel;\n          }\n        }\n      };\n    }\n    // TODO: define per mouse object with get-only x and y\n    var rel = {}, abs = {};\n\n    defineValue(rel, 'clone', function(obj) {\n      obj = obj || {}, obj.x = this.x, obj.y = this.y;\n      return obj;\n    });\n    defineValue(rel, 'toString', function() {\n      return (this.x | 0) + 'x' + (this.y | 0) + ' (' + this.abs + ')';\n    });\n    defineValue(rel, 'abs', abs);\n    defineValue(abs, 'clone', function(obj) {\n      obj = obj || {}, obj.x = this.x, obj.y = this.y;\n      return obj;\n    });\n    defineValue(abs, 'toString', function() {\n      return (this.x | 0) + 'x' + (this.y | 0);\n    });\n\n    function defineValue(obj, name, value) {\n      Object.defineProperty(obj, name, {\n        value : value\n      });\n    }\n\n    function locateElevent(el, ev, loc) {\n      // pageX/Y if available?\n      if (ev.touches && ev.touches.length) {\n        loc.x = ev.touches[0].clientX;\n        loc.y = ev.touches[0].clientY;\n      } else {\n        loc.x = ev.clientX;\n        loc.y = ev.clientY;\n      }\n      var rect = el.getBoundingClientRect();\n      loc.x -= rect.left;\n      loc.y -= rect.top;\n      loc.x -= el.clientLeft | 0;\n      loc.y -= el.clientTop | 0;\n      return loc;\n    }\n    var mouse = Mouse;\n\n    /**\n     * Default loader for web.\n     */\n\n\n\n    core._supported = (function() {\n      var elem = document.createElement('canvas');\n      return (elem.getContext && elem.getContext('2d')) ? true : false;\n    })();\n\n    window.addEventListener('load', function() {\n      if (core._supported) {\n        core.start();\n      }\n      // TODO if not supported\n    }, false);\n\n    core.config({\n      'app-loader' : AppLoader,\n      'image-loader' : ImageLoader\n    });\n\n    function AppLoader(app, configs) {\n      configs = configs || {};\n      var canvas = configs.canvas, context = null, full = false;\n      var width = 0, height = 0, ratio = 1;\n\n      if (typeof canvas === 'string') {\n        canvas = document.getElementById(canvas);\n      }\n\n      if (!canvas) {\n        canvas = document.getElementById('cutjs')\n            || document.getElementById('stage');\n      }\n\n      if (!canvas) {\n        full = true;\n        canvas = document.createElement('canvas');\n        canvas.style.position = 'absolute';\n        canvas.style.top = '0';\n        canvas.style.left = '0';\n\n        var body = document.body;\n        body.insertBefore(canvas, body.firstChild);\n      }\n\n      context = canvas.getContext('2d');\n\n      var devicePixelRatio = window.devicePixelRatio || 1;\n      var backingStoreRatio = context.webkitBackingStorePixelRatio\n          || context.mozBackingStorePixelRatio || context.msBackingStorePixelRatio\n          || context.oBackingStorePixelRatio || context.backingStorePixelRatio || 1;\n      ratio = devicePixelRatio / backingStoreRatio;\n\n      var requestAnimationFrame = window.requestAnimationFrame\n          || window.msRequestAnimationFrame || window.mozRequestAnimationFrame\n          || window.webkitRequestAnimationFrame || window.oRequestAnimationFrame\n          || function(callback) {\n            return window.setTimeout(callback, 1000 / 60);\n          };\n      var root = core.root(requestAnimationFrame, render);\n\n      function render() {\n        if (width > 0 && height > 0) {\n          context.setTransform(1, 0, 0, 1, 0, 0);\n          context.clearRect(0, 0, width, height);\n          root.render(context);\n        }\n      }\n\n      root.background = function(color) {\n        canvas.style.backgroundColor = color;\n        return this;\n      };\n\n      app(root, canvas);\n\n      // resize();\n      // window.addEventListener('resize', resize, false);\n      // window.addEventListener('orientationchange', resize, false);\n\n      var lastWidth = -1;\n      var lastHeight = -1;\n      (function resizeLoop() {\n        var width, height;\n        if (full) {\n          // screen.availWidth/Height?\n          width = (window.innerWidth > 0 ? window.innerWidth : screen.width);\n          height = (window.innerHeight > 0 ? window.innerHeight : screen.height);\n        } else {\n          width = canvas.clientWidth;\n          height = canvas.clientHeight;\n        }\n        if (lastWidth !== width || lastHeight !== height) {\n          lastWidth = width;\n          lastHeight = height;\n          resize();\n        }\n        requestAnimationFrame(resizeLoop);\n      })();\n\n      function resize() {\n\n        if (full) {\n          // screen.availWidth/Height?\n          width = (window.innerWidth > 0 ? window.innerWidth : screen.width);\n          height = (window.innerHeight > 0 ? window.innerHeight : screen.height);\n\n          canvas.style.width = width + 'px';\n          canvas.style.height = height + 'px';\n\n        } else {\n          width = canvas.clientWidth;\n          height = canvas.clientHeight;\n        }\n\n        width *= ratio;\n        height *= ratio;\n\n        if (canvas.width === width && canvas.height === height) {\n          return;\n        }\n\n        canvas.width = width;\n        canvas.height = height;\n\n        root.viewport(width, height, ratio);\n\n        render();\n      }\n    }\n\n    function ImageLoader(src, success, error) {\n      var image = new Image();\n      image.onload = function() {\n        success(image);\n      };\n      image.onerror = error;\n      image.src = src;\n    }\n\n    var web = createCommonjsModule(function (module) {\n    module.exports = lib;\n\n    module.exports.internal = {};\n\n\n    module.exports.internal.Image = image;\n\n\n\n\n    module.exports.Mouse = mouse;\n    module.exports.Math = math;\n    module.exports._extend = extend;\n    module.exports._create = create;\n    });\n\n    function testbed(opts, callback) {\n        if (typeof opts === 'function') {\n            callback = opts;\n            opts = null;\n        }\n        web(function (stage, canvas) {\n            stage.on(web.Mouse.START, function () {\n                window.focus();\n                // @ts-ignore\n                document.activeElement && document.activeElement.blur();\n                canvas.focus();\n            });\n            stage.MAX_ELAPSE = 1000 / 30;\n            // @ts-ignore\n            var testbed = {};\n            testbed.canvas = canvas;\n            var paused = false;\n            stage.on('resume', function () {\n                paused = false;\n                testbed._resume && testbed._resume();\n            });\n            stage.on('pause', function () {\n                paused = true;\n                testbed._pause && testbed._pause();\n            });\n            testbed.isPaused = function () {\n                return paused;\n            };\n            testbed.togglePause = function () {\n                paused ? testbed.resume() : testbed.pause();\n            };\n            testbed.pause = function () {\n                stage.pause();\n            };\n            testbed.resume = function () {\n                stage.resume();\n                testbed.focus();\n            };\n            testbed.focus = function () {\n                // @ts-ignore\n                document.activeElement && document.activeElement.blur();\n                canvas.focus();\n            };\n            testbed.width = 80;\n            testbed.height = 60;\n            testbed.x = 0;\n            testbed.y = -10;\n            testbed.scaleY = -1;\n            testbed.ratio = 16;\n            testbed.hz = 60;\n            testbed.speed = 1;\n            testbed.activeKeys = {};\n            testbed.background = '#222222';\n            testbed.findOne = function () {\n                // todo: implement\n                return null;\n            };\n            testbed.findAll = function () {\n                // todo: implement\n                return [];\n            };\n            var statusText = '';\n            var statusMap = {};\n            function statusSet(name, value) {\n                if (typeof value !== 'function' && typeof value !== 'object') {\n                    statusMap[name] = value;\n                }\n            }\n            function statusMerge(obj) {\n                // tslint:disable-next-line:no-for-in\n                for (var key in obj) {\n                    statusSet(key, obj[key]);\n                }\n            }\n            testbed.status = function (a, b) {\n                if (typeof b !== 'undefined') {\n                    statusSet(a, b);\n                }\n                else if (a && typeof a === 'object') {\n                    statusMerge(a);\n                }\n                else if (typeof a === 'string') {\n                    statusText = a;\n                }\n                testbed._status && testbed._status(statusText, statusMap);\n            };\n            testbed.info = function (text) {\n                testbed._info && testbed._info(text);\n            };\n            var lastDrawHash = \"\";\n            var drawHash = \"\";\n            (function () {\n                var drawingTexture = new web.Texture();\n                stage.append(web.image(drawingTexture));\n                var buffer = [];\n                stage.tick(function () {\n                    buffer.length = 0;\n                }, true);\n                drawingTexture.draw = function (ctx) {\n                    ctx.save();\n                    ctx.transform(1, 0, 0, testbed.scaleY, -testbed.x, -testbed.y);\n                    ctx.lineWidth = 2 / testbed.ratio;\n                    ctx.lineCap = 'round';\n                    for (var drawing = buffer.shift(); drawing; drawing = buffer.shift()) {\n                        drawing(ctx, testbed.ratio);\n                    }\n                    ctx.restore();\n                };\n                testbed.drawPoint = function (p, r, color) {\n                    buffer.push(function (ctx, ratio) {\n                        ctx.beginPath();\n                        ctx.arc(p.x, p.y, 5 / ratio, 0, 2 * Math.PI);\n                        ctx.strokeStyle = color;\n                        ctx.stroke();\n                    });\n                    drawHash += \"point\" + p.x + ',' + p.y + ',' + r + ',' + color;\n                };\n                testbed.drawCircle = function (p, r, color) {\n                    buffer.push(function (ctx) {\n                        ctx.beginPath();\n                        ctx.arc(p.x, p.y, r, 0, 2 * Math.PI);\n                        ctx.strokeStyle = color;\n                        ctx.stroke();\n                    });\n                    drawHash += \"circle\" + p.x + ',' + p.y + ',' + r + ',' + color;\n                };\n                testbed.drawSegment = function (a, b, color) {\n                    buffer.push(function (ctx) {\n                        ctx.beginPath();\n                        ctx.moveTo(a.x, a.y);\n                        ctx.lineTo(b.x, b.y);\n                        ctx.strokeStyle = color;\n                        ctx.stroke();\n                    });\n                    drawHash += \"segment\" + a.x + ',' + a.y + ',' + b.x + ',' + b.y + ',' + color;\n                };\n                testbed.drawPolygon = function (points, color) {\n                    if (!points || !points.length) {\n                        return;\n                    }\n                    buffer.push(function (ctx) {\n                        ctx.beginPath();\n                        ctx.moveTo(points[0].x, points[0].y);\n                        for (var i = 1; i < points.length; i++) {\n                            ctx.lineTo(points[i].x, points[i].y);\n                        }\n                        ctx.strokeStyle = color;\n                        ctx.closePath();\n                        ctx.stroke();\n                    });\n                    drawHash += \"segment\";\n                    for (var i = 1; i < points.length; i++) {\n                        drawHash += points[i].x + ',' + points[i].y + ',';\n                    }\n                    drawHash += color;\n                };\n                testbed.drawAABB = function (aabb, color) {\n                    buffer.push(function (ctx) {\n                        ctx.beginPath();\n                        ctx.moveTo(aabb.lowerBound.x, aabb.lowerBound.y);\n                        ctx.lineTo(aabb.upperBound.x, aabb.lowerBound.y);\n                        ctx.lineTo(aabb.upperBound.x, aabb.upperBound.y);\n                        ctx.lineTo(aabb.lowerBound.x, aabb.upperBound.y);\n                        ctx.strokeStyle = color;\n                        ctx.closePath();\n                        ctx.stroke();\n                    });\n                    drawHash += \"aabb\";\n                    drawHash += aabb.lowerBound.x + ',' + aabb.lowerBound.y + ',';\n                    drawHash += aabb.upperBound.x + ',' + aabb.upperBound.y + ',';\n                    drawHash += color;\n                };\n                testbed.color = function (r, g, b) {\n                    r = r * 256 | 0;\n                    g = g * 256 | 0;\n                    b = b * 256 | 0;\n                    return 'rgb(' + r + ', ' + g + ', ' + b + ')';\n                };\n            })();\n            var world = callback(testbed);\n            var viewer = new Viewer(world, testbed);\n            var lastX = 0;\n            var lastY = 0;\n            stage.tick(function (dt, t) {\n                // update camera position\n                if (lastX !== testbed.x || lastY !== testbed.y) {\n                    viewer.offset(-testbed.x, -testbed.y);\n                    lastX = testbed.x;\n                    lastY = testbed.y;\n                }\n            });\n            viewer.tick(function (dt, t) {\n                // call testbed step, if provided\n                if (typeof testbed.step === 'function') {\n                    testbed.step(dt, t);\n                }\n                if (targetBody) {\n                    testbed.drawSegment(targetBody.getPosition(), mouseMove, 'rgba(255,255,255,0.2)');\n                }\n                if (lastDrawHash !== drawHash) {\n                    lastDrawHash = drawHash;\n                    stage.touch();\n                }\n                drawHash = \"\";\n                return true;\n            });\n            // stage.empty();\n            stage.background(testbed.background);\n            stage.viewbox(testbed.width, testbed.height);\n            stage.pin('alignX', -0.5);\n            stage.pin('alignY', -0.5);\n            stage.prepend(viewer);\n            function findBody(point) {\n                var body;\n                var aabb = new AABB(point, point);\n                world.queryAABB(aabb, function (fixture) {\n                    if (body) {\n                        return;\n                    }\n                    if (!fixture.getBody().isDynamic() || !fixture.testPoint(point)) {\n                        return;\n                    }\n                    body = fixture.getBody();\n                    return true;\n                });\n                return body;\n            }\n            var mouseGround = world.createBody();\n            var mouseJoint;\n            var targetBody;\n            var mouseMove = { x: 0, y: 0 };\n            viewer.attr('spy', true).on(web.Mouse.START, function (point) {\n                point = { x: point.x, y: testbed.scaleY * point.y };\n                if (targetBody) {\n                    return;\n                }\n                var body = findBody(point);\n                if (!body) {\n                    return;\n                }\n                if (testbed.mouseForce) {\n                    targetBody = body;\n                }\n                else {\n                    mouseJoint = new MouseJoint({ maxForce: 1000 }, mouseGround, body, Vec2.clone(point));\n                    world.createJoint(mouseJoint);\n                }\n            }).on(web.Mouse.MOVE, function (point) {\n                point = { x: point.x, y: testbed.scaleY * point.y };\n                if (mouseJoint) {\n                    mouseJoint.setTarget(point);\n                }\n                mouseMove.x = point.x;\n                mouseMove.y = point.y;\n            }).on(web.Mouse.END, function (point) {\n                point = { x: point.x, y: testbed.scaleY * point.y };\n                if (mouseJoint) {\n                    world.destroyJoint(mouseJoint);\n                    mouseJoint = null;\n                }\n                if (targetBody) {\n                    var force = Vec2.sub(point, targetBody.getPosition());\n                    targetBody.applyForceToCenter(force.mul(testbed.mouseForce), true);\n                    targetBody = null;\n                }\n            }).on(web.Mouse.CANCEL, function (point) {\n                point = { x: point.x, y: testbed.scaleY * point.y };\n                if (mouseJoint) {\n                    world.destroyJoint(mouseJoint);\n                    mouseJoint = null;\n                }\n                if (targetBody) {\n                    targetBody = null;\n                }\n            });\n            window.addEventListener(\"keydown\", function (e) {\n                switch (e.keyCode) {\n                    case 'P'.charCodeAt(0):\n                        testbed.togglePause();\n                        break;\n                }\n            }, false);\n            var downKeys = {};\n            window.addEventListener(\"keydown\", function (e) {\n                var keyCode = e.keyCode;\n                downKeys[keyCode] = true;\n                updateActiveKeys(keyCode, true);\n                testbed.keydown && testbed.keydown(keyCode, String.fromCharCode(keyCode));\n            });\n            window.addEventListener(\"keyup\", function (e) {\n                var keyCode = e.keyCode;\n                downKeys[keyCode] = false;\n                updateActiveKeys(keyCode, false);\n                testbed.keyup && testbed.keyup(keyCode, String.fromCharCode(keyCode));\n            });\n            var activeKeys = testbed.activeKeys;\n            function updateActiveKeys(keyCode, down) {\n                var char = String.fromCharCode(keyCode);\n                if (/\\w/.test(char)) {\n                    activeKeys[char] = down;\n                }\n                activeKeys.right = downKeys[39] || activeKeys['D'];\n                activeKeys.left = downKeys[37] || activeKeys['A'];\n                activeKeys.up = downKeys[38] || activeKeys['W'];\n                activeKeys.down = downKeys[40] || activeKeys['S'];\n                activeKeys.fire = downKeys[32] || downKeys[13];\n            }\n        });\n    }\n    Viewer._super = web;\n    Viewer.prototype = web._create(Viewer._super.prototype);\n    function Viewer(world, opts) {\n        var _this = this;\n        Viewer._super.call(this);\n        this.label('Planck');\n        opts = opts || {};\n        this._options = {};\n        this._options.speed = opts.speed || 1;\n        this._options.hz = opts.hz || 60;\n        if (Math.abs(this._options.hz) < 1) {\n            this._options.hz = 1 / this._options.hz;\n        }\n        this._options.scaleY = opts.scaleY || -1;\n        this._options.ratio = opts.ratio || 16;\n        this._options.lineWidth = 2 / this._options.ratio;\n        this._world = world;\n        var timeStep = 1 / this._options.hz;\n        var elapsedTime = 0;\n        this.tick(function (dt) {\n            dt = dt * 0.001 * _this._options.speed;\n            elapsedTime += dt;\n            while (elapsedTime > timeStep) {\n                world.step(timeStep);\n                elapsedTime -= timeStep;\n            }\n            _this.renderWorld();\n            return true;\n        }, true);\n        world.on('remove-fixture', function (obj) {\n            obj.ui && obj.ui.remove();\n        });\n        world.on('remove-joint', function (obj) {\n            obj.ui && obj.ui.remove();\n        });\n    }\n    Viewer.prototype.renderWorld = function () {\n        var world = this._world;\n        var options = this._options;\n        var viewer = this;\n        for (var b = world.getBodyList(); b; b = b.getNext()) {\n            for (var f = b.getFixtureList(); f; f = f.getNext()) {\n                if (!f.ui) {\n                    if (f.render && f.render.stroke) {\n                        options.strokeStyle = f.render.stroke;\n                    }\n                    else if (b.render && b.render.stroke) {\n                        options.strokeStyle = b.render.stroke;\n                    }\n                    else if (b.isDynamic()) {\n                        options.strokeStyle = 'rgba(255,255,255,0.9)';\n                    }\n                    else if (b.isKinematic()) {\n                        options.strokeStyle = 'rgba(255,255,255,0.7)';\n                    }\n                    else if (b.isStatic()) {\n                        options.strokeStyle = 'rgba(255,255,255,0.5)';\n                    }\n                    if (f.render && f.render.fill) {\n                        options.fillStyle = f.render.fill;\n                    }\n                    else if (b.render && b.render.fill) {\n                        options.fillStyle = b.render.fill;\n                    }\n                    else {\n                        options.fillStyle = '';\n                    }\n                    var type = f.getType();\n                    var shape = f.getShape();\n                    if (type == 'circle') {\n                        f.ui = viewer.drawCircle(shape, options);\n                    }\n                    if (type == 'edge') {\n                        f.ui = viewer.drawEdge(shape, options);\n                    }\n                    if (type == 'polygon') {\n                        f.ui = viewer.drawPolygon(shape, options);\n                    }\n                    if (type == 'chain') {\n                        f.ui = viewer.drawChain(shape, options);\n                    }\n                    if (f.ui) {\n                        f.ui.appendTo(viewer);\n                    }\n                }\n                if (f.ui) {\n                    var p = b.getPosition();\n                    var r = b.getAngle();\n                    if (f.ui.__lastX !== p.x || f.ui.__lastY !== p.y || f.ui.__lastR !== r) {\n                        f.ui.__lastX = p.x;\n                        f.ui.__lastY = p.y;\n                        f.ui.__lastR = r;\n                        f.ui.offset(p.x, options.scaleY * p.y);\n                        f.ui.rotate(options.scaleY * r);\n                    }\n                }\n            }\n        }\n        for (var j = world.getJointList(); j; j = j.getNext()) {\n            var type = j.getType();\n            var a = j.getAnchorA();\n            var b = j.getAnchorB();\n            if (!j.ui) {\n                options.strokeStyle = 'rgba(255,255,255,0.2)';\n                j.ui = viewer.drawJoint(j, options);\n                j.ui.pin('handle', 0.5);\n                if (j.ui) {\n                    j.ui.appendTo(viewer);\n                }\n            }\n            if (j.ui) {\n                var cx = (a.x + b.x) * 0.5;\n                var cy = options.scaleY * (a.y + b.y) * 0.5;\n                var dx = a.x - b.x;\n                var dy = options.scaleY * (a.y - b.y);\n                var d = Math.sqrt(dx * dx + dy * dy);\n                j.ui.width(d);\n                j.ui.rotate(Math.atan2(dy, dx));\n                j.ui.offset(cx, cy);\n            }\n        }\n    };\n    Viewer.prototype.drawJoint = function (joint, options) {\n        var lw = options.lineWidth;\n        var ratio = options.ratio;\n        var length = 10;\n        var texture = web.canvas(function (ctx) {\n            this.size(length + 2 * lw, 2 * lw, ratio);\n            ctx.scale(ratio, ratio);\n            ctx.beginPath();\n            ctx.moveTo(lw, lw);\n            ctx.lineTo(lw + length, lw);\n            ctx.lineCap = 'round';\n            ctx.lineWidth = options.lineWidth;\n            ctx.strokeStyle = options.strokeStyle;\n            ctx.stroke();\n        });\n        var image = web.image(texture).stretch();\n        return image;\n    };\n    Viewer.prototype.drawCircle = function (shape, options) {\n        var lw = options.lineWidth;\n        var ratio = options.ratio;\n        var r = shape.m_radius;\n        var cx = r + lw;\n        var cy = r + lw;\n        var w = r * 2 + lw * 2;\n        var h = r * 2 + lw * 2;\n        var texture = web.canvas(function (ctx) {\n            this.size(w, h, ratio);\n            ctx.scale(ratio, ratio);\n            ctx.arc(cx, cy, r, 0, 2 * Math.PI);\n            if (options.fillStyle) {\n                ctx.fillStyle = options.fillStyle;\n                ctx.fill();\n            }\n            ctx.lineTo(cx, cy);\n            ctx.lineWidth = options.lineWidth;\n            ctx.strokeStyle = options.strokeStyle;\n            ctx.stroke();\n        });\n        var image = web.image(texture)\n            .offset(shape.m_p.x - cx, options.scaleY * shape.m_p.y - cy);\n        var node = web.create().append(image);\n        return node;\n    };\n    Viewer.prototype.drawEdge = function (edge, options) {\n        var lw = options.lineWidth;\n        var ratio = options.ratio;\n        var v1 = edge.m_vertex1;\n        var v2 = edge.m_vertex2;\n        var dx = v2.x - v1.x;\n        var dy = v2.y - v1.y;\n        var length = Math.sqrt(dx * dx + dy * dy);\n        var texture = web.canvas(function (ctx) {\n            this.size(length + 2 * lw, 2 * lw, ratio);\n            ctx.scale(ratio, ratio);\n            ctx.beginPath();\n            ctx.moveTo(lw, lw);\n            ctx.lineTo(lw + length, lw);\n            ctx.lineCap = 'round';\n            ctx.lineWidth = options.lineWidth;\n            ctx.strokeStyle = options.strokeStyle;\n            ctx.stroke();\n        });\n        var minX = Math.min(v1.x, v2.x);\n        var minY = Math.min(options.scaleY * v1.y, options.scaleY * v2.y);\n        var image = web.image(texture);\n        image.rotate(options.scaleY * Math.atan2(dy, dx));\n        image.offset(minX - lw, minY - lw);\n        var node = web.create().append(image);\n        return node;\n    };\n    Viewer.prototype.drawPolygon = function (shape, options) {\n        var lw = options.lineWidth;\n        var ratio = options.ratio;\n        var vertices = shape.m_vertices;\n        if (!vertices.length) {\n            return;\n        }\n        var minX = Infinity;\n        var minY = Infinity;\n        var maxX = -Infinity;\n        var maxY = -Infinity;\n        for (var i = 0; i < vertices.length; ++i) {\n            var v = vertices[i];\n            minX = Math.min(minX, v.x);\n            maxX = Math.max(maxX, v.x);\n            minY = Math.min(minY, options.scaleY * v.y);\n            maxY = Math.max(maxY, options.scaleY * v.y);\n        }\n        var width = maxX - minX;\n        var height = maxY - minY;\n        var texture = web.canvas(function (ctx) {\n            this.size(width + 2 * lw, height + 2 * lw, ratio);\n            ctx.scale(ratio, ratio);\n            ctx.beginPath();\n            for (var i = 0; i < vertices.length; ++i) {\n                var v = vertices[i];\n                var x = v.x - minX + lw;\n                var y = options.scaleY * v.y - minY + lw;\n                if (i == 0)\n                    ctx.moveTo(x, y);\n                else\n                    ctx.lineTo(x, y);\n            }\n            if (vertices.length > 2) {\n                ctx.closePath();\n            }\n            if (options.fillStyle) {\n                ctx.fillStyle = options.fillStyle;\n                ctx.fill();\n                ctx.closePath();\n            }\n            ctx.lineCap = 'round';\n            ctx.lineWidth = options.lineWidth;\n            ctx.strokeStyle = options.strokeStyle;\n            ctx.stroke();\n        });\n        var image = web.image(texture);\n        image.offset(minX - lw, minY - lw);\n        var node = web.create().append(image);\n        return node;\n    };\n    Viewer.prototype.drawChain = function (shape, options) {\n        var lw = options.lineWidth;\n        var ratio = options.ratio;\n        var vertices = shape.m_vertices;\n        if (!vertices.length) {\n            return;\n        }\n        var minX = Infinity;\n        var minY = Infinity;\n        var maxX = -Infinity;\n        var maxY = -Infinity;\n        for (var i = 0; i < vertices.length; ++i) {\n            var v = vertices[i];\n            minX = Math.min(minX, v.x);\n            maxX = Math.max(maxX, v.x);\n            minY = Math.min(minY, options.scaleY * v.y);\n            maxY = Math.max(maxY, options.scaleY * v.y);\n        }\n        var width = maxX - minX;\n        var height = maxY - minY;\n        var texture = web.canvas(function (ctx) {\n            this.size(width + 2 * lw, height + 2 * lw, ratio);\n            ctx.scale(ratio, ratio);\n            ctx.beginPath();\n            for (var i = 0; i < vertices.length; ++i) {\n                var v = vertices[i];\n                var x = v.x - minX + lw;\n                var y = options.scaleY * v.y - minY + lw;\n                if (i == 0)\n                    ctx.moveTo(x, y);\n                else\n                    ctx.lineTo(x, y);\n            }\n            // TODO: if loop\n            if (vertices.length > 2) ;\n            if (options.fillStyle) {\n                ctx.fillStyle = options.fillStyle;\n                ctx.fill();\n                ctx.closePath();\n            }\n            ctx.lineCap = 'round';\n            ctx.lineWidth = options.lineWidth;\n            ctx.strokeStyle = options.strokeStyle;\n            ctx.stroke();\n        });\n        var image = web.image(texture);\n        image.offset(minX - lw, minY - lw);\n        var node = web.create().append(image);\n        return node;\n    };\n    /** @deprecated Merged with main namespace */\n    var internal = {};\n    // @ts-ignore\n    internal.CollidePolygons = CollidePolygons;\n    // @ts-ignore\n    internal.Settings = Settings;\n    // @ts-ignore\n    internal.Sweep = Sweep;\n    // @ts-ignore\n    internal.Manifold = Manifold;\n    // @ts-ignore\n    internal.Distance = Distance;\n    // @ts-ignore\n    internal.TimeOfImpact = TimeOfImpact;\n    // @ts-ignore\n    internal.DynamicTree = DynamicTree;\n    // @ts-ignore\n    internal.stats = stats$1;\n    // @ts-ignore\n    Solver.TimeStep = TimeStep;\n    // @ts-ignore\n    Distance.testOverlap = testOverlap;\n    // @ts-ignore\n    Distance.Input = DistanceInput;\n    // @ts-ignore\n    Distance.Output = DistanceOutput;\n    // @ts-ignore\n    Distance.Proxy = DistanceProxy;\n    // @ts-ignore\n    Distance.Cache = SimplexCache;\n    // @ts-ignore\n    TimeOfImpact.Input = TOIInput;\n    // @ts-ignore\n    TimeOfImpact.Output = TOIOutput;\n\n    exports.AABB = AABB;\n    exports.Body = Body;\n    exports.Box = BoxShape;\n    exports.Chain = ChainShape;\n    exports.Circle = CircleShape;\n    exports.CollideCircles = CollideCircles;\n    exports.CollideEdgeCircle = CollideEdgeCircle;\n    exports.CollideEdgePolygon = CollideEdgePolygon;\n    exports.CollidePolygonCircle = CollidePolygonCircle;\n    exports.CollidePolygons = CollidePolygons;\n    exports.Contact = Contact;\n    exports.Distance = Distance;\n    exports.DistanceJoint = DistanceJoint;\n    exports.DynamicTree = DynamicTree;\n    exports.Edge = EdgeShape;\n    exports.Fixture = Fixture;\n    exports.FrictionJoint = FrictionJoint;\n    exports.GearJoint = GearJoint;\n    exports.Joint = Joint;\n    exports.Manifold = Manifold;\n    exports.Mat22 = Mat22;\n    exports.Mat33 = Mat33;\n    exports.Math = math$1;\n    exports.MotorJoint = MotorJoint;\n    exports.MouseJoint = MouseJoint;\n    exports.Polygon = PolygonShape;\n    exports.PrismaticJoint = PrismaticJoint;\n    exports.PulleyJoint = PulleyJoint;\n    exports.RevoluteJoint = RevoluteJoint;\n    exports.RopeJoint = RopeJoint;\n    exports.Rot = Rot;\n    exports.Serializer = Serializer;\n    exports.Settings = Settings;\n    exports.Shape = Shape;\n    exports.Sweep = Sweep;\n    exports.TimeOfImpact = TimeOfImpact;\n    exports.Transform = Transform;\n    exports.Vec2 = Vec2;\n    exports.Vec3 = Vec3;\n    exports.WeldJoint = WeldJoint;\n    exports.WheelJoint = WheelJoint;\n    exports.World = World;\n    exports.internal = internal;\n    exports.testbed = testbed;\n\n    Object.defineProperty(exports, '__esModule', { value: true });\n\n})));\n//# sourceMappingURL=planck-with-testbed.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/planck/dist/planck-with-testbed.js\n");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/compat get default export */
/******/ 	!function() {
/******/ 		// getDefaultExport function for compatibility with non-harmony modules
/******/ 		__webpack_require__.n = function(module) {
/******/ 			var getter = module && module.__esModule ?
/******/ 				function() { return module['default']; } :
/******/ 				function() { return module; };
/******/ 			__webpack_require__.d(getter, { a: getter });
/******/ 			return getter;
/******/ 		};
/******/ 	}();
/******/ 	
/******/ 	/* webpack/runtime/define property getters */
/******/ 	!function() {
/******/ 		// define getter functions for harmony exports
/******/ 		__webpack_require__.d = function(exports, definition) {
/******/ 			for(var key in definition) {
/******/ 				if(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {
/******/ 					Object.defineProperty(exports, key, { enumerable: true, get: definition[key] });
/******/ 				}
/******/ 			}
/******/ 		};
/******/ 	}();
/******/ 	
/******/ 	/* webpack/runtime/hasOwnProperty shorthand */
/******/ 	!function() {
/******/ 		__webpack_require__.o = function(obj, prop) { return Object.prototype.hasOwnProperty.call(obj, prop); }
/******/ 	}();
/******/ 	
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	!function() {
/******/ 		// define __esModule on exports
/******/ 		__webpack_require__.r = function(exports) {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	}();
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval-source-map devtool is used.
/******/ 	__webpack_require__("./src/index.js");
/******/ 	var __webpack_exports__ = __webpack_require__("./src/index.scss");
/******/ 	
/******/ })()
;